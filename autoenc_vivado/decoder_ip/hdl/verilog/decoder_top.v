// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="decoder_top,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=72,HLS_SYN_FF=2012,HLS_SYN_LUT=6936,HLS_VERSION=2018_2}" *)

module decoder_top (
        ap_clk,
        ap_rst_n,
        axis_dec_data_in_TDATA,
        axis_dec_data_in_TVALID,
        axis_dec_data_in_TREADY,
        axis_dec_data_in_TKEEP,
        axis_dec_data_in_TLAST,
        axis_dec_data_out_TDATA,
        axis_dec_data_out_TVALID,
        axis_dec_data_out_TREADY,
        axis_dec_data_out_TKEEP,
        axis_dec_data_out_TLAST
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst_n;
input  [31:0] axis_dec_data_in_TDATA;
input   axis_dec_data_in_TVALID;
output   axis_dec_data_in_TREADY;
input  [3:0] axis_dec_data_in_TKEEP;
input  [0:0] axis_dec_data_in_TLAST;
output  [31:0] axis_dec_data_out_TDATA;
output   axis_dec_data_out_TVALID;
input   axis_dec_data_out_TREADY;
output  [3:0] axis_dec_data_out_TKEEP;
output  [0:0] axis_dec_data_out_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] axis_dec_data_in_V_data_V_0_data_out;
wire    axis_dec_data_in_V_data_V_0_vld_in;
wire    axis_dec_data_in_V_data_V_0_vld_out;
wire    axis_dec_data_in_V_data_V_0_ack_in;
reg    axis_dec_data_in_V_data_V_0_ack_out;
reg   [31:0] axis_dec_data_in_V_data_V_0_payload_A;
reg   [31:0] axis_dec_data_in_V_data_V_0_payload_B;
reg    axis_dec_data_in_V_data_V_0_sel_rd;
reg    axis_dec_data_in_V_data_V_0_sel_wr;
wire    axis_dec_data_in_V_data_V_0_sel;
wire    axis_dec_data_in_V_data_V_0_load_A;
wire    axis_dec_data_in_V_data_V_0_load_B;
reg   [1:0] axis_dec_data_in_V_data_V_0_state;
wire    axis_dec_data_in_V_data_V_0_state_cmp_full;
reg   [0:0] axis_dec_data_in_V_last_V_0_data_out;
wire    axis_dec_data_in_V_last_V_0_vld_in;
wire    axis_dec_data_in_V_last_V_0_vld_out;
wire    axis_dec_data_in_V_last_V_0_ack_in;
reg    axis_dec_data_in_V_last_V_0_ack_out;
reg   [0:0] axis_dec_data_in_V_last_V_0_payload_A;
reg   [0:0] axis_dec_data_in_V_last_V_0_payload_B;
reg    axis_dec_data_in_V_last_V_0_sel_rd;
reg    axis_dec_data_in_V_last_V_0_sel_wr;
wire    axis_dec_data_in_V_last_V_0_sel;
wire    axis_dec_data_in_V_last_V_0_load_A;
wire    axis_dec_data_in_V_last_V_0_load_B;
reg   [1:0] axis_dec_data_in_V_last_V_0_state;
wire    axis_dec_data_in_V_last_V_0_state_cmp_full;
reg   [31:0] axis_dec_data_out_V_data_V_1_data_out;
reg    axis_dec_data_out_V_data_V_1_vld_in;
wire    axis_dec_data_out_V_data_V_1_vld_out;
wire    axis_dec_data_out_V_data_V_1_ack_in;
wire    axis_dec_data_out_V_data_V_1_ack_out;
reg   [31:0] axis_dec_data_out_V_data_V_1_payload_A;
reg   [31:0] axis_dec_data_out_V_data_V_1_payload_B;
reg    axis_dec_data_out_V_data_V_1_sel_rd;
reg    axis_dec_data_out_V_data_V_1_sel_wr;
wire    axis_dec_data_out_V_data_V_1_sel;
wire    axis_dec_data_out_V_data_V_1_load_A;
wire    axis_dec_data_out_V_data_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_data_V_1_state;
wire    axis_dec_data_out_V_data_V_1_state_cmp_full;
wire   [3:0] axis_dec_data_out_V_keep_V_1_data_out;
reg    axis_dec_data_out_V_keep_V_1_vld_in;
wire    axis_dec_data_out_V_keep_V_1_vld_out;
wire    axis_dec_data_out_V_keep_V_1_ack_in;
wire    axis_dec_data_out_V_keep_V_1_ack_out;
reg    axis_dec_data_out_V_keep_V_1_sel_rd;
wire    axis_dec_data_out_V_keep_V_1_sel;
reg   [1:0] axis_dec_data_out_V_keep_V_1_state;
reg   [0:0] axis_dec_data_out_V_last_V_1_data_out;
reg    axis_dec_data_out_V_last_V_1_vld_in;
wire    axis_dec_data_out_V_last_V_1_vld_out;
wire    axis_dec_data_out_V_last_V_1_ack_in;
wire    axis_dec_data_out_V_last_V_1_ack_out;
reg   [0:0] axis_dec_data_out_V_last_V_1_payload_A;
reg   [0:0] axis_dec_data_out_V_last_V_1_payload_B;
reg    axis_dec_data_out_V_last_V_1_sel_rd;
reg    axis_dec_data_out_V_last_V_1_sel_wr;
wire    axis_dec_data_out_V_last_V_1_sel;
wire    axis_dec_data_out_V_last_V_1_load_A;
wire    axis_dec_data_out_V_last_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_last_V_1_state;
wire    axis_dec_data_out_V_last_V_1_state_cmp_full;
reg    axis_dec_data_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg    axis_dec_data_out_TDATA_blk_n;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
reg   [0:0] tmp_140_reg_564;
wire   [1:0] i_1_fu_196_p2;
reg   [1:0] i_1_reg_531;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_202_p1;
reg   [0:0] tmp_reg_536;
wire   [0:0] exitcond_fu_190_p2;
wire   [0:0] axis_dec_data_in_ite_2_fu_214_p3;
wire   [0:0] axis_dec_data_in_ite_3_fu_221_p3;
wire   [63:0] dec_data_in_V_fu_367_p2;
wire   [127:0] grp_decoder_fu_180_ap_return;
reg   [127:0] dec_data_out_V_reg_558;
wire    ap_CS_fsm_state15;
wire   [0:0] tmp_140_fu_373_p3;
wire    ap_CS_fsm_state16;
wire   [2:0] i_2_fu_381_p2;
reg   [2:0] i_2_reg_568;
wire   [7:0] tmp_152_fu_469_p2;
reg   [7:0] tmp_152_reg_573;
wire   [127:0] tmp_155_fu_479_p2;
reg   [127:0] tmp_155_reg_578;
wire   [0:0] tmp_last_V_fu_503_p2;
reg   [0:0] tmp_last_V_reg_583;
wire   [31:0] axis_dec_data_out_it_fu_523_p1;
wire    grp_decoder_fu_180_ap_start;
wire    grp_decoder_fu_180_ap_done;
wire    grp_decoder_fu_180_ap_idle;
wire    grp_decoder_fu_180_ap_ready;
reg   [0:0] axis_dec_data_in_ite_reg_122;
reg   [0:0] axis_dec_data_in_ite_1_reg_134;
reg   [63:0] dec_data_in_V_s_reg_146;
reg   [1:0] i_reg_158;
wire    ap_CS_fsm_state1;
reg   [2:0] i3_reg_169;
reg    ap_block_state18;
reg    ap_block_state18_io;
reg    grp_decoder_fu_180_ap_start_reg;
reg   [17:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_CS_fsm_state4;
wire   [5:0] tmp_s_fu_228_p3;
wire   [5:0] tmp_32_fu_235_p2;
wire   [6:0] tmp_120_fu_247_p1;
wire   [0:0] tmp_119_fu_241_p2;
wire   [6:0] tmp_121_fu_251_p1;
wire   [6:0] tmp_123_fu_259_p2;
wire   [6:0] tmp_124_fu_265_p3;
wire   [6:0] tmp_126_fu_281_p3;
wire   [6:0] tmp_125_fu_273_p3;
wire   [6:0] tmp_127_fu_289_p2;
wire   [63:0] tmp_122_fu_255_p1;
wire   [63:0] tmp_128_fu_295_p1;
wire   [63:0] tmp_131_fu_307_p2;
reg   [63:0] tmp_132_fu_313_p4;
wire   [63:0] tmp_129_fu_299_p1;
wire   [63:0] tmp_130_fu_303_p1;
wire   [63:0] tmp_134_fu_331_p2;
wire   [63:0] tmp_135_fu_337_p2;
wire   [63:0] p_demorgan_fu_343_p2;
wire   [63:0] tmp_136_fu_349_p2;
wire   [63:0] tmp_133_fu_323_p3;
wire   [63:0] tmp_137_fu_355_p2;
wire   [63:0] tmp_138_fu_361_p2;
wire   [1:0] tmp_141_fu_387_p1;
wire   [6:0] tmp_33_fu_391_p3;
wire   [6:0] tmp_34_fu_399_p2;
wire   [7:0] tmp_143_fu_411_p1;
wire   [7:0] tmp_144_fu_415_p1;
wire   [0:0] tmp_142_fu_405_p2;
wire   [7:0] tmp_146_fu_428_p2;
wire   [7:0] tmp_148_fu_440_p2;
reg   [127:0] tmp_145_fu_419_p4;
wire   [7:0] tmp_147_fu_434_p2;
wire   [7:0] tmp_149_fu_446_p3;
wire   [7:0] tmp_151_fu_461_p3;
wire   [127:0] tmp_150_fu_454_p3;
wire   [127:0] tmp_153_fu_475_p1;
wire   [0:0] tmp_159_fu_485_p1;
wire   [0:0] axis_dec_data_in_ite_5_fu_489_p3;
wire   [0:0] tmp_8_fu_497_p2;
wire   [127:0] tmp_154_fu_509_p1;
wire   [127:0] tmp_156_fu_512_p2;
wire   [127:0] tmp_157_fu_518_p2;

// power-on initialization
initial begin
#0 axis_dec_data_in_V_data_V_0_sel_rd = 1'b0;
#0 axis_dec_data_in_V_data_V_0_sel_wr = 1'b0;
#0 axis_dec_data_in_V_data_V_0_state = 2'd0;
#0 axis_dec_data_in_V_last_V_0_sel_rd = 1'b0;
#0 axis_dec_data_in_V_last_V_0_sel_wr = 1'b0;
#0 axis_dec_data_in_V_last_V_0_state = 2'd0;
#0 axis_dec_data_out_V_data_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_data_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_data_V_1_state = 2'd0;
#0 axis_dec_data_out_V_keep_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_keep_V_1_state = 2'd0;
#0 axis_dec_data_out_V_last_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_last_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 18'd1;
#0 grp_decoder_fu_180_ap_start_reg = 1'b0;
end

decoder grp_decoder_fu_180(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_decoder_fu_180_ap_start),
    .ap_done(grp_decoder_fu_180_ap_done),
    .ap_idle(grp_decoder_fu_180_ap_idle),
    .ap_ready(grp_decoder_fu_180_ap_ready),
    .data_V_read(dec_data_in_V_s_reg_146),
    .ap_return(grp_decoder_fu_180_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_in_V_data_V_0_ack_out == 1'b1) & (axis_dec_data_in_V_data_V_0_vld_out == 1'b1))) begin
            axis_dec_data_in_V_data_V_0_sel_rd <= ~axis_dec_data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_in_V_data_V_0_ack_in == 1'b1) & (axis_dec_data_in_V_data_V_0_vld_in == 1'b1))) begin
            axis_dec_data_in_V_data_V_0_sel_wr <= ~axis_dec_data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_in_V_data_V_0_state == 2'd2) & (axis_dec_data_in_V_data_V_0_vld_in == 1'b0)) | ((axis_dec_data_in_V_data_V_0_state == 2'd3) & (axis_dec_data_in_V_data_V_0_vld_in == 1'b0) & (axis_dec_data_in_V_data_V_0_ack_out == 1'b1)))) begin
            axis_dec_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((axis_dec_data_in_V_data_V_0_state == 2'd1) & (axis_dec_data_in_V_data_V_0_ack_out == 1'b0)) | ((axis_dec_data_in_V_data_V_0_state == 2'd3) & (axis_dec_data_in_V_data_V_0_ack_out == 1'b0) & (axis_dec_data_in_V_data_V_0_vld_in == 1'b1)))) begin
            axis_dec_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((axis_dec_data_in_V_data_V_0_vld_in == 1'b0) & (axis_dec_data_in_V_data_V_0_ack_out == 1'b1)) & ~((axis_dec_data_in_V_data_V_0_ack_out == 1'b0) & (axis_dec_data_in_V_data_V_0_vld_in == 1'b1)) & (axis_dec_data_in_V_data_V_0_state == 2'd3)) | ((axis_dec_data_in_V_data_V_0_state == 2'd1) & (axis_dec_data_in_V_data_V_0_ack_out == 1'b1)) | ((axis_dec_data_in_V_data_V_0_state == 2'd2) & (axis_dec_data_in_V_data_V_0_vld_in == 1'b1)))) begin
            axis_dec_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            axis_dec_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_in_V_last_V_0_ack_out == 1'b1) & (axis_dec_data_in_V_last_V_0_vld_out == 1'b1))) begin
            axis_dec_data_in_V_last_V_0_sel_rd <= ~axis_dec_data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_in_V_last_V_0_ack_in == 1'b1) & (axis_dec_data_in_V_last_V_0_vld_in == 1'b1))) begin
            axis_dec_data_in_V_last_V_0_sel_wr <= ~axis_dec_data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_in_V_last_V_0_state == 2'd2) & (axis_dec_data_in_V_last_V_0_vld_in == 1'b0)) | ((axis_dec_data_in_V_last_V_0_state == 2'd3) & (axis_dec_data_in_V_last_V_0_vld_in == 1'b0) & (axis_dec_data_in_V_last_V_0_ack_out == 1'b1)))) begin
            axis_dec_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((axis_dec_data_in_V_last_V_0_state == 2'd1) & (axis_dec_data_in_V_last_V_0_ack_out == 1'b0)) | ((axis_dec_data_in_V_last_V_0_state == 2'd3) & (axis_dec_data_in_V_last_V_0_ack_out == 1'b0) & (axis_dec_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            axis_dec_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((axis_dec_data_in_V_last_V_0_vld_in == 1'b0) & (axis_dec_data_in_V_last_V_0_ack_out == 1'b1)) & ~((axis_dec_data_in_V_last_V_0_ack_out == 1'b0) & (axis_dec_data_in_V_last_V_0_vld_in == 1'b1)) & (axis_dec_data_in_V_last_V_0_state == 2'd3)) | ((axis_dec_data_in_V_last_V_0_state == 2'd1) & (axis_dec_data_in_V_last_V_0_ack_out == 1'b1)) | ((axis_dec_data_in_V_last_V_0_state == 2'd2) & (axis_dec_data_in_V_last_V_0_vld_in == 1'b1)))) begin
            axis_dec_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            axis_dec_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_data_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_data_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_data_V_1_sel_rd <= ~axis_dec_data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_data_V_1_sel_wr <= ~axis_dec_data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_data_V_1_state == 2'd2) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b0)) | ((axis_dec_data_out_V_data_V_1_state == 2'd3) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b1)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_data_V_1_state == 2'd1) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b0)) | ((axis_dec_data_out_V_data_V_1_state == 2'd3) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_data_V_1_state == 2'd3)) | ((axis_dec_data_out_V_data_V_1_state == 2'd1) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b1)) | ((axis_dec_data_out_V_data_V_1_state == 2'd2) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_keep_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_keep_V_1_sel_rd <= ~axis_dec_data_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_keep_V_1_state == 2'd2) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b0)) | ((axis_dec_data_out_V_keep_V_1_state == 2'd3) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b1)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_keep_V_1_state == 2'd1) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b0)) | ((axis_dec_data_out_V_keep_V_1_state == 2'd3) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_keep_V_1_state == 2'd3)) | ((axis_dec_data_out_V_keep_V_1_state == 2'd1) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b1)) | ((axis_dec_data_out_V_keep_V_1_state == 2'd2) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_last_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_last_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_last_V_1_sel_rd <= ~axis_dec_data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_last_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_last_V_1_sel_wr <= ~axis_dec_data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_last_V_1_state == 2'd2) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b0)) | ((axis_dec_data_out_V_last_V_1_state == 2'd3) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b1)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_last_V_1_state == 2'd1) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b0)) | ((axis_dec_data_out_V_last_V_1_state == 2'd3) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_last_V_1_state == 2'd3)) | ((axis_dec_data_out_V_last_V_1_state == 2'd1) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b1)) | ((axis_dec_data_out_V_last_V_1_state == 2'd2) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_decoder_fu_180_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state4) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_decoder_fu_180_ap_start_reg <= 1'b1;
        end else if ((grp_decoder_fu_180_ap_ready == 1'b1)) begin
            grp_decoder_fu_180_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b1 == ap_block_state18_io) | (axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0)) & (tmp_last_V_reg_583 == 1'd0) & (tmp_140_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
        i3_reg_169 <= i_2_reg_568;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        i3_reg_169 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((axis_dec_data_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_reg_158 <= i_1_reg_531;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_158 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_in_V_data_V_0_load_A == 1'b1)) begin
        axis_dec_data_in_V_data_V_0_payload_A <= axis_dec_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_in_V_data_V_0_load_B == 1'b1)) begin
        axis_dec_data_in_V_data_V_0_payload_B <= axis_dec_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_in_V_last_V_0_load_A == 1'b1)) begin
        axis_dec_data_in_V_last_V_0_payload_A <= axis_dec_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_in_V_last_V_0_load_B == 1'b1)) begin
        axis_dec_data_in_V_last_V_0_payload_B <= axis_dec_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((axis_dec_data_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        axis_dec_data_in_ite_1_reg_134 <= axis_dec_data_in_ite_3_fu_221_p3;
        axis_dec_data_in_ite_reg_122 <= axis_dec_data_in_ite_2_fu_214_p3;
        dec_data_in_V_s_reg_146 <= dec_data_in_V_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_data_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_523_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_data_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_523_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_last_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_payload_A <= tmp_last_V_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_last_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_payload_B <= tmp_last_V_reg_583;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dec_data_out_V_reg_558 <= grp_decoder_fu_180_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_531 <= i_1_fu_196_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_2_reg_568 <= i_2_fu_381_p2;
        tmp_140_reg_564 <= i3_reg_169[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_140_fu_373_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        tmp_152_reg_573[7 : 1] <= tmp_152_fu_469_p2[7 : 1];
        tmp_155_reg_578 <= tmp_155_fu_479_p2;
        tmp_last_V_reg_583 <= tmp_last_V_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_190_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_reg_536 <= tmp_fu_202_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axis_dec_data_in_TDATA_blk_n = axis_dec_data_in_V_data_V_0_state[1'd0];
    end else begin
        axis_dec_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((axis_dec_data_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        axis_dec_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        axis_dec_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_in_V_data_V_0_sel == 1'b1)) begin
        axis_dec_data_in_V_data_V_0_data_out = axis_dec_data_in_V_data_V_0_payload_B;
    end else begin
        axis_dec_data_in_V_data_V_0_data_out = axis_dec_data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        axis_dec_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        axis_dec_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_in_V_last_V_0_sel == 1'b1)) begin
        axis_dec_data_in_V_last_V_0_data_out = axis_dec_data_in_V_last_V_0_payload_B;
    end else begin
        axis_dec_data_in_V_last_V_0_data_out = axis_dec_data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | ((tmp_140_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state18)))) begin
        axis_dec_data_out_TDATA_blk_n = axis_dec_data_out_V_data_V_1_state[1'd1];
    end else begin
        axis_dec_data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_data_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_data_out = axis_dec_data_out_V_data_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_data_V_1_data_out = axis_dec_data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        axis_dec_data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        axis_dec_data_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_last_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_data_out = axis_dec_data_out_V_last_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_last_V_1_data_out = axis_dec_data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
        axis_dec_data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond_fu_190_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((axis_dec_data_in_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((tmp_140_fu_373_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if ((~((1'b1 == ap_block_state18_io) | (axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0)) & (1'b1 == ap_CS_fsm_state18) & ((tmp_last_V_reg_583 == 1'd1) | (tmp_140_reg_564 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((1'b1 == ap_block_state18_io) | (axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0)) & (tmp_last_V_reg_583 == 1'd0) & (tmp_140_reg_564 == 1'd0) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

always @ (*) begin
    ap_block_state18 = ((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state18_io = ((tmp_140_reg_564 == 1'd0) & (axis_dec_data_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axis_dec_data_in_TREADY = axis_dec_data_in_V_last_V_0_state[1'd1];

assign axis_dec_data_in_V_data_V_0_ack_in = axis_dec_data_in_V_data_V_0_state[1'd1];

assign axis_dec_data_in_V_data_V_0_load_A = (~axis_dec_data_in_V_data_V_0_sel_wr & axis_dec_data_in_V_data_V_0_state_cmp_full);

assign axis_dec_data_in_V_data_V_0_load_B = (axis_dec_data_in_V_data_V_0_state_cmp_full & axis_dec_data_in_V_data_V_0_sel_wr);

assign axis_dec_data_in_V_data_V_0_sel = axis_dec_data_in_V_data_V_0_sel_rd;

assign axis_dec_data_in_V_data_V_0_state_cmp_full = ((axis_dec_data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_in_V_data_V_0_vld_in = axis_dec_data_in_TVALID;

assign axis_dec_data_in_V_data_V_0_vld_out = axis_dec_data_in_V_data_V_0_state[1'd0];

assign axis_dec_data_in_V_last_V_0_ack_in = axis_dec_data_in_V_last_V_0_state[1'd1];

assign axis_dec_data_in_V_last_V_0_load_A = (~axis_dec_data_in_V_last_V_0_sel_wr & axis_dec_data_in_V_last_V_0_state_cmp_full);

assign axis_dec_data_in_V_last_V_0_load_B = (axis_dec_data_in_V_last_V_0_state_cmp_full & axis_dec_data_in_V_last_V_0_sel_wr);

assign axis_dec_data_in_V_last_V_0_sel = axis_dec_data_in_V_last_V_0_sel_rd;

assign axis_dec_data_in_V_last_V_0_state_cmp_full = ((axis_dec_data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_in_V_last_V_0_vld_in = axis_dec_data_in_TVALID;

assign axis_dec_data_in_V_last_V_0_vld_out = axis_dec_data_in_V_last_V_0_state[1'd0];

assign axis_dec_data_in_ite_2_fu_214_p3 = ((tmp_reg_536[0:0] === 1'b1) ? axis_dec_data_in_V_last_V_0_data_out : axis_dec_data_in_ite_reg_122);

assign axis_dec_data_in_ite_3_fu_221_p3 = ((tmp_reg_536[0:0] === 1'b1) ? axis_dec_data_in_ite_1_reg_134 : axis_dec_data_in_V_last_V_0_data_out);

assign axis_dec_data_in_ite_5_fu_489_p3 = ((tmp_159_fu_485_p1[0:0] === 1'b1) ? axis_dec_data_in_ite_reg_122 : axis_dec_data_in_ite_1_reg_134);

assign axis_dec_data_out_TDATA = axis_dec_data_out_V_data_V_1_data_out;

assign axis_dec_data_out_TKEEP = axis_dec_data_out_V_keep_V_1_data_out;

assign axis_dec_data_out_TLAST = axis_dec_data_out_V_last_V_1_data_out;

assign axis_dec_data_out_TVALID = axis_dec_data_out_V_last_V_1_state[1'd0];

assign axis_dec_data_out_V_data_V_1_ack_in = axis_dec_data_out_V_data_V_1_state[1'd1];

assign axis_dec_data_out_V_data_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_data_V_1_load_A = (~axis_dec_data_out_V_data_V_1_sel_wr & axis_dec_data_out_V_data_V_1_state_cmp_full);

assign axis_dec_data_out_V_data_V_1_load_B = (axis_dec_data_out_V_data_V_1_state_cmp_full & axis_dec_data_out_V_data_V_1_sel_wr);

assign axis_dec_data_out_V_data_V_1_sel = axis_dec_data_out_V_data_V_1_sel_rd;

assign axis_dec_data_out_V_data_V_1_state_cmp_full = ((axis_dec_data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_data_V_1_vld_out = axis_dec_data_out_V_data_V_1_state[1'd0];

assign axis_dec_data_out_V_keep_V_1_ack_in = axis_dec_data_out_V_keep_V_1_state[1'd1];

assign axis_dec_data_out_V_keep_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_keep_V_1_data_out = 4'd15;

assign axis_dec_data_out_V_keep_V_1_sel = axis_dec_data_out_V_keep_V_1_sel_rd;

assign axis_dec_data_out_V_keep_V_1_vld_out = axis_dec_data_out_V_keep_V_1_state[1'd0];

assign axis_dec_data_out_V_last_V_1_ack_in = axis_dec_data_out_V_last_V_1_state[1'd1];

assign axis_dec_data_out_V_last_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_last_V_1_load_A = (~axis_dec_data_out_V_last_V_1_sel_wr & axis_dec_data_out_V_last_V_1_state_cmp_full);

assign axis_dec_data_out_V_last_V_1_load_B = (axis_dec_data_out_V_last_V_1_state_cmp_full & axis_dec_data_out_V_last_V_1_sel_wr);

assign axis_dec_data_out_V_last_V_1_sel = axis_dec_data_out_V_last_V_1_sel_rd;

assign axis_dec_data_out_V_last_V_1_state_cmp_full = ((axis_dec_data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_last_V_1_vld_out = axis_dec_data_out_V_last_V_1_state[1'd0];

assign axis_dec_data_out_it_fu_523_p1 = tmp_157_fu_518_p2[31:0];

assign dec_data_in_V_fu_367_p2 = (tmp_138_fu_361_p2 | tmp_137_fu_355_p2);

assign exitcond_fu_190_p2 = ((i_reg_158 == 2'd2) ? 1'b1 : 1'b0);

assign grp_decoder_fu_180_ap_start = grp_decoder_fu_180_ap_start_reg;

assign i_1_fu_196_p2 = (i_reg_158 + 2'd1);

assign i_2_fu_381_p2 = (i3_reg_169 + 3'd1);

assign p_demorgan_fu_343_p2 = (tmp_135_fu_337_p2 & tmp_134_fu_331_p2);

assign tmp_119_fu_241_p2 = ((tmp_s_fu_228_p3 > tmp_32_fu_235_p2) ? 1'b1 : 1'b0);

assign tmp_120_fu_247_p1 = tmp_s_fu_228_p3;

assign tmp_121_fu_251_p1 = tmp_32_fu_235_p2;

assign tmp_122_fu_255_p1 = axis_dec_data_in_V_data_V_0_data_out;

assign tmp_123_fu_259_p2 = (tmp_120_fu_247_p1 ^ 7'd63);

assign tmp_124_fu_265_p3 = ((tmp_119_fu_241_p2[0:0] === 1'b1) ? tmp_120_fu_247_p1 : tmp_121_fu_251_p1);

assign tmp_125_fu_273_p3 = ((tmp_119_fu_241_p2[0:0] === 1'b1) ? tmp_121_fu_251_p1 : tmp_120_fu_247_p1);

assign tmp_126_fu_281_p3 = ((tmp_119_fu_241_p2[0:0] === 1'b1) ? tmp_123_fu_259_p2 : tmp_120_fu_247_p1);

assign tmp_127_fu_289_p2 = (tmp_124_fu_265_p3 ^ 7'd63);

assign tmp_128_fu_295_p1 = tmp_126_fu_281_p3;

assign tmp_129_fu_299_p1 = tmp_125_fu_273_p3;

assign tmp_130_fu_303_p1 = tmp_127_fu_289_p2;

assign tmp_131_fu_307_p2 = tmp_122_fu_255_p1 << tmp_128_fu_295_p1;

integer ap_tvar_int_0;

always @ (tmp_131_fu_307_p2) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_132_fu_313_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_132_fu_313_p4[ap_tvar_int_0] = tmp_131_fu_307_p2[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_133_fu_323_p3 = ((tmp_119_fu_241_p2[0:0] === 1'b1) ? tmp_132_fu_313_p4 : tmp_131_fu_307_p2);

assign tmp_134_fu_331_p2 = 64'd18446744073709551615 << tmp_129_fu_299_p1;

assign tmp_135_fu_337_p2 = 64'd18446744073709551615 >> tmp_130_fu_303_p1;

assign tmp_136_fu_349_p2 = (p_demorgan_fu_343_p2 ^ 64'd18446744073709551615);

assign tmp_137_fu_355_p2 = (tmp_136_fu_349_p2 & dec_data_in_V_s_reg_146);

assign tmp_138_fu_361_p2 = (tmp_133_fu_323_p3 & p_demorgan_fu_343_p2);

assign tmp_140_fu_373_p3 = i3_reg_169[32'd2];

assign tmp_141_fu_387_p1 = i3_reg_169[1:0];

assign tmp_142_fu_405_p2 = ((tmp_33_fu_391_p3 > tmp_34_fu_399_p2) ? 1'b1 : 1'b0);

assign tmp_143_fu_411_p1 = tmp_33_fu_391_p3;

assign tmp_144_fu_415_p1 = tmp_34_fu_399_p2;

integer ap_tvar_int_1;

always @ (dec_data_out_V_reg_558) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_145_fu_419_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_145_fu_419_p4[ap_tvar_int_1] = dec_data_out_V_reg_558[127 - ap_tvar_int_1];
        end
    end
end

assign tmp_146_fu_428_p2 = (tmp_143_fu_411_p1 - tmp_144_fu_415_p1);

assign tmp_147_fu_434_p2 = (tmp_143_fu_411_p1 ^ 8'd127);

assign tmp_148_fu_440_p2 = (tmp_144_fu_415_p1 - tmp_143_fu_411_p1);

assign tmp_149_fu_446_p3 = ((tmp_142_fu_405_p2[0:0] === 1'b1) ? tmp_146_fu_428_p2 : tmp_148_fu_440_p2);

assign tmp_150_fu_454_p3 = ((tmp_142_fu_405_p2[0:0] === 1'b1) ? tmp_145_fu_419_p4 : dec_data_out_V_reg_558);

assign tmp_151_fu_461_p3 = ((tmp_142_fu_405_p2[0:0] === 1'b1) ? tmp_147_fu_434_p2 : tmp_143_fu_411_p1);

assign tmp_152_fu_469_p2 = (8'd127 - tmp_149_fu_446_p3);

assign tmp_153_fu_475_p1 = tmp_151_fu_461_p3;

assign tmp_154_fu_509_p1 = tmp_152_reg_573;

assign tmp_155_fu_479_p2 = tmp_150_fu_454_p3 >> tmp_153_fu_475_p1;

assign tmp_156_fu_512_p2 = 128'd340282366920938463463374607431768211455 >> tmp_154_fu_509_p1;

assign tmp_157_fu_518_p2 = (tmp_156_fu_512_p2 & tmp_155_reg_578);

assign tmp_159_fu_485_p1 = i3_reg_169[0:0];

assign tmp_32_fu_235_p2 = (tmp_s_fu_228_p3 | 6'd31);

assign tmp_33_fu_391_p3 = {{tmp_141_fu_387_p1}, {5'd0}};

assign tmp_34_fu_399_p2 = (tmp_33_fu_391_p3 | 7'd31);

assign tmp_8_fu_497_p2 = ((i3_reg_169 == 3'd3) ? 1'b1 : 1'b0);

assign tmp_fu_202_p1 = i_reg_158[0:0];

assign tmp_last_V_fu_503_p2 = (tmp_8_fu_497_p2 & axis_dec_data_in_ite_5_fu_489_p3);

assign tmp_s_fu_228_p3 = {{tmp_reg_536}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_152_reg_573[0] <= 1'b0;
end

endmodule //decoder_top
