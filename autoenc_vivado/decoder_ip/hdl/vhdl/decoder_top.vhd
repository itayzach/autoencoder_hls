-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decoder_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis_dec_data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_in_TVALID : IN STD_LOGIC;
    axis_dec_data_in_TREADY : OUT STD_LOGIC;
    axis_dec_data_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axis_dec_data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_dec_data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_out_TVALID : OUT STD_LOGIC;
    axis_dec_data_out_TREADY : IN STD_LOGIC;
    axis_dec_data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axis_dec_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of decoder_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "decoder_top,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=26,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=72,HLS_SYN_FF=2012,HLS_SYN_LUT=6936,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_in_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_in_V_data_V_0_sel : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_load_A : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_load_B : STD_LOGIC;
    signal axis_dec_data_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_in_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_in_V_last_V_0_sel : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_load_A : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_load_B : STD_LOGIC;
    signal axis_dec_data_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axis_dec_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_140_reg_564 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_196_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_531 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_202_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_536 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_in_ite_2_fu_214_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_in_ite_3_fu_221_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_data_in_V_fu_367_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_decoder_fu_180_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal dec_data_out_V_reg_558 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_140_fu_373_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_2_fu_381_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_568 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_152_fu_469_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_reg_573 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_155_fu_479_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_155_reg_578 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_last_V_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_583 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_it_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decoder_fu_180_ap_start : STD_LOGIC;
    signal grp_decoder_fu_180_ap_done : STD_LOGIC;
    signal grp_decoder_fu_180_ap_idle : STD_LOGIC;
    signal grp_decoder_fu_180_ap_ready : STD_LOGIC;
    signal axis_dec_data_in_ite_reg_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_in_ite_1_reg_134 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_data_in_V_s_reg_146 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_158 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i3_reg_169 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state18 : BOOLEAN;
    signal ap_block_state18_io : BOOLEAN;
    signal grp_decoder_fu_180_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_228_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_32_fu_235_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_120_fu_247_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_119_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_121_fu_251_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_123_fu_259_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_124_fu_265_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_126_fu_281_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_125_fu_273_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_127_fu_289_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_122_fu_255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_128_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_131_fu_307_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_132_fu_313_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_129_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_130_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_134_fu_331_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_135_fu_337_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan_fu_343_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_136_fu_349_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_133_fu_323_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_137_fu_355_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_138_fu_361_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_141_fu_387_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_391_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_34_fu_399_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_143_fu_411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_144_fu_415_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_142_fu_405_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_146_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_fu_440_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_145_fu_419_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_147_fu_434_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_fu_446_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_151_fu_461_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_fu_454_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_153_fu_475_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_159_fu_485_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_in_ite_5_fu_489_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_154_fu_509_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_156_fu_512_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_157_fu_518_p2 : STD_LOGIC_VECTOR (127 downto 0);

    component decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;



begin
    grp_decoder_fu_180 : component decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decoder_fu_180_ap_start,
        ap_done => grp_decoder_fu_180_ap_done,
        ap_idle => grp_decoder_fu_180_ap_idle,
        ap_ready => grp_decoder_fu_180_ap_ready,
        data_V_read => dec_data_in_V_s_reg_146,
        ap_return => grp_decoder_fu_180_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axis_dec_data_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_dec_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_in_V_data_V_0_sel_rd <= not(axis_dec_data_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_in_V_data_V_0_ack_in = ap_const_logic_1) and (axis_dec_data_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_in_V_data_V_0_sel_wr <= not(axis_dec_data_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_in_V_data_V_0_state = ap_const_lv2_2) and (axis_dec_data_in_V_data_V_0_vld_in = ap_const_logic_0)) or ((axis_dec_data_in_V_data_V_0_state = ap_const_lv2_3) and (axis_dec_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_dec_data_in_V_data_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_dec_data_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_in_V_data_V_0_state = ap_const_lv2_1) and (axis_dec_data_in_V_data_V_0_ack_out = ap_const_logic_0)) or ((axis_dec_data_in_V_data_V_0_state = ap_const_lv2_3) and (axis_dec_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_dec_data_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_dec_data_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_dec_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_dec_data_in_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_dec_data_in_V_data_V_0_state = ap_const_lv2_3)) or ((axis_dec_data_in_V_data_V_0_state = ap_const_lv2_1) and (axis_dec_data_in_V_data_V_0_ack_out = ap_const_logic_1)) or ((axis_dec_data_in_V_data_V_0_state = ap_const_lv2_2) and (axis_dec_data_in_V_data_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_dec_data_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_in_V_last_V_0_sel_rd <= not(axis_dec_data_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_in_V_last_V_0_ack_in = ap_const_logic_1) and (axis_dec_data_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_in_V_last_V_0_sel_wr <= not(axis_dec_data_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_in_V_last_V_0_state = ap_const_lv2_2) and (axis_dec_data_in_V_last_V_0_vld_in = ap_const_logic_0)) or ((axis_dec_data_in_V_last_V_0_state = ap_const_lv2_3) and (axis_dec_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_dec_data_in_V_last_V_0_ack_out = ap_const_logic_1)))) then 
                    axis_dec_data_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_in_V_last_V_0_state = ap_const_lv2_1) and (axis_dec_data_in_V_last_V_0_ack_out = ap_const_logic_0)) or ((axis_dec_data_in_V_last_V_0_state = ap_const_lv2_3) and (axis_dec_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_dec_data_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_dec_data_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_dec_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_dec_data_in_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_dec_data_in_V_last_V_0_state = ap_const_lv2_3)) or ((axis_dec_data_in_V_last_V_0_state = ap_const_lv2_1) and (axis_dec_data_in_V_last_V_0_ack_out = ap_const_logic_1)) or ((axis_dec_data_in_V_last_V_0_state = ap_const_lv2_2) and (axis_dec_data_in_V_last_V_0_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_rd <= not(axis_dec_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_wr <= not(axis_dec_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0)) or ((axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0)) or ((axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1)) or ((axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_rd <= not(axis_dec_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0)) or ((axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0)) or ((axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1)) or ((axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_rd <= not(axis_dec_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_wr <= not(axis_dec_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0)) or ((axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0)) or ((axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1)) or ((axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_decoder_fu_180_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decoder_fu_180_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_decoder_fu_180_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoder_fu_180_ap_ready = ap_const_logic_1)) then 
                    grp_decoder_fu_180_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i3_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state18_io) or (axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmp_last_V_reg_583 = ap_const_lv1_0) and (tmp_140_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i3_reg_169 <= i_2_reg_568;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i3_reg_169 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_dec_data_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_158 <= i_1_reg_531;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_158 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_in_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_dec_data_in_V_data_V_0_payload_A <= axis_dec_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_in_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_dec_data_in_V_data_V_0_payload_B <= axis_dec_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_in_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_dec_data_in_V_last_V_0_payload_A <= axis_dec_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_in_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_dec_data_in_V_last_V_0_payload_B <= axis_dec_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_dec_data_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                axis_dec_data_in_ite_1_reg_134 <= axis_dec_data_in_ite_3_fu_221_p3;
                axis_dec_data_in_ite_reg_122 <= axis_dec_data_in_ite_2_fu_214_p3;
                dec_data_in_V_s_reg_146 <= dec_data_in_V_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_523_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_A <= tmp_last_V_reg_583;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_B <= tmp_last_V_reg_583;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                dec_data_out_V_reg_558 <= grp_decoder_fu_180_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_531 <= i_1_fu_196_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_2_reg_568 <= i_2_fu_381_p2;
                tmp_140_reg_564 <= i3_reg_169(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_140_fu_373_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    tmp_152_reg_573(7 downto 1) <= tmp_152_fu_469_p2(7 downto 1);
                tmp_155_reg_578 <= tmp_155_fu_479_p2;
                tmp_last_V_reg_583 <= tmp_last_V_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_190_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_reg_536 <= tmp_fu_202_p1;
            end if;
        end if;
    end process;
    tmp_152_reg_573(0) <= '0';

    ap_NS_fsm_assign_proc : process (axis_dec_data_in_V_data_V_0_vld_out, axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state17, ap_CS_fsm_state18, tmp_140_reg_564, ap_CS_fsm_state2, exitcond_fu_190_p2, tmp_140_fu_373_p3, ap_CS_fsm_state16, tmp_last_V_reg_583, ap_block_state18_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_190_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((axis_dec_data_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                if (((tmp_140_fu_373_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if ((not(((ap_const_boolean_1 = ap_block_state18_io) or (axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state18) and ((tmp_last_V_reg_583 = ap_const_lv1_1) or (tmp_140_reg_564 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((ap_const_boolean_1 = ap_block_state18_io) or (axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0))) and (tmp_last_V_reg_583 = ap_const_lv1_0) and (tmp_140_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_block_state18_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state18 <= ((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state18_io_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, tmp_140_reg_564)
    begin
                ap_block_state18_io <= ((tmp_140_reg_564 = ap_const_lv1_0) and (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    axis_dec_data_in_TDATA_blk_n_assign_proc : process(axis_dec_data_in_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis_dec_data_in_TDATA_blk_n <= axis_dec_data_in_V_data_V_0_state(0);
        else 
            axis_dec_data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_dec_data_in_TREADY <= axis_dec_data_in_V_last_V_0_state(1);
    axis_dec_data_in_V_data_V_0_ack_in <= axis_dec_data_in_V_data_V_0_state(1);

    axis_dec_data_in_V_data_V_0_ack_out_assign_proc : process(axis_dec_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((axis_dec_data_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            axis_dec_data_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_dec_data_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_dec_data_in_V_data_V_0_data_out_assign_proc : process(axis_dec_data_in_V_data_V_0_payload_A, axis_dec_data_in_V_data_V_0_payload_B, axis_dec_data_in_V_data_V_0_sel)
    begin
        if ((axis_dec_data_in_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_dec_data_in_V_data_V_0_data_out <= axis_dec_data_in_V_data_V_0_payload_B;
        else 
            axis_dec_data_in_V_data_V_0_data_out <= axis_dec_data_in_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_dec_data_in_V_data_V_0_load_A <= (not(axis_dec_data_in_V_data_V_0_sel_wr) and axis_dec_data_in_V_data_V_0_state_cmp_full);
    axis_dec_data_in_V_data_V_0_load_B <= (axis_dec_data_in_V_data_V_0_state_cmp_full and axis_dec_data_in_V_data_V_0_sel_wr);
    axis_dec_data_in_V_data_V_0_sel <= axis_dec_data_in_V_data_V_0_sel_rd;
    axis_dec_data_in_V_data_V_0_state_cmp_full <= '0' when (axis_dec_data_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_dec_data_in_V_data_V_0_vld_in <= axis_dec_data_in_TVALID;
    axis_dec_data_in_V_data_V_0_vld_out <= axis_dec_data_in_V_data_V_0_state(0);
    axis_dec_data_in_V_last_V_0_ack_in <= axis_dec_data_in_V_last_V_0_state(1);

    axis_dec_data_in_V_last_V_0_ack_out_assign_proc : process(axis_dec_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((axis_dec_data_in_V_data_V_0_vld_out = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            axis_dec_data_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_dec_data_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_dec_data_in_V_last_V_0_data_out_assign_proc : process(axis_dec_data_in_V_last_V_0_payload_A, axis_dec_data_in_V_last_V_0_payload_B, axis_dec_data_in_V_last_V_0_sel)
    begin
        if ((axis_dec_data_in_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_dec_data_in_V_last_V_0_data_out <= axis_dec_data_in_V_last_V_0_payload_B;
        else 
            axis_dec_data_in_V_last_V_0_data_out <= axis_dec_data_in_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_dec_data_in_V_last_V_0_load_A <= (not(axis_dec_data_in_V_last_V_0_sel_wr) and axis_dec_data_in_V_last_V_0_state_cmp_full);
    axis_dec_data_in_V_last_V_0_load_B <= (axis_dec_data_in_V_last_V_0_state_cmp_full and axis_dec_data_in_V_last_V_0_sel_wr);
    axis_dec_data_in_V_last_V_0_sel <= axis_dec_data_in_V_last_V_0_sel_rd;
    axis_dec_data_in_V_last_V_0_state_cmp_full <= '0' when (axis_dec_data_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_dec_data_in_V_last_V_0_vld_in <= axis_dec_data_in_TVALID;
    axis_dec_data_in_V_last_V_0_vld_out <= axis_dec_data_in_V_last_V_0_state(0);
    axis_dec_data_in_ite_2_fu_214_p3 <= 
        axis_dec_data_in_V_last_V_0_data_out when (tmp_reg_536(0) = '1') else 
        axis_dec_data_in_ite_reg_122;
    axis_dec_data_in_ite_3_fu_221_p3 <= 
        axis_dec_data_in_ite_1_reg_134 when (tmp_reg_536(0) = '1') else 
        axis_dec_data_in_V_last_V_0_data_out;
    axis_dec_data_in_ite_5_fu_489_p3 <= 
        axis_dec_data_in_ite_reg_122 when (tmp_159_fu_485_p1(0) = '1') else 
        axis_dec_data_in_ite_1_reg_134;
    axis_dec_data_out_TDATA <= axis_dec_data_out_V_data_V_1_data_out;

    axis_dec_data_out_TDATA_blk_n_assign_proc : process(axis_dec_data_out_V_data_V_1_state, ap_CS_fsm_state17, ap_CS_fsm_state18, tmp_140_reg_564)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or ((tmp_140_reg_564 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state18)))) then 
            axis_dec_data_out_TDATA_blk_n <= axis_dec_data_out_V_data_V_1_state(1);
        else 
            axis_dec_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_dec_data_out_TKEEP <= axis_dec_data_out_V_keep_V_1_data_out;
    axis_dec_data_out_TLAST <= axis_dec_data_out_V_last_V_1_data_out;
    axis_dec_data_out_TVALID <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_V_data_V_1_ack_in <= axis_dec_data_out_V_data_V_1_state(1);
    axis_dec_data_out_V_data_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_data_V_1_data_out_assign_proc : process(axis_dec_data_out_V_data_V_1_payload_A, axis_dec_data_out_V_data_V_1_payload_B, axis_dec_data_out_V_data_V_1_sel)
    begin
        if ((axis_dec_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_B;
        else 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_load_A <= (not(axis_dec_data_out_V_data_V_1_sel_wr) and axis_dec_data_out_V_data_V_1_state_cmp_full);
    axis_dec_data_out_V_data_V_1_load_B <= (axis_dec_data_out_V_data_V_1_state_cmp_full and axis_dec_data_out_V_data_V_1_sel_wr);
    axis_dec_data_out_V_data_V_1_sel <= axis_dec_data_out_V_data_V_1_sel_rd;
    axis_dec_data_out_V_data_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_data_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state17)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_vld_out <= axis_dec_data_out_V_data_V_1_state(0);
    axis_dec_data_out_V_keep_V_1_ack_in <= axis_dec_data_out_V_keep_V_1_state(1);
    axis_dec_data_out_V_keep_V_1_ack_out <= axis_dec_data_out_TREADY;
    axis_dec_data_out_V_keep_V_1_data_out <= ap_const_lv4_F;
    axis_dec_data_out_V_keep_V_1_sel <= axis_dec_data_out_V_keep_V_1_sel_rd;

    axis_dec_data_out_V_keep_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state17)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_vld_out <= axis_dec_data_out_V_keep_V_1_state(0);
    axis_dec_data_out_V_last_V_1_ack_in <= axis_dec_data_out_V_last_V_1_state(1);
    axis_dec_data_out_V_last_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_last_V_1_data_out_assign_proc : process(axis_dec_data_out_V_last_V_1_payload_A, axis_dec_data_out_V_last_V_1_payload_B, axis_dec_data_out_V_last_V_1_sel)
    begin
        if ((axis_dec_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_B;
        else 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_load_A <= (not(axis_dec_data_out_V_last_V_1_sel_wr) and axis_dec_data_out_V_last_V_1_state_cmp_full);
    axis_dec_data_out_V_last_V_1_load_B <= (axis_dec_data_out_V_last_V_1_state_cmp_full and axis_dec_data_out_V_last_V_1_sel_wr);
    axis_dec_data_out_V_last_V_1_sel <= axis_dec_data_out_V_last_V_1_sel_rd;
    axis_dec_data_out_V_last_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_last_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state17)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_vld_out <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_it_fu_523_p1 <= tmp_157_fu_518_p2(32 - 1 downto 0);
    dec_data_in_V_fu_367_p2 <= (tmp_138_fu_361_p2 or tmp_137_fu_355_p2);
    exitcond_fu_190_p2 <= "1" when (i_reg_158 = ap_const_lv2_2) else "0";
    grp_decoder_fu_180_ap_start <= grp_decoder_fu_180_ap_start_reg;
    i_1_fu_196_p2 <= std_logic_vector(unsigned(i_reg_158) + unsigned(ap_const_lv2_1));
    i_2_fu_381_p2 <= std_logic_vector(unsigned(i3_reg_169) + unsigned(ap_const_lv3_1));
    p_demorgan_fu_343_p2 <= (tmp_135_fu_337_p2 and tmp_134_fu_331_p2);
    tmp_119_fu_241_p2 <= "1" when (unsigned(tmp_s_fu_228_p3) > unsigned(tmp_32_fu_235_p2)) else "0";
    tmp_120_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_228_p3),7));
    tmp_121_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_235_p2),7));
    tmp_122_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(axis_dec_data_in_V_data_V_0_data_out),64));
    tmp_123_fu_259_p2 <= (tmp_120_fu_247_p1 xor ap_const_lv7_3F);
    tmp_124_fu_265_p3 <= 
        tmp_120_fu_247_p1 when (tmp_119_fu_241_p2(0) = '1') else 
        tmp_121_fu_251_p1;
    tmp_125_fu_273_p3 <= 
        tmp_121_fu_251_p1 when (tmp_119_fu_241_p2(0) = '1') else 
        tmp_120_fu_247_p1;
    tmp_126_fu_281_p3 <= 
        tmp_123_fu_259_p2 when (tmp_119_fu_241_p2(0) = '1') else 
        tmp_120_fu_247_p1;
    tmp_127_fu_289_p2 <= (tmp_124_fu_265_p3 xor ap_const_lv7_3F);
    tmp_128_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_126_fu_281_p3),64));
    tmp_129_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_125_fu_273_p3),64));
    tmp_130_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_127_fu_289_p2),64));
    tmp_131_fu_307_p2 <= std_logic_vector(shift_left(unsigned(tmp_122_fu_255_p1),to_integer(unsigned('0' & tmp_128_fu_295_p1(31-1 downto 0)))));
    
    tmp_132_fu_313_p4_proc : process(tmp_131_fu_307_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_132_fu_313_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_131_fu_307_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_132_fu_313_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_132_fu_313_p4_i) := tmp_131_fu_307_p2(64-1-tmp_132_fu_313_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_132_fu_313_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_133_fu_323_p3 <= 
        tmp_132_fu_313_p4 when (tmp_119_fu_241_p2(0) = '1') else 
        tmp_131_fu_307_p2;
    tmp_134_fu_331_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_129_fu_299_p1(31-1 downto 0)))));
    tmp_135_fu_337_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_130_fu_303_p1(31-1 downto 0)))));
    tmp_136_fu_349_p2 <= (p_demorgan_fu_343_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_137_fu_355_p2 <= (tmp_136_fu_349_p2 and dec_data_in_V_s_reg_146);
    tmp_138_fu_361_p2 <= (tmp_133_fu_323_p3 and p_demorgan_fu_343_p2);
    tmp_140_fu_373_p3 <= i3_reg_169(2 downto 2);
    tmp_141_fu_387_p1 <= i3_reg_169(2 - 1 downto 0);
    tmp_142_fu_405_p2 <= "1" when (unsigned(tmp_33_fu_391_p3) > unsigned(tmp_34_fu_399_p2)) else "0";
    tmp_143_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_391_p3),8));
    tmp_144_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_399_p2),8));
    
    tmp_145_fu_419_p4_proc : process(dec_data_out_V_reg_558)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_145_fu_419_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := dec_data_out_V_reg_558;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_145_fu_419_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_145_fu_419_p4_i) := dec_data_out_V_reg_558(128-1-tmp_145_fu_419_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_145_fu_419_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_146_fu_428_p2 <= std_logic_vector(unsigned(tmp_143_fu_411_p1) - unsigned(tmp_144_fu_415_p1));
    tmp_147_fu_434_p2 <= (tmp_143_fu_411_p1 xor ap_const_lv8_7F);
    tmp_148_fu_440_p2 <= std_logic_vector(unsigned(tmp_144_fu_415_p1) - unsigned(tmp_143_fu_411_p1));
    tmp_149_fu_446_p3 <= 
        tmp_146_fu_428_p2 when (tmp_142_fu_405_p2(0) = '1') else 
        tmp_148_fu_440_p2;
    tmp_150_fu_454_p3 <= 
        tmp_145_fu_419_p4 when (tmp_142_fu_405_p2(0) = '1') else 
        dec_data_out_V_reg_558;
    tmp_151_fu_461_p3 <= 
        tmp_147_fu_434_p2 when (tmp_142_fu_405_p2(0) = '1') else 
        tmp_143_fu_411_p1;
    tmp_152_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_149_fu_446_p3));
    tmp_153_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_151_fu_461_p3),128));
    tmp_154_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_152_reg_573),128));
    tmp_155_fu_479_p2 <= std_logic_vector(shift_right(unsigned(tmp_150_fu_454_p3),to_integer(unsigned('0' & tmp_153_fu_475_p1(31-1 downto 0)))));
    tmp_156_fu_512_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_154_fu_509_p1(31-1 downto 0)))));
    tmp_157_fu_518_p2 <= (tmp_156_fu_512_p2 and tmp_155_reg_578);
    tmp_159_fu_485_p1 <= i3_reg_169(1 - 1 downto 0);
    tmp_32_fu_235_p2 <= (tmp_s_fu_228_p3 or ap_const_lv6_1F);
    tmp_33_fu_391_p3 <= (tmp_141_fu_387_p1 & ap_const_lv5_0);
    tmp_34_fu_399_p2 <= (tmp_33_fu_391_p3 or ap_const_lv7_1F);
    tmp_8_fu_497_p2 <= "1" when (i3_reg_169 = ap_const_lv3_3) else "0";
    tmp_fu_202_p1 <= i_reg_158(1 - 1 downto 0);
    tmp_last_V_fu_503_p2 <= (tmp_8_fu_497_p2 and axis_dec_data_in_ite_5_fu_489_p3);
    tmp_s_fu_228_p3 <= (tmp_reg_536 & ap_const_lv5_0);
end behav;
