// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="encoder_top,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=84,HLS_SYN_FF=17487,HLS_SYN_LUT=21778,HLS_VERSION=2018_2}" *)

module encoder_top (
        ap_clk,
        ap_rst_n,
        axis_enc_data_in_TDATA,
        axis_enc_data_in_TVALID,
        axis_enc_data_in_TREADY,
        axis_enc_data_in_TKEEP,
        axis_enc_data_in_TLAST,
        axis_enc_data_out_TDATA,
        axis_enc_data_out_TVALID,
        axis_enc_data_out_TREADY,
        axis_enc_data_out_TKEEP,
        axis_enc_data_out_TLAST
);

parameter    ap_ST_fsm_state1 = 97'd1;
parameter    ap_ST_fsm_state2 = 97'd2;
parameter    ap_ST_fsm_state3 = 97'd4;
parameter    ap_ST_fsm_state4 = 97'd8;
parameter    ap_ST_fsm_state5 = 97'd16;
parameter    ap_ST_fsm_state6 = 97'd32;
parameter    ap_ST_fsm_state7 = 97'd64;
parameter    ap_ST_fsm_state8 = 97'd128;
parameter    ap_ST_fsm_state9 = 97'd256;
parameter    ap_ST_fsm_state10 = 97'd512;
parameter    ap_ST_fsm_state11 = 97'd1024;
parameter    ap_ST_fsm_state12 = 97'd2048;
parameter    ap_ST_fsm_state13 = 97'd4096;
parameter    ap_ST_fsm_state14 = 97'd8192;
parameter    ap_ST_fsm_state15 = 97'd16384;
parameter    ap_ST_fsm_state16 = 97'd32768;
parameter    ap_ST_fsm_state17 = 97'd65536;
parameter    ap_ST_fsm_state18 = 97'd131072;
parameter    ap_ST_fsm_state19 = 97'd262144;
parameter    ap_ST_fsm_state20 = 97'd524288;
parameter    ap_ST_fsm_state21 = 97'd1048576;
parameter    ap_ST_fsm_state22 = 97'd2097152;
parameter    ap_ST_fsm_state23 = 97'd4194304;
parameter    ap_ST_fsm_state24 = 97'd8388608;
parameter    ap_ST_fsm_state25 = 97'd16777216;
parameter    ap_ST_fsm_state26 = 97'd33554432;
parameter    ap_ST_fsm_state27 = 97'd67108864;
parameter    ap_ST_fsm_state28 = 97'd134217728;
parameter    ap_ST_fsm_state29 = 97'd268435456;
parameter    ap_ST_fsm_state30 = 97'd536870912;
parameter    ap_ST_fsm_state31 = 97'd1073741824;
parameter    ap_ST_fsm_state32 = 97'd2147483648;
parameter    ap_ST_fsm_state33 = 97'd4294967296;
parameter    ap_ST_fsm_state34 = 97'd8589934592;
parameter    ap_ST_fsm_state35 = 97'd17179869184;
parameter    ap_ST_fsm_state36 = 97'd34359738368;
parameter    ap_ST_fsm_state37 = 97'd68719476736;
parameter    ap_ST_fsm_state38 = 97'd137438953472;
parameter    ap_ST_fsm_state39 = 97'd274877906944;
parameter    ap_ST_fsm_state40 = 97'd549755813888;
parameter    ap_ST_fsm_state41 = 97'd1099511627776;
parameter    ap_ST_fsm_state42 = 97'd2199023255552;
parameter    ap_ST_fsm_state43 = 97'd4398046511104;
parameter    ap_ST_fsm_state44 = 97'd8796093022208;
parameter    ap_ST_fsm_state45 = 97'd17592186044416;
parameter    ap_ST_fsm_state46 = 97'd35184372088832;
parameter    ap_ST_fsm_state47 = 97'd70368744177664;
parameter    ap_ST_fsm_state48 = 97'd140737488355328;
parameter    ap_ST_fsm_state49 = 97'd281474976710656;
parameter    ap_ST_fsm_state50 = 97'd562949953421312;
parameter    ap_ST_fsm_state51 = 97'd1125899906842624;
parameter    ap_ST_fsm_state52 = 97'd2251799813685248;
parameter    ap_ST_fsm_state53 = 97'd4503599627370496;
parameter    ap_ST_fsm_state54 = 97'd9007199254740992;
parameter    ap_ST_fsm_state55 = 97'd18014398509481984;
parameter    ap_ST_fsm_state56 = 97'd36028797018963968;
parameter    ap_ST_fsm_state57 = 97'd72057594037927936;
parameter    ap_ST_fsm_state58 = 97'd144115188075855872;
parameter    ap_ST_fsm_state59 = 97'd288230376151711744;
parameter    ap_ST_fsm_state60 = 97'd576460752303423488;
parameter    ap_ST_fsm_state61 = 97'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 97'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 97'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 97'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 97'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 97'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 97'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 97'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 97'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 97'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 97'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 97'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 97'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 97'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 97'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 97'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 97'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 97'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 97'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 97'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 97'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 97'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 97'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 97'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 97'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 97'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 97'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 97'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 97'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 97'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 97'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 97'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 97'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 97'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 97'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 97'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 97'd79228162514264337593543950336;

input   ap_clk;
input   ap_rst_n;
input  [31:0] axis_enc_data_in_TDATA;
input   axis_enc_data_in_TVALID;
output   axis_enc_data_in_TREADY;
input  [3:0] axis_enc_data_in_TKEEP;
input  [0:0] axis_enc_data_in_TLAST;
output  [31:0] axis_enc_data_out_TDATA;
output   axis_enc_data_out_TVALID;
input   axis_enc_data_out_TREADY;
output  [3:0] axis_enc_data_out_TKEEP;
output  [0:0] axis_enc_data_out_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] axis_enc_data_in_V_data_V_0_data_out;
wire    axis_enc_data_in_V_data_V_0_vld_in;
wire    axis_enc_data_in_V_data_V_0_vld_out;
wire    axis_enc_data_in_V_data_V_0_ack_in;
reg    axis_enc_data_in_V_data_V_0_ack_out;
reg   [31:0] axis_enc_data_in_V_data_V_0_payload_A;
reg   [31:0] axis_enc_data_in_V_data_V_0_payload_B;
reg    axis_enc_data_in_V_data_V_0_sel_rd;
reg    axis_enc_data_in_V_data_V_0_sel_wr;
wire    axis_enc_data_in_V_data_V_0_sel;
wire    axis_enc_data_in_V_data_V_0_load_A;
wire    axis_enc_data_in_V_data_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_data_V_0_state;
wire    axis_enc_data_in_V_data_V_0_state_cmp_full;
reg   [0:0] axis_enc_data_in_V_last_V_0_data_out;
wire    axis_enc_data_in_V_last_V_0_vld_in;
wire    axis_enc_data_in_V_last_V_0_vld_out;
wire    axis_enc_data_in_V_last_V_0_ack_in;
reg    axis_enc_data_in_V_last_V_0_ack_out;
reg   [0:0] axis_enc_data_in_V_last_V_0_payload_A;
reg   [0:0] axis_enc_data_in_V_last_V_0_payload_B;
reg    axis_enc_data_in_V_last_V_0_sel_rd;
reg    axis_enc_data_in_V_last_V_0_sel_wr;
wire    axis_enc_data_in_V_last_V_0_sel;
wire    axis_enc_data_in_V_last_V_0_load_A;
wire    axis_enc_data_in_V_last_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_last_V_0_state;
wire    axis_enc_data_in_V_last_V_0_state_cmp_full;
reg   [31:0] axis_enc_data_out_V_data_V_1_data_out;
reg    axis_enc_data_out_V_data_V_1_vld_in;
wire    axis_enc_data_out_V_data_V_1_vld_out;
wire    axis_enc_data_out_V_data_V_1_ack_in;
wire    axis_enc_data_out_V_data_V_1_ack_out;
reg   [31:0] axis_enc_data_out_V_data_V_1_payload_A;
reg   [31:0] axis_enc_data_out_V_data_V_1_payload_B;
reg    axis_enc_data_out_V_data_V_1_sel_rd;
reg    axis_enc_data_out_V_data_V_1_sel_wr;
wire    axis_enc_data_out_V_data_V_1_sel;
wire    axis_enc_data_out_V_data_V_1_load_A;
wire    axis_enc_data_out_V_data_V_1_load_B;
reg   [1:0] axis_enc_data_out_V_data_V_1_state;
wire    axis_enc_data_out_V_data_V_1_state_cmp_full;
wire   [3:0] axis_enc_data_out_V_keep_V_1_data_out;
reg    axis_enc_data_out_V_keep_V_1_vld_in;
wire    axis_enc_data_out_V_keep_V_1_vld_out;
wire    axis_enc_data_out_V_keep_V_1_ack_in;
wire    axis_enc_data_out_V_keep_V_1_ack_out;
reg    axis_enc_data_out_V_keep_V_1_sel_rd;
wire    axis_enc_data_out_V_keep_V_1_sel;
reg   [1:0] axis_enc_data_out_V_keep_V_1_state;
reg   [0:0] axis_enc_data_out_V_last_V_1_data_out;
reg    axis_enc_data_out_V_last_V_1_vld_in;
wire    axis_enc_data_out_V_last_V_1_vld_out;
wire    axis_enc_data_out_V_last_V_1_ack_in;
wire    axis_enc_data_out_V_last_V_1_ack_out;
reg   [0:0] axis_enc_data_out_V_last_V_1_payload_A;
reg   [0:0] axis_enc_data_out_V_last_V_1_payload_B;
reg    axis_enc_data_out_V_last_V_1_sel_rd;
reg    axis_enc_data_out_V_last_V_1_sel_wr;
wire    axis_enc_data_out_V_last_V_1_sel;
wire    axis_enc_data_out_V_last_V_1_load_A;
wire    axis_enc_data_out_V_last_V_1_load_B;
reg   [1:0] axis_enc_data_out_V_last_V_1_state;
wire    axis_enc_data_out_V_last_V_1_state_cmp_full;
reg    axis_enc_data_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [96:0] ap_CS_fsm;
wire    ap_CS_fsm_state3;
reg    axis_enc_data_out_TDATA_blk_n;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
reg   [0:0] tmp_132_reg_520;
wire   [2:0] i_1_fu_174_p2;
reg   [2:0] i_1_reg_493;
wire    ap_CS_fsm_state2;
wire   [1:0] tmp_fu_180_p1;
reg   [1:0] tmp_reg_498;
wire   [0:0] exitcond_fu_168_p2;
wire   [0:0] sel_SEBB_fu_197_p3;
wire   [127:0] enc_data_in_V_fu_344_p2;
wire   [63:0] grp_encoder_fu_162_ap_return;
reg   [63:0] enc_data_out_V_reg_514;
wire    ap_CS_fsm_state94;
wire   [0:0] tmp_132_fu_350_p3;
wire    ap_CS_fsm_state95;
wire   [1:0] i_2_fu_358_p2;
reg   [1:0] i_2_reg_524;
wire   [5:0] tmp_69_fu_368_p3;
reg   [5:0] tmp_69_reg_529;
wire   [5:0] tmp_70_fu_376_p2;
reg   [5:0] tmp_70_reg_534;
wire   [0:0] tmp_134_fu_382_p2;
reg   [0:0] tmp_134_reg_539;
wire   [0:0] tmp_last_V_fu_394_p2;
reg   [0:0] tmp_last_V_reg_546;
wire   [31:0] axis_enc_data_out_it_fu_485_p1;
wire    grp_encoder_fu_162_ap_start;
wire    grp_encoder_fu_162_ap_done;
wire    grp_encoder_fu_162_ap_idle;
wire    grp_encoder_fu_162_ap_ready;
reg   [0:0] axis_enc_data_in_ite_reg_116;
reg   [127:0] enc_data_in_V_s_reg_128;
reg   [2:0] i_reg_140;
wire    ap_CS_fsm_state1;
reg   [1:0] i3_reg_151;
reg    ap_block_state97;
reg    ap_block_state97_io;
reg    grp_encoder_fu_162_ap_start_reg;
reg   [96:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_CS_fsm_state4;
wire   [0:0] switch_fu_192_p2;
wire   [6:0] tmp_67_fu_205_p3;
wire   [6:0] tmp_68_fu_212_p2;
wire   [7:0] tmp_112_fu_224_p1;
wire   [0:0] tmp_111_fu_218_p2;
wire   [7:0] tmp_113_fu_228_p1;
wire   [7:0] tmp_115_fu_236_p2;
wire   [7:0] tmp_116_fu_242_p3;
wire   [7:0] tmp_118_fu_258_p3;
wire   [7:0] tmp_117_fu_250_p3;
wire   [7:0] tmp_119_fu_266_p2;
wire   [127:0] tmp_114_fu_232_p1;
wire   [127:0] tmp_120_fu_272_p1;
wire   [127:0] tmp_123_fu_284_p2;
reg   [127:0] tmp_124_fu_290_p4;
wire   [127:0] tmp_121_fu_276_p1;
wire   [127:0] tmp_122_fu_280_p1;
wire   [127:0] tmp_126_fu_308_p2;
wire   [127:0] tmp_127_fu_314_p2;
wire   [127:0] p_demorgan_fu_320_p2;
wire   [127:0] tmp_128_fu_326_p2;
wire   [127:0] tmp_125_fu_300_p3;
wire   [127:0] tmp_129_fu_332_p2;
wire   [127:0] tmp_130_fu_338_p2;
wire   [0:0] tmp_133_fu_364_p1;
wire   [0:0] tmp_37_fu_388_p2;
wire   [6:0] tmp_135_fu_400_p1;
wire   [6:0] tmp_136_fu_403_p1;
wire   [6:0] tmp_138_fu_415_p2;
wire   [6:0] tmp_140_fu_427_p2;
reg   [63:0] tmp_137_fu_406_p4;
wire   [6:0] tmp_139_fu_421_p2;
wire   [6:0] tmp_141_fu_433_p3;
wire   [6:0] tmp_143_fu_446_p3;
wire   [6:0] tmp_144_fu_453_p2;
wire   [63:0] tmp_142_fu_440_p3;
wire   [63:0] tmp_145_fu_459_p1;
wire   [63:0] tmp_146_fu_463_p1;
wire   [63:0] tmp_147_fu_467_p2;
wire   [63:0] tmp_148_fu_473_p2;
wire   [63:0] tmp_149_fu_479_p2;

// power-on initialization
initial begin
#0 axis_enc_data_in_V_data_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_data_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_data_V_0_state = 2'd0;
#0 axis_enc_data_in_V_last_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_last_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_last_V_0_state = 2'd0;
#0 axis_enc_data_out_V_data_V_1_sel_rd = 1'b0;
#0 axis_enc_data_out_V_data_V_1_sel_wr = 1'b0;
#0 axis_enc_data_out_V_data_V_1_state = 2'd0;
#0 axis_enc_data_out_V_keep_V_1_sel_rd = 1'b0;
#0 axis_enc_data_out_V_keep_V_1_state = 2'd0;
#0 axis_enc_data_out_V_last_V_1_sel_rd = 1'b0;
#0 axis_enc_data_out_V_last_V_1_sel_wr = 1'b0;
#0 axis_enc_data_out_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 97'd1;
#0 grp_encoder_fu_162_ap_start_reg = 1'b0;
end

encoder grp_encoder_fu_162(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_encoder_fu_162_ap_start),
    .ap_done(grp_encoder_fu_162_ap_done),
    .ap_idle(grp_encoder_fu_162_ap_idle),
    .ap_ready(grp_encoder_fu_162_ap_ready),
    .data_V_read(enc_data_in_V_s_reg_128),
    .ap_return(grp_encoder_fu_162_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_data_V_0_sel_rd <= ~axis_enc_data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_data_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_data_V_0_sel_wr <= ~axis_enc_data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_state == 2'd2)) | ((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_state == 2'd1)) | ((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_data_V_0_state == 2'd3)) | ((axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd1)) | ((axis_enc_data_in_V_data_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_last_V_0_sel_rd <= ~axis_enc_data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_last_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_last_V_0_sel_wr <= ~axis_enc_data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_state == 2'd2)) | ((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_state == 2'd1)) | ((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_last_V_0_state == 2'd3)) | ((axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd1)) | ((axis_enc_data_in_V_last_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_out_V_data_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_data_V_1_vld_out == 1'b1))) begin
            axis_enc_data_out_V_data_V_1_sel_rd <= ~axis_enc_data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_out_V_data_V_1_ack_in == 1'b1) & (axis_enc_data_out_V_data_V_1_vld_in == 1'b1))) begin
            axis_enc_data_out_V_data_V_1_sel_wr <= ~axis_enc_data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_out_V_data_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_data_V_1_state == 2'd2)) | ((axis_enc_data_out_V_data_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_data_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_data_V_1_state == 2'd3)))) begin
            axis_enc_data_out_V_data_V_1_state <= 2'd2;
        end else if ((((axis_enc_data_out_V_data_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_data_V_1_state == 2'd1)) | ((axis_enc_data_out_V_data_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_data_V_1_vld_in == 1'b1) & (axis_enc_data_out_V_data_V_1_state == 2'd3)))) begin
            axis_enc_data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((axis_enc_data_out_V_data_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_data_V_1_ack_out == 1'b1)) & ~((axis_enc_data_out_V_data_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_data_V_1_vld_in == 1'b1)) & (axis_enc_data_out_V_data_V_1_state == 2'd3)) | ((axis_enc_data_out_V_data_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_data_V_1_state == 2'd1)) | ((axis_enc_data_out_V_data_V_1_vld_in == 1'b1) & (axis_enc_data_out_V_data_V_1_state == 2'd2)))) begin
            axis_enc_data_out_V_data_V_1_state <= 2'd3;
        end else begin
            axis_enc_data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_keep_V_1_vld_out == 1'b1))) begin
            axis_enc_data_out_V_keep_V_1_sel_rd <= ~axis_enc_data_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_keep_V_1_state == 2'd2)) | ((axis_enc_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_keep_V_1_state == 2'd3)))) begin
            axis_enc_data_out_V_keep_V_1_state <= 2'd2;
        end else if ((((axis_enc_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_keep_V_1_state == 2'd1)) | ((axis_enc_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_keep_V_1_vld_in == 1'b1) & (axis_enc_data_out_V_keep_V_1_state == 2'd3)))) begin
            axis_enc_data_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((axis_enc_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_keep_V_1_ack_out == 1'b1)) & ~((axis_enc_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_keep_V_1_vld_in == 1'b1)) & (axis_enc_data_out_V_keep_V_1_state == 2'd3)) | ((axis_enc_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_keep_V_1_state == 2'd1)) | ((axis_enc_data_out_V_keep_V_1_vld_in == 1'b1) & (axis_enc_data_out_V_keep_V_1_state == 2'd2)))) begin
            axis_enc_data_out_V_keep_V_1_state <= 2'd3;
        end else begin
            axis_enc_data_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_out_V_last_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_last_V_1_vld_out == 1'b1))) begin
            axis_enc_data_out_V_last_V_1_sel_rd <= ~axis_enc_data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_out_V_last_V_1_ack_in == 1'b1) & (axis_enc_data_out_V_last_V_1_vld_in == 1'b1))) begin
            axis_enc_data_out_V_last_V_1_sel_wr <= ~axis_enc_data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_out_V_last_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_last_V_1_state == 2'd2)) | ((axis_enc_data_out_V_last_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_last_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_last_V_1_state == 2'd3)))) begin
            axis_enc_data_out_V_last_V_1_state <= 2'd2;
        end else if ((((axis_enc_data_out_V_last_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_last_V_1_state == 2'd1)) | ((axis_enc_data_out_V_last_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_last_V_1_vld_in == 1'b1) & (axis_enc_data_out_V_last_V_1_state == 2'd3)))) begin
            axis_enc_data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((axis_enc_data_out_V_last_V_1_vld_in == 1'b0) & (axis_enc_data_out_V_last_V_1_ack_out == 1'b1)) & ~((axis_enc_data_out_V_last_V_1_ack_out == 1'b0) & (axis_enc_data_out_V_last_V_1_vld_in == 1'b1)) & (axis_enc_data_out_V_last_V_1_state == 2'd3)) | ((axis_enc_data_out_V_last_V_1_ack_out == 1'b1) & (axis_enc_data_out_V_last_V_1_state == 2'd1)) | ((axis_enc_data_out_V_last_V_1_vld_in == 1'b1) & (axis_enc_data_out_V_last_V_1_state == 2'd2)))) begin
            axis_enc_data_out_V_last_V_1_state <= 2'd3;
        end else begin
            axis_enc_data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_encoder_fu_162_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state4) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_encoder_fu_162_ap_start_reg <= 1'b1;
        end else if ((grp_encoder_fu_162_ap_ready == 1'b1)) begin
            grp_encoder_fu_162_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((axis_enc_data_out_V_last_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state97_io)) & (1'b1 == ap_CS_fsm_state97) & (tmp_last_V_reg_546 == 1'd0) & (tmp_132_reg_520 == 1'd0))) begin
        i3_reg_151 <= i_2_reg_524;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        i3_reg_151 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        i_reg_140 <= i_1_reg_493;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        i_reg_140 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_data_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_data_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_last_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_last_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_ite_reg_116 <= sel_SEBB_fu_197_p3;
        enc_data_in_V_s_reg_128 <= enc_data_in_V_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_out_V_data_V_1_load_A == 1'b1)) begin
        axis_enc_data_out_V_data_V_1_payload_A <= axis_enc_data_out_it_fu_485_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_out_V_data_V_1_load_B == 1'b1)) begin
        axis_enc_data_out_V_data_V_1_payload_B <= axis_enc_data_out_it_fu_485_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_out_V_last_V_1_load_A == 1'b1)) begin
        axis_enc_data_out_V_last_V_1_payload_A <= tmp_last_V_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_out_V_last_V_1_load_B == 1'b1)) begin
        axis_enc_data_out_V_last_V_1_payload_B <= tmp_last_V_reg_546;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        enc_data_out_V_reg_514 <= grp_encoder_fu_162_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_493 <= i_1_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state95)) begin
        i_2_reg_524 <= i_2_fu_358_p2;
        tmp_132_reg_520 <= i3_reg_151[32'd1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state95) & (tmp_132_fu_350_p3 == 1'd0))) begin
        tmp_134_reg_539 <= tmp_134_fu_382_p2;
        tmp_69_reg_529[5] <= tmp_69_fu_368_p3[5];
        tmp_70_reg_534[5] <= tmp_70_fu_376_p2[5];
        tmp_last_V_reg_546 <= tmp_last_V_fu_394_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_168_p2 == 1'd0))) begin
        tmp_reg_498 <= tmp_fu_180_p1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axis_enc_data_in_TDATA_blk_n = axis_enc_data_in_V_data_V_0_state[1'd0];
    end else begin
        axis_enc_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_data_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_data_out = axis_enc_data_in_V_data_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_data_V_0_data_out = axis_enc_data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_last_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_data_out = axis_enc_data_in_V_last_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_last_V_0_data_out = axis_enc_data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state96) | ((1'b1 == ap_CS_fsm_state97) & (tmp_132_reg_520 == 1'd0)))) begin
        axis_enc_data_out_TDATA_blk_n = axis_enc_data_out_V_data_V_1_state[1'd1];
    end else begin
        axis_enc_data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((axis_enc_data_out_V_data_V_1_sel == 1'b1)) begin
        axis_enc_data_out_V_data_V_1_data_out = axis_enc_data_out_V_data_V_1_payload_B;
    end else begin
        axis_enc_data_out_V_data_V_1_data_out = axis_enc_data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_enc_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
        axis_enc_data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        axis_enc_data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((axis_enc_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
        axis_enc_data_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        axis_enc_data_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_out_V_last_V_1_sel == 1'b1)) begin
        axis_enc_data_out_V_last_V_1_data_out = axis_enc_data_out_V_last_V_1_payload_B;
    end else begin
        axis_enc_data_out_V_last_V_1_data_out = axis_enc_data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_enc_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
        axis_enc_data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        axis_enc_data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_168_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            if (((1'b1 == ap_CS_fsm_state95) & (tmp_132_fu_350_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state96 : begin
            if (((axis_enc_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state96))) begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end
        end
        ap_ST_fsm_state97 : begin
            if ((~((axis_enc_data_out_V_last_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state97_io)) & (1'b1 == ap_CS_fsm_state97) & ((tmp_last_V_reg_546 == 1'd1) | (tmp_132_reg_520 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((axis_enc_data_out_V_last_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state97_io)) & (1'b1 == ap_CS_fsm_state97) & (tmp_last_V_reg_546 == 1'd0) & (tmp_132_reg_520 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state97;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

always @ (*) begin
    ap_block_state97 = ((axis_enc_data_out_V_last_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_enc_data_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state97_io = ((axis_enc_data_out_V_data_V_1_ack_in == 1'b0) & (tmp_132_reg_520 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axis_enc_data_in_TREADY = axis_enc_data_in_V_last_V_0_state[1'd1];

assign axis_enc_data_in_V_data_V_0_ack_in = axis_enc_data_in_V_data_V_0_state[1'd1];

assign axis_enc_data_in_V_data_V_0_load_A = (~axis_enc_data_in_V_data_V_0_sel_wr & axis_enc_data_in_V_data_V_0_state_cmp_full);

assign axis_enc_data_in_V_data_V_0_load_B = (axis_enc_data_in_V_data_V_0_state_cmp_full & axis_enc_data_in_V_data_V_0_sel_wr);

assign axis_enc_data_in_V_data_V_0_sel = axis_enc_data_in_V_data_V_0_sel_rd;

assign axis_enc_data_in_V_data_V_0_state_cmp_full = ((axis_enc_data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_data_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_data_V_0_vld_out = axis_enc_data_in_V_data_V_0_state[1'd0];

assign axis_enc_data_in_V_last_V_0_ack_in = axis_enc_data_in_V_last_V_0_state[1'd1];

assign axis_enc_data_in_V_last_V_0_load_A = (~axis_enc_data_in_V_last_V_0_sel_wr & axis_enc_data_in_V_last_V_0_state_cmp_full);

assign axis_enc_data_in_V_last_V_0_load_B = (axis_enc_data_in_V_last_V_0_state_cmp_full & axis_enc_data_in_V_last_V_0_sel_wr);

assign axis_enc_data_in_V_last_V_0_sel = axis_enc_data_in_V_last_V_0_sel_rd;

assign axis_enc_data_in_V_last_V_0_state_cmp_full = ((axis_enc_data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_last_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_last_V_0_vld_out = axis_enc_data_in_V_last_V_0_state[1'd0];

assign axis_enc_data_out_TDATA = axis_enc_data_out_V_data_V_1_data_out;

assign axis_enc_data_out_TKEEP = axis_enc_data_out_V_keep_V_1_data_out;

assign axis_enc_data_out_TLAST = axis_enc_data_out_V_last_V_1_data_out;

assign axis_enc_data_out_TVALID = axis_enc_data_out_V_last_V_1_state[1'd0];

assign axis_enc_data_out_V_data_V_1_ack_in = axis_enc_data_out_V_data_V_1_state[1'd1];

assign axis_enc_data_out_V_data_V_1_ack_out = axis_enc_data_out_TREADY;

assign axis_enc_data_out_V_data_V_1_load_A = (~axis_enc_data_out_V_data_V_1_sel_wr & axis_enc_data_out_V_data_V_1_state_cmp_full);

assign axis_enc_data_out_V_data_V_1_load_B = (axis_enc_data_out_V_data_V_1_state_cmp_full & axis_enc_data_out_V_data_V_1_sel_wr);

assign axis_enc_data_out_V_data_V_1_sel = axis_enc_data_out_V_data_V_1_sel_rd;

assign axis_enc_data_out_V_data_V_1_state_cmp_full = ((axis_enc_data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_out_V_data_V_1_vld_out = axis_enc_data_out_V_data_V_1_state[1'd0];

assign axis_enc_data_out_V_keep_V_1_ack_in = axis_enc_data_out_V_keep_V_1_state[1'd1];

assign axis_enc_data_out_V_keep_V_1_ack_out = axis_enc_data_out_TREADY;

assign axis_enc_data_out_V_keep_V_1_data_out = 4'd0;

assign axis_enc_data_out_V_keep_V_1_sel = axis_enc_data_out_V_keep_V_1_sel_rd;

assign axis_enc_data_out_V_keep_V_1_vld_out = axis_enc_data_out_V_keep_V_1_state[1'd0];

assign axis_enc_data_out_V_last_V_1_ack_in = axis_enc_data_out_V_last_V_1_state[1'd1];

assign axis_enc_data_out_V_last_V_1_ack_out = axis_enc_data_out_TREADY;

assign axis_enc_data_out_V_last_V_1_load_A = (~axis_enc_data_out_V_last_V_1_sel_wr & axis_enc_data_out_V_last_V_1_state_cmp_full);

assign axis_enc_data_out_V_last_V_1_load_B = (axis_enc_data_out_V_last_V_1_state_cmp_full & axis_enc_data_out_V_last_V_1_sel_wr);

assign axis_enc_data_out_V_last_V_1_sel = axis_enc_data_out_V_last_V_1_sel_rd;

assign axis_enc_data_out_V_last_V_1_state_cmp_full = ((axis_enc_data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_out_V_last_V_1_vld_out = axis_enc_data_out_V_last_V_1_state[1'd0];

assign axis_enc_data_out_it_fu_485_p1 = tmp_149_fu_479_p2[31:0];

assign enc_data_in_V_fu_344_p2 = (tmp_130_fu_338_p2 | tmp_129_fu_332_p2);

assign exitcond_fu_168_p2 = ((i_reg_140 == 3'd4) ? 1'b1 : 1'b0);

assign grp_encoder_fu_162_ap_start = grp_encoder_fu_162_ap_start_reg;

assign i_1_fu_174_p2 = (i_reg_140 + 3'd1);

assign i_2_fu_358_p2 = (i3_reg_151 + 2'd1);

assign p_demorgan_fu_320_p2 = (tmp_127_fu_314_p2 & tmp_126_fu_308_p2);

assign sel_SEBB_fu_197_p3 = ((switch_fu_192_p2[0:0] === 1'b1) ? axis_enc_data_in_V_last_V_0_data_out : axis_enc_data_in_ite_reg_116);

assign switch_fu_192_p2 = ((tmp_reg_498 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_111_fu_218_p2 = ((tmp_67_fu_205_p3 > tmp_68_fu_212_p2) ? 1'b1 : 1'b0);

assign tmp_112_fu_224_p1 = tmp_67_fu_205_p3;

assign tmp_113_fu_228_p1 = tmp_68_fu_212_p2;

assign tmp_114_fu_232_p1 = axis_enc_data_in_V_data_V_0_data_out;

assign tmp_115_fu_236_p2 = (tmp_112_fu_224_p1 ^ 8'd127);

assign tmp_116_fu_242_p3 = ((tmp_111_fu_218_p2[0:0] === 1'b1) ? tmp_112_fu_224_p1 : tmp_113_fu_228_p1);

assign tmp_117_fu_250_p3 = ((tmp_111_fu_218_p2[0:0] === 1'b1) ? tmp_113_fu_228_p1 : tmp_112_fu_224_p1);

assign tmp_118_fu_258_p3 = ((tmp_111_fu_218_p2[0:0] === 1'b1) ? tmp_115_fu_236_p2 : tmp_112_fu_224_p1);

assign tmp_119_fu_266_p2 = (tmp_116_fu_242_p3 ^ 8'd127);

assign tmp_120_fu_272_p1 = tmp_118_fu_258_p3;

assign tmp_121_fu_276_p1 = tmp_117_fu_250_p3;

assign tmp_122_fu_280_p1 = tmp_119_fu_266_p2;

assign tmp_123_fu_284_p2 = tmp_114_fu_232_p1 << tmp_120_fu_272_p1;

integer ap_tvar_int_0;

always @ (tmp_123_fu_284_p2) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_124_fu_290_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_124_fu_290_p4[ap_tvar_int_0] = tmp_123_fu_284_p2[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_125_fu_300_p3 = ((tmp_111_fu_218_p2[0:0] === 1'b1) ? tmp_124_fu_290_p4 : tmp_123_fu_284_p2);

assign tmp_126_fu_308_p2 = 128'd340282366920938463463374607431768211455 << tmp_121_fu_276_p1;

assign tmp_127_fu_314_p2 = 128'd340282366920938463463374607431768211455 >> tmp_122_fu_280_p1;

assign tmp_128_fu_326_p2 = (p_demorgan_fu_320_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_129_fu_332_p2 = (tmp_128_fu_326_p2 & enc_data_in_V_s_reg_128);

assign tmp_130_fu_338_p2 = (tmp_125_fu_300_p3 & p_demorgan_fu_320_p2);

assign tmp_132_fu_350_p3 = i3_reg_151[32'd1];

assign tmp_133_fu_364_p1 = i3_reg_151[0:0];

assign tmp_134_fu_382_p2 = ((tmp_69_fu_368_p3 > tmp_70_fu_376_p2) ? 1'b1 : 1'b0);

assign tmp_135_fu_400_p1 = tmp_69_reg_529;

assign tmp_136_fu_403_p1 = tmp_70_reg_534;

integer ap_tvar_int_1;

always @ (enc_data_out_V_reg_514) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_137_fu_406_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_137_fu_406_p4[ap_tvar_int_1] = enc_data_out_V_reg_514[63 - ap_tvar_int_1];
        end
    end
end

assign tmp_138_fu_415_p2 = (tmp_135_fu_400_p1 - tmp_136_fu_403_p1);

assign tmp_139_fu_421_p2 = (tmp_135_fu_400_p1 ^ 7'd63);

assign tmp_140_fu_427_p2 = (tmp_136_fu_403_p1 - tmp_135_fu_400_p1);

assign tmp_141_fu_433_p3 = ((tmp_134_reg_539[0:0] === 1'b1) ? tmp_138_fu_415_p2 : tmp_140_fu_427_p2);

assign tmp_142_fu_440_p3 = ((tmp_134_reg_539[0:0] === 1'b1) ? tmp_137_fu_406_p4 : enc_data_out_V_reg_514);

assign tmp_143_fu_446_p3 = ((tmp_134_reg_539[0:0] === 1'b1) ? tmp_139_fu_421_p2 : tmp_135_fu_400_p1);

assign tmp_144_fu_453_p2 = (7'd63 - tmp_141_fu_433_p3);

assign tmp_145_fu_459_p1 = tmp_143_fu_446_p3;

assign tmp_146_fu_463_p1 = tmp_144_fu_453_p2;

assign tmp_147_fu_467_p2 = tmp_142_fu_440_p3 >> tmp_145_fu_459_p1;

assign tmp_148_fu_473_p2 = 64'd18446744073709551615 >> tmp_146_fu_463_p1;

assign tmp_149_fu_479_p2 = (tmp_148_fu_473_p2 & tmp_147_fu_467_p2);

assign tmp_37_fu_388_p2 = ((i3_reg_151 == 2'd1) ? 1'b1 : 1'b0);

assign tmp_67_fu_205_p3 = {{tmp_reg_498}, {5'd0}};

assign tmp_68_fu_212_p2 = (tmp_67_fu_205_p3 | 7'd31);

assign tmp_69_fu_368_p3 = {{tmp_133_fu_364_p1}, {5'd0}};

assign tmp_70_fu_376_p2 = (tmp_69_fu_368_p3 | 6'd31);

assign tmp_fu_180_p1 = i_reg_140[1:0];

assign tmp_last_V_fu_394_p2 = (tmp_37_fu_388_p2 & axis_enc_data_in_ite_reg_116);

always @ (posedge ap_clk) begin
    tmp_69_reg_529[4:0] <= 5'b00000;
    tmp_70_reg_534[4:0] <= 5'b11111;
end

endmodule //encoder_top
