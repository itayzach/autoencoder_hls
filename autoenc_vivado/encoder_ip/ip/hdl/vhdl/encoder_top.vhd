-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis_enc_data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_in_TVALID : IN STD_LOGIC;
    axis_enc_data_in_TREADY : OUT STD_LOGIC;
    axis_enc_data_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axis_enc_data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_enc_data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_out_TVALID : OUT STD_LOGIC;
    axis_enc_data_out_TREADY : IN STD_LOGIC;
    axis_enc_data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axis_enc_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of encoder_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_top,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=106,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=84,HLS_SYN_FF=17487,HLS_SYN_LUT=21778,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (96 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (96 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (96 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (96 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (96 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (96 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (96 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (96 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (96 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (96 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (96 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_out_V_data_V_1_sel : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal axis_enc_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_enc_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_enc_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_enc_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_enc_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal axis_enc_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_enc_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_enc_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_enc_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_enc_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_out_V_last_V_1_sel : STD_LOGIC;
    signal axis_enc_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal axis_enc_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal axis_enc_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (96 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axis_enc_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal tmp_132_reg_520 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_174_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_493 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_180_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_498 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_SEBB_fu_197_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_in_V_fu_344_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_encoder_fu_162_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_data_out_V_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal tmp_132_fu_350_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal i_2_fu_358_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_524 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_69_fu_368_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_69_reg_529 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_70_fu_376_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_70_reg_534 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_134_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_134_reg_539 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_reg_546 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_out_it_fu_485_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoder_fu_162_ap_start : STD_LOGIC;
    signal grp_encoder_fu_162_ap_done : STD_LOGIC;
    signal grp_encoder_fu_162_ap_idle : STD_LOGIC;
    signal grp_encoder_fu_162_ap_ready : STD_LOGIC;
    signal axis_enc_data_in_ite_reg_116 : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_in_V_s_reg_128 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_140 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i3_reg_151 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state97 : BOOLEAN;
    signal ap_block_state97_io : BOOLEAN;
    signal grp_encoder_fu_162_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (96 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal switch_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_67_fu_205_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_68_fu_212_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_112_fu_224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_111_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_113_fu_228_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_115_fu_236_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_242_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_118_fu_258_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_117_fu_250_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_fu_266_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_114_fu_232_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_120_fu_272_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_123_fu_284_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_124_fu_290_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_121_fu_276_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_122_fu_280_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_126_fu_308_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_127_fu_314_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_320_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_128_fu_326_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_125_fu_300_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_129_fu_332_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_130_fu_338_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_133_fu_364_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_135_fu_400_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_136_fu_403_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_138_fu_415_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_140_fu_427_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_137_fu_406_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_139_fu_421_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_141_fu_433_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_143_fu_446_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_144_fu_453_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_142_fu_440_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_145_fu_459_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_146_fu_463_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_147_fu_467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_148_fu_473_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_149_fu_479_p2 : STD_LOGIC_VECTOR (63 downto 0);

    component encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    grp_encoder_fu_162 : component encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoder_fu_162_ap_start,
        ap_done => grp_encoder_fu_162_ap_done,
        ap_idle => grp_encoder_fu_162_ap_idle,
        ap_ready => grp_encoder_fu_162_ap_ready,
        data_V_read => enc_data_in_V_s_reg_128,
        ap_return => grp_encoder_fu_162_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_rd <= not(axis_enc_data_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_wr <= not(axis_enc_data_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_rd <= not(axis_enc_data_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_wr <= not(axis_enc_data_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_out_V_data_V_1_sel_rd <= not(axis_enc_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (axis_enc_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_out_V_data_V_1_sel_wr <= not(axis_enc_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_2)) or ((axis_enc_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_enc_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_enc_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_enc_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_enc_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((axis_enc_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_enc_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    axis_enc_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_out_V_keep_V_1_sel_rd <= not(axis_enc_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_keep_V_1_state = ap_const_lv2_2)) or ((axis_enc_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_enc_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_enc_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_enc_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_enc_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_enc_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_enc_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_enc_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_enc_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_enc_data_out_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    axis_enc_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_out_V_last_V_1_sel_rd <= not(axis_enc_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (axis_enc_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_out_V_last_V_1_sel_wr <= not(axis_enc_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_2)) or ((axis_enc_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_enc_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_enc_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_enc_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_enc_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_enc_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_enc_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((axis_enc_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_enc_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_2)))) then 
                    axis_enc_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_encoder_fu_162_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoder_fu_162_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_encoder_fu_162_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoder_fu_162_ap_ready = ap_const_logic_1)) then 
                    grp_encoder_fu_162_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i3_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_enc_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state97_io))) and (ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_last_V_reg_546 = ap_const_lv1_0) and (tmp_132_reg_520 = ap_const_lv1_0))) then 
                i3_reg_151 <= i_2_reg_524;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                i3_reg_151 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_140 <= i_1_reg_493;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_140 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                axis_enc_data_in_ite_reg_116 <= sel_SEBB_fu_197_p3;
                enc_data_in_V_s_reg_128 <= enc_data_in_V_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_enc_data_out_V_data_V_1_payload_A <= axis_enc_data_out_it_fu_485_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_enc_data_out_V_data_V_1_payload_B <= axis_enc_data_out_it_fu_485_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_enc_data_out_V_last_V_1_payload_A <= tmp_last_V_reg_546;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_enc_data_out_V_last_V_1_payload_B <= tmp_last_V_reg_546;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                enc_data_out_V_reg_514 <= grp_encoder_fu_162_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_493 <= i_1_fu_174_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                i_2_reg_524 <= i_2_fu_358_p2;
                tmp_132_reg_520 <= i3_reg_151(1 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state95) and (tmp_132_fu_350_p3 = ap_const_lv1_0))) then
                tmp_134_reg_539 <= tmp_134_fu_382_p2;
                    tmp_69_reg_529(5) <= tmp_69_fu_368_p3(5);
                    tmp_70_reg_534(5) <= tmp_70_fu_376_p2(5);
                tmp_last_V_reg_546 <= tmp_last_V_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_168_p2 = ap_const_lv1_0))) then
                tmp_reg_498 <= tmp_fu_180_p1;
            end if;
        end if;
    end process;
    tmp_69_reg_529(4 downto 0) <= "00000";
    tmp_70_reg_534(4 downto 0) <= "11111";

    ap_NS_fsm_assign_proc : process (axis_enc_data_in_V_data_V_0_vld_out, axis_enc_data_out_V_data_V_1_ack_in, axis_enc_data_out_V_keep_V_1_ack_in, axis_enc_data_out_V_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state96, ap_CS_fsm_state97, tmp_132_reg_520, ap_CS_fsm_state2, exitcond_fu_168_p2, tmp_132_fu_350_p3, ap_CS_fsm_state95, tmp_last_V_reg_546, ap_block_state97_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_168_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (tmp_132_fu_350_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                if (((axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                if ((not(((axis_enc_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state97_io))) and (ap_const_logic_1 = ap_CS_fsm_state97) and ((tmp_last_V_reg_546 = ap_const_lv1_1) or (tmp_132_reg_520 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((axis_enc_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state97_io))) and (ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_last_V_reg_546 = ap_const_lv1_0) and (tmp_132_reg_520 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_block_state97_assign_proc : process(axis_enc_data_out_V_data_V_1_ack_in, axis_enc_data_out_V_keep_V_1_ack_in, axis_enc_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state97 <= ((axis_enc_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state97_io_assign_proc : process(axis_enc_data_out_V_data_V_1_ack_in, tmp_132_reg_520)
    begin
                ap_block_state97_io <= ((axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_132_reg_520 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    axis_enc_data_in_TDATA_blk_n_assign_proc : process(axis_enc_data_in_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis_enc_data_in_TDATA_blk_n <= axis_enc_data_in_V_data_V_0_state(0);
        else 
            axis_enc_data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_enc_data_in_TREADY <= axis_enc_data_in_V_last_V_0_state(1);
    axis_enc_data_in_V_data_V_0_ack_in <= axis_enc_data_in_V_data_V_0_state(1);

    axis_enc_data_in_V_data_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_data_V_0_data_out_assign_proc : process(axis_enc_data_in_V_data_V_0_payload_A, axis_enc_data_in_V_data_V_0_payload_B, axis_enc_data_in_V_data_V_0_sel)
    begin
        if ((axis_enc_data_in_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_B;
        else 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_data_V_0_load_A <= (not(axis_enc_data_in_V_data_V_0_sel_wr) and axis_enc_data_in_V_data_V_0_state_cmp_full);
    axis_enc_data_in_V_data_V_0_load_B <= (axis_enc_data_in_V_data_V_0_state_cmp_full and axis_enc_data_in_V_data_V_0_sel_wr);
    axis_enc_data_in_V_data_V_0_sel <= axis_enc_data_in_V_data_V_0_sel_rd;
    axis_enc_data_in_V_data_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_data_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_data_V_0_vld_out <= axis_enc_data_in_V_data_V_0_state(0);
    axis_enc_data_in_V_last_V_0_ack_in <= axis_enc_data_in_V_last_V_0_state(1);

    axis_enc_data_in_V_last_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_last_V_0_data_out_assign_proc : process(axis_enc_data_in_V_last_V_0_payload_A, axis_enc_data_in_V_last_V_0_payload_B, axis_enc_data_in_V_last_V_0_sel)
    begin
        if ((axis_enc_data_in_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_B;
        else 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_last_V_0_load_A <= (not(axis_enc_data_in_V_last_V_0_sel_wr) and axis_enc_data_in_V_last_V_0_state_cmp_full);
    axis_enc_data_in_V_last_V_0_load_B <= (axis_enc_data_in_V_last_V_0_state_cmp_full and axis_enc_data_in_V_last_V_0_sel_wr);
    axis_enc_data_in_V_last_V_0_sel <= axis_enc_data_in_V_last_V_0_sel_rd;
    axis_enc_data_in_V_last_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_last_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_last_V_0_vld_out <= axis_enc_data_in_V_last_V_0_state(0);
    axis_enc_data_out_TDATA <= axis_enc_data_out_V_data_V_1_data_out;

    axis_enc_data_out_TDATA_blk_n_assign_proc : process(axis_enc_data_out_V_data_V_1_state, ap_CS_fsm_state96, ap_CS_fsm_state97, tmp_132_reg_520)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state96) or ((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_132_reg_520 = ap_const_lv1_0)))) then 
            axis_enc_data_out_TDATA_blk_n <= axis_enc_data_out_V_data_V_1_state(1);
        else 
            axis_enc_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_enc_data_out_TKEEP <= axis_enc_data_out_V_keep_V_1_data_out;
    axis_enc_data_out_TLAST <= axis_enc_data_out_V_last_V_1_data_out;
    axis_enc_data_out_TVALID <= axis_enc_data_out_V_last_V_1_state(0);
    axis_enc_data_out_V_data_V_1_ack_in <= axis_enc_data_out_V_data_V_1_state(1);
    axis_enc_data_out_V_data_V_1_ack_out <= axis_enc_data_out_TREADY;

    axis_enc_data_out_V_data_V_1_data_out_assign_proc : process(axis_enc_data_out_V_data_V_1_payload_A, axis_enc_data_out_V_data_V_1_payload_B, axis_enc_data_out_V_data_V_1_sel)
    begin
        if ((axis_enc_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_enc_data_out_V_data_V_1_data_out <= axis_enc_data_out_V_data_V_1_payload_B;
        else 
            axis_enc_data_out_V_data_V_1_data_out <= axis_enc_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_enc_data_out_V_data_V_1_load_A <= (not(axis_enc_data_out_V_data_V_1_sel_wr) and axis_enc_data_out_V_data_V_1_state_cmp_full);
    axis_enc_data_out_V_data_V_1_load_B <= (axis_enc_data_out_V_data_V_1_state_cmp_full and axis_enc_data_out_V_data_V_1_sel_wr);
    axis_enc_data_out_V_data_V_1_sel <= axis_enc_data_out_V_data_V_1_sel_rd;
    axis_enc_data_out_V_data_V_1_state_cmp_full <= '0' when (axis_enc_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_enc_data_out_V_data_V_1_vld_in_assign_proc : process(axis_enc_data_out_V_data_V_1_ack_in, ap_CS_fsm_state96)
    begin
        if (((axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            axis_enc_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_enc_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_enc_data_out_V_data_V_1_vld_out <= axis_enc_data_out_V_data_V_1_state(0);
    axis_enc_data_out_V_keep_V_1_ack_in <= axis_enc_data_out_V_keep_V_1_state(1);
    axis_enc_data_out_V_keep_V_1_ack_out <= axis_enc_data_out_TREADY;
    axis_enc_data_out_V_keep_V_1_data_out <= ap_const_lv4_0;
    axis_enc_data_out_V_keep_V_1_sel <= axis_enc_data_out_V_keep_V_1_sel_rd;

    axis_enc_data_out_V_keep_V_1_vld_in_assign_proc : process(axis_enc_data_out_V_data_V_1_ack_in, ap_CS_fsm_state96)
    begin
        if (((axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            axis_enc_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_enc_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_enc_data_out_V_keep_V_1_vld_out <= axis_enc_data_out_V_keep_V_1_state(0);
    axis_enc_data_out_V_last_V_1_ack_in <= axis_enc_data_out_V_last_V_1_state(1);
    axis_enc_data_out_V_last_V_1_ack_out <= axis_enc_data_out_TREADY;

    axis_enc_data_out_V_last_V_1_data_out_assign_proc : process(axis_enc_data_out_V_last_V_1_payload_A, axis_enc_data_out_V_last_V_1_payload_B, axis_enc_data_out_V_last_V_1_sel)
    begin
        if ((axis_enc_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_enc_data_out_V_last_V_1_data_out <= axis_enc_data_out_V_last_V_1_payload_B;
        else 
            axis_enc_data_out_V_last_V_1_data_out <= axis_enc_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_enc_data_out_V_last_V_1_load_A <= (not(axis_enc_data_out_V_last_V_1_sel_wr) and axis_enc_data_out_V_last_V_1_state_cmp_full);
    axis_enc_data_out_V_last_V_1_load_B <= (axis_enc_data_out_V_last_V_1_state_cmp_full and axis_enc_data_out_V_last_V_1_sel_wr);
    axis_enc_data_out_V_last_V_1_sel <= axis_enc_data_out_V_last_V_1_sel_rd;
    axis_enc_data_out_V_last_V_1_state_cmp_full <= '0' when (axis_enc_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_enc_data_out_V_last_V_1_vld_in_assign_proc : process(axis_enc_data_out_V_data_V_1_ack_in, ap_CS_fsm_state96)
    begin
        if (((axis_enc_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
            axis_enc_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_enc_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_enc_data_out_V_last_V_1_vld_out <= axis_enc_data_out_V_last_V_1_state(0);
    axis_enc_data_out_it_fu_485_p1 <= tmp_149_fu_479_p2(32 - 1 downto 0);
    enc_data_in_V_fu_344_p2 <= (tmp_130_fu_338_p2 or tmp_129_fu_332_p2);
    exitcond_fu_168_p2 <= "1" when (i_reg_140 = ap_const_lv3_4) else "0";
    grp_encoder_fu_162_ap_start <= grp_encoder_fu_162_ap_start_reg;
    i_1_fu_174_p2 <= std_logic_vector(unsigned(i_reg_140) + unsigned(ap_const_lv3_1));
    i_2_fu_358_p2 <= std_logic_vector(unsigned(i3_reg_151) + unsigned(ap_const_lv2_1));
    p_demorgan_fu_320_p2 <= (tmp_127_fu_314_p2 and tmp_126_fu_308_p2);
    sel_SEBB_fu_197_p3 <= 
        axis_enc_data_in_V_last_V_0_data_out when (switch_fu_192_p2(0) = '1') else 
        axis_enc_data_in_ite_reg_116;
    switch_fu_192_p2 <= "1" when (tmp_reg_498 = ap_const_lv2_3) else "0";
    tmp_111_fu_218_p2 <= "1" when (unsigned(tmp_67_fu_205_p3) > unsigned(tmp_68_fu_212_p2)) else "0";
    tmp_112_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_205_p3),8));
    tmp_113_fu_228_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_212_p2),8));
    tmp_114_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(axis_enc_data_in_V_data_V_0_data_out),128));
    tmp_115_fu_236_p2 <= (tmp_112_fu_224_p1 xor ap_const_lv8_7F);
    tmp_116_fu_242_p3 <= 
        tmp_112_fu_224_p1 when (tmp_111_fu_218_p2(0) = '1') else 
        tmp_113_fu_228_p1;
    tmp_117_fu_250_p3 <= 
        tmp_113_fu_228_p1 when (tmp_111_fu_218_p2(0) = '1') else 
        tmp_112_fu_224_p1;
    tmp_118_fu_258_p3 <= 
        tmp_115_fu_236_p2 when (tmp_111_fu_218_p2(0) = '1') else 
        tmp_112_fu_224_p1;
    tmp_119_fu_266_p2 <= (tmp_116_fu_242_p3 xor ap_const_lv8_7F);
    tmp_120_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_118_fu_258_p3),128));
    tmp_121_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_117_fu_250_p3),128));
    tmp_122_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_119_fu_266_p2),128));
    tmp_123_fu_284_p2 <= std_logic_vector(shift_left(unsigned(tmp_114_fu_232_p1),to_integer(unsigned('0' & tmp_120_fu_272_p1(31-1 downto 0)))));
    
    tmp_124_fu_290_p4_proc : process(tmp_123_fu_284_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_124_fu_290_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_123_fu_284_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_124_fu_290_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_124_fu_290_p4_i) := tmp_123_fu_284_p2(128-1-tmp_124_fu_290_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_124_fu_290_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_125_fu_300_p3 <= 
        tmp_124_fu_290_p4 when (tmp_111_fu_218_p2(0) = '1') else 
        tmp_123_fu_284_p2;
    tmp_126_fu_308_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_121_fu_276_p1(31-1 downto 0)))));
    tmp_127_fu_314_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_122_fu_280_p1(31-1 downto 0)))));
    tmp_128_fu_326_p2 <= (p_demorgan_fu_320_p2 xor ap_const_lv128_lc_2);
    tmp_129_fu_332_p2 <= (tmp_128_fu_326_p2 and enc_data_in_V_s_reg_128);
    tmp_130_fu_338_p2 <= (tmp_125_fu_300_p3 and p_demorgan_fu_320_p2);
    tmp_132_fu_350_p3 <= i3_reg_151(1 downto 1);
    tmp_133_fu_364_p1 <= i3_reg_151(1 - 1 downto 0);
    tmp_134_fu_382_p2 <= "1" when (unsigned(tmp_69_fu_368_p3) > unsigned(tmp_70_fu_376_p2)) else "0";
    tmp_135_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_69_reg_529),7));
    tmp_136_fu_403_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_70_reg_534),7));
    
    tmp_137_fu_406_p4_proc : process(enc_data_out_V_reg_514)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_137_fu_406_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := enc_data_out_V_reg_514;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_137_fu_406_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_137_fu_406_p4_i) := enc_data_out_V_reg_514(64-1-tmp_137_fu_406_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_137_fu_406_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_138_fu_415_p2 <= std_logic_vector(unsigned(tmp_135_fu_400_p1) - unsigned(tmp_136_fu_403_p1));
    tmp_139_fu_421_p2 <= (tmp_135_fu_400_p1 xor ap_const_lv7_3F);
    tmp_140_fu_427_p2 <= std_logic_vector(unsigned(tmp_136_fu_403_p1) - unsigned(tmp_135_fu_400_p1));
    tmp_141_fu_433_p3 <= 
        tmp_138_fu_415_p2 when (tmp_134_reg_539(0) = '1') else 
        tmp_140_fu_427_p2;
    tmp_142_fu_440_p3 <= 
        tmp_137_fu_406_p4 when (tmp_134_reg_539(0) = '1') else 
        enc_data_out_V_reg_514;
    tmp_143_fu_446_p3 <= 
        tmp_139_fu_421_p2 when (tmp_134_reg_539(0) = '1') else 
        tmp_135_fu_400_p1;
    tmp_144_fu_453_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_141_fu_433_p3));
    tmp_145_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_143_fu_446_p3),64));
    tmp_146_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_144_fu_453_p2),64));
    tmp_147_fu_467_p2 <= std_logic_vector(shift_right(unsigned(tmp_142_fu_440_p3),to_integer(unsigned('0' & tmp_145_fu_459_p1(31-1 downto 0)))));
    tmp_148_fu_473_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_146_fu_463_p1(31-1 downto 0)))));
    tmp_149_fu_479_p2 <= (tmp_148_fu_473_p2 and tmp_147_fu_467_p2);
    tmp_37_fu_388_p2 <= "1" when (i3_reg_151 = ap_const_lv2_1) else "0";
    tmp_67_fu_205_p3 <= (tmp_reg_498 & ap_const_lv5_0);
    tmp_68_fu_212_p2 <= (tmp_67_fu_205_p3 or ap_const_lv7_1F);
    tmp_69_fu_368_p3 <= (tmp_133_fu_364_p1 & ap_const_lv5_0);
    tmp_70_fu_376_p2 <= (tmp_69_fu_368_p3 or ap_const_lv6_1F);
    tmp_fu_180_p1 <= i_reg_140(2 - 1 downto 0);
    tmp_last_V_fu_394_p2 <= (tmp_37_fu_388_p2 and axis_enc_data_in_ite_reg_116);
end behav;
