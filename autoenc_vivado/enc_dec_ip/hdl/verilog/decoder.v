// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module decoder (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_ap_vld,
        data_V,
        ap_return,
        data_V_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   data_V_ap_vld;
input  [63:0] data_V;
output  [127:0] ap_return;
output   data_V_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] logits2_0_V_reg_303;
reg   [31:0] logits2_1_V_reg_308;
reg   [31:0] logits2_2_V_reg_313;
reg   [31:0] logits2_3_V_reg_318;
wire   [31:0] grp_softmax_fu_60_ap_return_0;
wire   [31:0] grp_softmax_fu_60_ap_return_1;
wire   [31:0] grp_softmax_fu_60_ap_return_2;
wire   [31:0] grp_softmax_fu_60_ap_return_3;
reg   [31:0] call_ret6_reg_323_3;
reg   [31:0] logits3_2_V_reg_328;
wire   [0:0] tmp_s_fu_154_p2;
reg   [0:0] tmp_s_reg_334;
reg   [0:0] tmp_s_reg_334_pp0_iter14_reg;
wire   [31:0] max_val_V_1_0_max_va_fu_160_p3;
reg   [31:0] max_val_V_1_0_max_va_reg_339;
wire   [0:0] tmp_273_1_fu_171_p2;
reg   [0:0] tmp_273_1_reg_345;
wire   [0:0] tmp_273_2_fu_181_p2;
reg   [0:0] tmp_273_2_reg_350;
reg    ap_block_pp0_stage0_subdone;
wire   [31:0] grp_compute_layer_0_0_0_1_fu_52_ap_return_0;
wire   [31:0] grp_compute_layer_0_0_0_1_fu_52_ap_return_1;
wire   [31:0] grp_compute_layer_0_0_0_1_fu_52_ap_return_2;
wire   [31:0] grp_compute_layer_0_0_0_1_fu_52_ap_return_3;
reg    grp_compute_layer_0_0_0_1_fu_52_ap_ce;
wire    grp_softmax_fu_60_ap_start;
wire    grp_softmax_fu_60_ap_done;
wire    grp_softmax_fu_60_ap_idle;
wire    grp_softmax_fu_60_ap_ready;
reg    grp_softmax_fu_60_ap_ce;
wire   [31:0] grp_compute_layer_0_0_0_2_fu_72_ap_return_0;
wire   [31:0] grp_compute_layer_0_0_0_2_fu_72_ap_return_1;
wire   [31:0] grp_compute_layer_0_0_0_2_fu_72_ap_return_2;
wire   [31:0] grp_compute_layer_0_0_0_2_fu_72_ap_return_3;
reg    grp_compute_layer_0_0_0_2_fu_72_ap_ce;
wire    call_ret4_relu_1_fu_78_ap_ready;
wire   [31:0] call_ret4_relu_1_fu_78_ap_return_0;
wire   [31:0] call_ret4_relu_1_fu_78_ap_return_1;
wire   [31:0] call_ret4_relu_1_fu_78_ap_return_2;
wire   [31:0] call_ret4_relu_1_fu_78_ap_return_3;
reg    grp_softmax_fu_60_ap_start_reg;
wire   [31:0] max_val_V_1_1_max_va_fu_175_p3;
wire   [0:0] tmp_fu_201_p2;
wire   [25:0] p_s_fu_194_p3;
wire   [25:0] p_cast_cast_fu_187_p3;
wire   [25:0] p_s_64_fu_205_p3;
wire   [0:0] tmp_102_fu_213_p2;
wire   [0:0] tmp_276_1_fu_227_p2;
wire   [0:0] tmp_276_2_fu_241_p2;
wire   [24:0] tmp_103_fu_255_p3;
wire   [31:0] tmp_121_cast_fu_247_p3;
wire   [31:0] tmp_120_cast_fu_233_p3;
wire   [31:0] tmp_119_cast_fu_219_p3;
wire   [120:0] tmp_265_fu_262_p5;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to14;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 grp_softmax_fu_60_ap_start_reg = 1'b0;
end

compute_layer_0_0_0_1 grp_compute_layer_0_0_0_1_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_0_V_read(call_ret4_relu_1_fu_78_ap_return_0),
    .data_1_V_read(call_ret4_relu_1_fu_78_ap_return_1),
    .data_2_V_read(call_ret4_relu_1_fu_78_ap_return_2),
    .data_3_V_read(call_ret4_relu_1_fu_78_ap_return_3),
    .ap_return_0(grp_compute_layer_0_0_0_1_fu_52_ap_return_0),
    .ap_return_1(grp_compute_layer_0_0_0_1_fu_52_ap_return_1),
    .ap_return_2(grp_compute_layer_0_0_0_1_fu_52_ap_return_2),
    .ap_return_3(grp_compute_layer_0_0_0_1_fu_52_ap_return_3),
    .ap_ce(grp_compute_layer_0_0_0_1_fu_52_ap_ce)
);

softmax grp_softmax_fu_60(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_softmax_fu_60_ap_start),
    .ap_done(grp_softmax_fu_60_ap_done),
    .ap_idle(grp_softmax_fu_60_ap_idle),
    .ap_ready(grp_softmax_fu_60_ap_ready),
    .ap_ce(grp_softmax_fu_60_ap_ce),
    .data_0_V_read(logits2_0_V_reg_303),
    .data_1_V_read(logits2_1_V_reg_308),
    .data_2_V_read(logits2_2_V_reg_313),
    .data_3_V_read(logits2_3_V_reg_318),
    .ap_return_0(grp_softmax_fu_60_ap_return_0),
    .ap_return_1(grp_softmax_fu_60_ap_return_1),
    .ap_return_2(grp_softmax_fu_60_ap_return_2),
    .ap_return_3(grp_softmax_fu_60_ap_return_3)
);

compute_layer_0_0_0_2 grp_compute_layer_0_0_0_2_fu_72(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_V_read(data_V),
    .ap_return_0(grp_compute_layer_0_0_0_2_fu_72_ap_return_0),
    .ap_return_1(grp_compute_layer_0_0_0_2_fu_72_ap_return_1),
    .ap_return_2(grp_compute_layer_0_0_0_2_fu_72_ap_return_2),
    .ap_return_3(grp_compute_layer_0_0_0_2_fu_72_ap_return_3),
    .ap_ce(grp_compute_layer_0_0_0_2_fu_72_ap_ce)
);

relu_1 call_ret4_relu_1_fu_78(
    .ap_ready(call_ret4_relu_1_fu_78_ap_ready),
    .data_0_V_read(grp_compute_layer_0_0_0_2_fu_72_ap_return_0),
    .data_1_V_read(grp_compute_layer_0_0_0_2_fu_72_ap_return_1),
    .data_2_V_read(grp_compute_layer_0_0_0_2_fu_72_ap_return_2),
    .data_3_V_read(grp_compute_layer_0_0_0_2_fu_72_ap_return_3),
    .ap_return_0(call_ret4_relu_1_fu_78_ap_return_0),
    .ap_return_1(call_ret4_relu_1_fu_78_ap_return_1),
    .ap_return_2(call_ret4_relu_1_fu_78_ap_return_2),
    .ap_return_3(call_ret4_relu_1_fu_78_ap_return_3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_softmax_fu_60_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
            grp_softmax_fu_60_ap_start_reg <= 1'b1;
        end else if ((grp_softmax_fu_60_ap_ready == 1'b1)) begin
            grp_softmax_fu_60_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        call_ret6_reg_323_3 <= grp_softmax_fu_60_ap_return_3;
        logits2_0_V_reg_303 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_0;
        logits2_1_V_reg_308 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_1;
        logits2_2_V_reg_313 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_2;
        logits2_3_V_reg_318 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_3;
        logits3_2_V_reg_328 <= grp_softmax_fu_60_ap_return_2;
        max_val_V_1_0_max_va_reg_339 <= max_val_V_1_0_max_va_fu_160_p3;
        tmp_273_1_reg_345 <= tmp_273_1_fu_171_p2;
        tmp_273_2_reg_350 <= tmp_273_2_fu_181_p2;
        tmp_s_reg_334 <= tmp_s_fu_154_p2;
        tmp_s_reg_334_pp0_iter14_reg <= tmp_s_reg_334;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter15 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to14 = 1'b1;
    end else begin
        ap_idle_pp0_0to14 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to14 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_blk_n = data_V_ap_vld;
    end else begin
        data_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_compute_layer_0_0_0_1_fu_52_ap_ce = 1'b1;
    end else begin
        grp_compute_layer_0_0_0_1_fu_52_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_compute_layer_0_0_0_2_fu_72_ap_ce = 1'b1;
    end else begin
        grp_compute_layer_0_0_0_2_fu_72_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_softmax_fu_60_ap_ce = 1'b1;
    end else begin
        grp_softmax_fu_60_ap_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((data_V_ap_vld == 1'b0) | (ap_start == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b1) & ((data_V_ap_vld == 1'b0) | (ap_start == 1'b0)));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((data_V_ap_vld == 1'b0) | (ap_start == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = tmp_265_fu_262_p5;

assign grp_softmax_fu_60_ap_start = grp_softmax_fu_60_ap_start_reg;

assign max_val_V_1_0_max_va_fu_160_p3 = ((tmp_s_fu_154_p2[0:0] === 1'b1) ? grp_softmax_fu_60_ap_return_1 : grp_softmax_fu_60_ap_return_0);

assign max_val_V_1_1_max_va_fu_175_p3 = ((tmp_273_1_fu_171_p2[0:0] === 1'b1) ? logits3_2_V_reg_328 : max_val_V_1_0_max_va_reg_339);

assign p_cast_cast_fu_187_p3 = ((tmp_s_reg_334_pp0_iter14_reg[0:0] === 1'b1) ? 26'd16777216 : 26'd0);

assign p_s_64_fu_205_p3 = ((tmp_fu_201_p2[0:0] === 1'b1) ? p_s_fu_194_p3 : p_cast_cast_fu_187_p3);

assign p_s_fu_194_p3 = ((tmp_273_2_reg_350[0:0] === 1'b1) ? 26'd50331648 : 26'd33554432);

assign tmp_102_fu_213_p2 = ((p_s_64_fu_205_p3 == 26'd0) ? 1'b1 : 1'b0);

assign tmp_103_fu_255_p3 = ((tmp_273_2_reg_350[0:0] === 1'b1) ? 25'd16777216 : 25'd0);

assign tmp_119_cast_fu_219_p3 = ((tmp_102_fu_213_p2[0:0] === 1'b1) ? 32'd16777216 : 32'd0);

assign tmp_120_cast_fu_233_p3 = ((tmp_276_1_fu_227_p2[0:0] === 1'b1) ? 32'd16777216 : 32'd0);

assign tmp_121_cast_fu_247_p3 = ((tmp_276_2_fu_241_p2[0:0] === 1'b1) ? 32'd16777216 : 32'd0);

assign tmp_265_fu_262_p5 = {{{{tmp_103_fu_255_p3}, {tmp_121_cast_fu_247_p3}}, {tmp_120_cast_fu_233_p3}}, {tmp_119_cast_fu_219_p3}};

assign tmp_273_1_fu_171_p2 = (($signed(logits3_2_V_reg_328) > $signed(max_val_V_1_0_max_va_reg_339)) ? 1'b1 : 1'b0);

assign tmp_273_2_fu_181_p2 = (($signed(call_ret6_reg_323_3) > $signed(max_val_V_1_1_max_va_fu_175_p3)) ? 1'b1 : 1'b0);

assign tmp_276_1_fu_227_p2 = ((p_s_64_fu_205_p3 == 26'd16777216) ? 1'b1 : 1'b0);

assign tmp_276_2_fu_241_p2 = ((p_s_64_fu_205_p3 == 26'd33554432) ? 1'b1 : 1'b0);

assign tmp_fu_201_p2 = (tmp_273_2_reg_350 | tmp_273_1_reg_345);

assign tmp_s_fu_154_p2 = (($signed(grp_softmax_fu_60_ap_return_1) > $signed(grp_softmax_fu_60_ap_return_0)) ? 1'b1 : 1'b0);

endmodule //decoder
