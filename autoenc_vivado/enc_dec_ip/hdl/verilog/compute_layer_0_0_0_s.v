// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module compute_layer_0_0_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_TVALID,
        ap_ce,
        data_V_TDATA,
        data_V_TREADY,
        ap_return_0,
        ap_return_1,
        ap_return_2,
        ap_return_3,
        data_V_TDATA_blk_n
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   data_V_TVALID;
input   ap_ce;
input  [127:0] data_V_TDATA;
output   data_V_TREADY;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
output  [31:0] ap_return_2;
output  [31:0] ap_return_3;
output   data_V_TDATA_blk_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_TREADY;
reg data_V_TDATA_blk_n;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire  signed [31:0] tmp_216_fu_1267_p1;
reg  signed [31:0] tmp_216_reg_1636;
reg  signed [31:0] tmp_102_reg_1643;
reg  signed [31:0] tmp_105_reg_1649;
reg  signed [31:0] tmp_110_reg_1655;
reg   [31:0] tmp_s_reg_1661;
reg   [31:0] tmp_138_0_1_reg_1666;
reg   [26:0] tmp_98_reg_1671;
reg   [30:0] tmp_100_reg_1676;
reg   [31:0] tmp_138_1_reg_1681;
reg   [31:0] tmp_138_1_1_reg_1686;
reg   [31:0] tmp_138_1_2_reg_1691;
reg   [30:0] tmp_103_reg_1696;
reg   [31:0] tmp_138_2_reg_1701;
reg   [30:0] tmp_106_reg_1706;
reg   [30:0] tmp_108_reg_1711;
reg   [31:0] tmp_138_2_3_reg_1716;
reg   [31:0] tmp_138_3_reg_1721;
reg   [30:0] tmp_111_reg_1726;
reg   [31:0] tmp_138_3_2_reg_1731;
reg   [30:0] tmp_113_reg_1736;
reg    ap_block_pp0_stage0_subdone;
wire  signed [31:0] p_Val2_3_3_fu_114_p1;
wire  signed [54:0] OP1_V_3_cast1_fu_1454_p1;
wire  signed [31:0] p_Val2_s_fu_115_p1;
wire  signed [55:0] OP1_V_cast_fu_1309_p1;
wire  signed [31:0] p_Val2_2_1_fu_116_p1;
wire  signed [54:0] OP1_V_2_cast1_fu_1404_p1;
wire  signed [31:0] p_Val2_1_fu_117_p1;
wire  signed [55:0] OP1_V_1_cast_fu_1358_p1;
wire  signed [31:0] p_Val2_1_1_fu_118_p1;
wire  signed [31:0] p_Val2_0_1_fu_119_p1;
wire  signed [31:0] p_Val2_1_2_fu_120_p1;
wire  signed [31:0] p_Val2_2_3_fu_121_p1;
wire  signed [55:0] OP1_V_2_cast_fu_1409_p1;
wire  signed [31:0] p_Val2_0_3_fu_122_p1;
wire  signed [31:0] p_Val2_2_fu_123_p1;
wire  signed [31:0] p_Val2_2_2_fu_124_p1;
wire  signed [31:0] p_Val2_3_fu_125_p1;
wire  signed [55:0] OP1_V_3_cast_fu_1459_p1;
wire  signed [31:0] p_Val2_1_3_fu_126_p1;
wire  signed [31:0] p_Val2_3_1_fu_127_p1;
wire  signed [31:0] p_Val2_3_2_fu_128_p1;
wire  signed [31:0] p_Val2_0_2_fu_129_p1;
wire   [55:0] p_Val2_s_fu_115_p2;
wire   [55:0] p_Val2_0_1_fu_119_p2;
wire   [50:0] p_Val2_0_2_fu_129_p2;
wire   [54:0] p_Val2_0_3_fu_122_p2;
wire   [55:0] p_Val2_1_fu_117_p2;
wire   [55:0] p_Val2_1_1_fu_118_p2;
wire   [55:0] p_Val2_1_2_fu_120_p2;
wire   [54:0] p_Val2_1_3_fu_126_p2;
wire   [55:0] p_Val2_2_fu_123_p2;
wire   [54:0] p_Val2_2_1_fu_116_p2;
wire   [54:0] p_Val2_2_2_fu_124_p2;
wire   [55:0] p_Val2_2_3_fu_121_p2;
wire   [55:0] p_Val2_3_fu_125_p2;
wire   [54:0] p_Val2_3_1_fu_127_p2;
wire   [55:0] p_Val2_3_2_fu_128_p2;
wire   [54:0] p_Val2_3_3_fu_114_p2;
wire   [31:0] tmp3_fu_1529_p2;
wire   [31:0] tmp1_fu_1525_p2;
wire   [31:0] tmp2_fu_1534_p2;
wire  signed [31:0] tmp_112_fu_1519_p1;
wire  signed [31:0] tmp_107_fu_1513_p1;
wire   [31:0] tmp6_fu_1549_p2;
wire   [31:0] tmp4_fu_1545_p2;
wire   [31:0] tmp5_fu_1555_p2;
wire  signed [31:0] tmp_99_fu_1504_p1;
wire  signed [31:0] tmp_109_fu_1516_p1;
wire   [31:0] tmp9_fu_1572_p2;
wire   [31:0] tmp7_fu_1567_p2;
wire   [31:0] tmp8_fu_1577_p2;
wire  signed [31:0] tmp_104_fu_1510_p1;
wire  signed [31:0] tmp_101_fu_1507_p1;
wire  signed [31:0] tmp_114_fu_1522_p1;
wire   [31:0] tmp12_fu_1595_p2;
wire   [31:0] tmp10_fu_1589_p2;
wire   [31:0] tmp11_fu_1601_p2;
wire   [31:0] res_0_V_write_assig_fu_1539_p2;
wire   [31:0] res_1_V_write_assig_fu_1561_p2;
wire   [31:0] res_2_V_write_assig_fu_1583_p2;
wire   [31:0] res_3_V_write_assig_fu_1606_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_100_reg_1676 <= {{p_Val2_0_3_fu_122_p2[54:24]}};
        tmp_102_reg_1643 <= {{data_V_TDATA[63:32]}};
        tmp_103_reg_1696 <= {{p_Val2_1_3_fu_126_p2[54:24]}};
        tmp_105_reg_1649 <= {{data_V_TDATA[95:64]}};
        tmp_106_reg_1706 <= {{p_Val2_2_1_fu_116_p2[54:24]}};
        tmp_108_reg_1711 <= {{p_Val2_2_2_fu_124_p2[54:24]}};
        tmp_110_reg_1655 <= {{data_V_TDATA[127:96]}};
        tmp_111_reg_1726 <= {{p_Val2_3_1_fu_127_p2[54:24]}};
        tmp_113_reg_1736 <= {{p_Val2_3_3_fu_114_p2[54:24]}};
        tmp_138_0_1_reg_1666 <= {{p_Val2_0_1_fu_119_p2[55:24]}};
        tmp_138_1_1_reg_1686 <= {{p_Val2_1_1_fu_118_p2[55:24]}};
        tmp_138_1_2_reg_1691 <= {{p_Val2_1_2_fu_120_p2[55:24]}};
        tmp_138_1_reg_1681 <= {{p_Val2_1_fu_117_p2[55:24]}};
        tmp_138_2_3_reg_1716 <= {{p_Val2_2_3_fu_121_p2[55:24]}};
        tmp_138_2_reg_1701 <= {{p_Val2_2_fu_123_p2[55:24]}};
        tmp_138_3_2_reg_1731 <= {{p_Val2_3_2_fu_128_p2[55:24]}};
        tmp_138_3_reg_1721 <= {{p_Val2_3_fu_125_p2[55:24]}};
        tmp_216_reg_1636 <= tmp_216_fu_1267_p1;
        tmp_98_reg_1671 <= {{p_Val2_0_2_fu_129_p2[50:24]}};
        tmp_s_reg_1661 <= {{p_Val2_s_fu_115_p2[55:24]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_TDATA_blk_n = data_V_TVALID;
    end else begin
        data_V_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data_V_TREADY = 1'b1;
    end else begin
        data_V_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_1_cast_fu_1358_p1 = tmp_102_reg_1643;

assign OP1_V_2_cast1_fu_1404_p1 = tmp_105_reg_1649;

assign OP1_V_2_cast_fu_1409_p1 = tmp_105_reg_1649;

assign OP1_V_3_cast1_fu_1454_p1 = tmp_110_reg_1655;

assign OP1_V_3_cast_fu_1459_p1 = tmp_110_reg_1655;

assign OP1_V_cast_fu_1309_p1 = tmp_216_reg_1636;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b1) & ((ap_start == 1'b0) | (data_V_TVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (data_V_TVALID == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (data_V_TVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return_0 = res_0_V_write_assig_fu_1539_p2;

assign ap_return_1 = res_1_V_write_assig_fu_1561_p2;

assign ap_return_2 = res_2_V_write_assig_fu_1583_p2;

assign ap_return_3 = res_3_V_write_assig_fu_1606_p2;

assign p_Val2_0_1_fu_119_p1 = OP1_V_cast_fu_1309_p1;

assign p_Val2_0_1_fu_119_p2 = ($signed({{1'b0}, {56'd15357447}}) * $signed(p_Val2_0_1_fu_119_p1));

assign p_Val2_0_2_fu_129_p1 = tmp_216_reg_1636;

assign p_Val2_0_2_fu_129_p2 = ($signed({{1'b0}, {51'd510029}}) * $signed(p_Val2_0_2_fu_129_p1));

assign p_Val2_0_3_fu_122_p1 = tmp_216_reg_1636;

assign p_Val2_0_3_fu_122_p2 = ($signed(55'd36028797011366141) * $signed(p_Val2_0_3_fu_122_p1));

assign p_Val2_1_1_fu_118_p1 = OP1_V_1_cast_fu_1358_p1;

assign p_Val2_1_1_fu_118_p2 = ($signed(56'd72057594027532653) * $signed(p_Val2_1_1_fu_118_p1));

assign p_Val2_1_2_fu_120_p1 = OP1_V_1_cast_fu_1358_p1;

assign p_Val2_1_2_fu_120_p2 = ($signed(56'd72057594029310615) * $signed(p_Val2_1_2_fu_120_p1));

assign p_Val2_1_3_fu_126_p1 = tmp_102_reg_1643;

assign p_Val2_1_3_fu_126_p2 = ($signed(55'd36028797010750686) * $signed(p_Val2_1_3_fu_126_p1));

assign p_Val2_1_fu_117_p1 = OP1_V_1_cast_fu_1358_p1;

assign p_Val2_1_fu_117_p2 = ($signed(56'd72057594021897685) * $signed(p_Val2_1_fu_117_p1));

assign p_Val2_2_1_fu_116_p1 = OP1_V_2_cast1_fu_1404_p1;

assign p_Val2_2_1_fu_116_p2 = ($signed({{1'b0}, {55'd6308704}}) * $signed(p_Val2_2_1_fu_116_p1));

assign p_Val2_2_2_fu_124_p1 = OP1_V_2_cast1_fu_1404_p1;

assign p_Val2_2_2_fu_124_p2 = ($signed(55'd36028797014058924) * $signed(p_Val2_2_2_fu_124_p1));

assign p_Val2_2_3_fu_121_p1 = OP1_V_2_cast_fu_1409_p1;

assign p_Val2_2_3_fu_121_p2 = ($signed({{1'b0}, {56'd39604611}}) * $signed(p_Val2_2_3_fu_121_p1));

assign p_Val2_2_fu_123_p1 = OP1_V_2_cast_fu_1409_p1;

assign p_Val2_2_fu_123_p2 = ($signed(56'd72057594027506582) * $signed(p_Val2_2_fu_123_p1));

assign p_Val2_3_1_fu_127_p1 = OP1_V_3_cast1_fu_1454_p1;

assign p_Val2_3_1_fu_127_p2 = ($signed(55'd36028797012575045) * $signed(p_Val2_3_1_fu_127_p1));

assign p_Val2_3_2_fu_128_p1 = OP1_V_3_cast_fu_1459_p1;

assign p_Val2_3_2_fu_128_p2 = ($signed(56'd72057594028152224) * $signed(p_Val2_3_2_fu_128_p1));

assign p_Val2_3_3_fu_114_p1 = OP1_V_3_cast1_fu_1454_p1;

assign p_Val2_3_3_fu_114_p2 = ($signed({{1'b0}, {55'd4726739}}) * $signed(p_Val2_3_3_fu_114_p1));

assign p_Val2_3_fu_125_p1 = OP1_V_3_cast_fu_1459_p1;

assign p_Val2_3_fu_125_p2 = ($signed({{1'b0}, {56'd45645548}}) * $signed(p_Val2_3_fu_125_p1));

assign p_Val2_s_fu_115_p1 = OP1_V_cast_fu_1309_p1;

assign p_Val2_s_fu_115_p2 = ($signed(56'd72057594023469229) * $signed(p_Val2_s_fu_115_p1));

assign res_0_V_write_assig_fu_1539_p2 = (tmp1_fu_1525_p2 + tmp2_fu_1534_p2);

assign res_1_V_write_assig_fu_1561_p2 = (tmp4_fu_1545_p2 + tmp5_fu_1555_p2);

assign res_2_V_write_assig_fu_1583_p2 = (tmp7_fu_1567_p2 + tmp8_fu_1577_p2);

assign res_3_V_write_assig_fu_1606_p2 = (tmp10_fu_1589_p2 + tmp11_fu_1601_p2);

assign tmp10_fu_1589_p2 = ($signed(tmp_104_fu_1510_p1) + $signed(tmp_101_fu_1507_p1));

assign tmp11_fu_1601_p2 = (tmp_138_2_3_reg_1716 + tmp12_fu_1595_p2);

assign tmp12_fu_1595_p2 = ($signed(32'd786494) + $signed(tmp_114_fu_1522_p1));

assign tmp1_fu_1525_p2 = (tmp_138_1_reg_1681 + tmp_s_reg_1661);

assign tmp2_fu_1534_p2 = (tmp_138_2_reg_1701 + tmp3_fu_1529_p2);

assign tmp3_fu_1529_p2 = (32'd8578415 + tmp_138_3_reg_1721);

assign tmp4_fu_1545_p2 = (tmp_138_1_1_reg_1686 + tmp_138_0_1_reg_1666);

assign tmp5_fu_1555_p2 = ($signed(tmp_107_fu_1513_p1) + $signed(tmp6_fu_1549_p2));

assign tmp6_fu_1549_p2 = ($signed(32'd3897391) + $signed(tmp_112_fu_1519_p1));

assign tmp7_fu_1567_p2 = ($signed(tmp_138_1_2_reg_1691) + $signed(tmp_99_fu_1504_p1));

assign tmp8_fu_1577_p2 = ($signed(tmp_109_fu_1516_p1) + $signed(tmp9_fu_1572_p2));

assign tmp9_fu_1572_p2 = ($signed(32'd4291875276) + $signed(tmp_138_3_2_reg_1731));

assign tmp_101_fu_1507_p1 = $signed(tmp_100_reg_1676);

assign tmp_104_fu_1510_p1 = $signed(tmp_103_reg_1696);

assign tmp_107_fu_1513_p1 = $signed(tmp_106_reg_1706);

assign tmp_109_fu_1516_p1 = $signed(tmp_108_reg_1711);

assign tmp_112_fu_1519_p1 = $signed(tmp_111_reg_1726);

assign tmp_114_fu_1522_p1 = $signed(tmp_113_reg_1736);

assign tmp_216_fu_1267_p1 = data_V_TDATA[31:0];

assign tmp_99_fu_1504_p1 = $signed(tmp_98_reg_1671);

endmodule //compute_layer_0_0_0_s
