// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="encoder_decoder,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=241,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=154,HLS_SYN_FF=20307,HLS_SYN_LUT=30627,HLS_VERSION=2018_2_1}" *)

module encoder_decoder (
        ap_clk,
        ap_rst_n,
        axis_enc_data_in_TDATA,
        axis_enc_data_in_TVALID,
        axis_enc_data_in_TREADY,
        axis_enc_data_in_TKEEP,
        axis_enc_data_in_TLAST,
        axis_dec_data_out_TDATA,
        axis_dec_data_out_TVALID,
        axis_dec_data_out_TREADY,
        axis_dec_data_out_TKEEP,
        axis_dec_data_out_TLAST,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 112'd1;
parameter    ap_ST_fsm_state2 = 112'd2;
parameter    ap_ST_fsm_state3 = 112'd4;
parameter    ap_ST_fsm_state4 = 112'd8;
parameter    ap_ST_fsm_state5 = 112'd16;
parameter    ap_ST_fsm_state6 = 112'd32;
parameter    ap_ST_fsm_state7 = 112'd64;
parameter    ap_ST_fsm_state8 = 112'd128;
parameter    ap_ST_fsm_state9 = 112'd256;
parameter    ap_ST_fsm_state10 = 112'd512;
parameter    ap_ST_fsm_state11 = 112'd1024;
parameter    ap_ST_fsm_state12 = 112'd2048;
parameter    ap_ST_fsm_state13 = 112'd4096;
parameter    ap_ST_fsm_state14 = 112'd8192;
parameter    ap_ST_fsm_state15 = 112'd16384;
parameter    ap_ST_fsm_state16 = 112'd32768;
parameter    ap_ST_fsm_state17 = 112'd65536;
parameter    ap_ST_fsm_state18 = 112'd131072;
parameter    ap_ST_fsm_state19 = 112'd262144;
parameter    ap_ST_fsm_state20 = 112'd524288;
parameter    ap_ST_fsm_state21 = 112'd1048576;
parameter    ap_ST_fsm_state22 = 112'd2097152;
parameter    ap_ST_fsm_state23 = 112'd4194304;
parameter    ap_ST_fsm_state24 = 112'd8388608;
parameter    ap_ST_fsm_state25 = 112'd16777216;
parameter    ap_ST_fsm_state26 = 112'd33554432;
parameter    ap_ST_fsm_state27 = 112'd67108864;
parameter    ap_ST_fsm_state28 = 112'd134217728;
parameter    ap_ST_fsm_state29 = 112'd268435456;
parameter    ap_ST_fsm_state30 = 112'd536870912;
parameter    ap_ST_fsm_state31 = 112'd1073741824;
parameter    ap_ST_fsm_state32 = 112'd2147483648;
parameter    ap_ST_fsm_state33 = 112'd4294967296;
parameter    ap_ST_fsm_state34 = 112'd8589934592;
parameter    ap_ST_fsm_state35 = 112'd17179869184;
parameter    ap_ST_fsm_state36 = 112'd34359738368;
parameter    ap_ST_fsm_state37 = 112'd68719476736;
parameter    ap_ST_fsm_state38 = 112'd137438953472;
parameter    ap_ST_fsm_state39 = 112'd274877906944;
parameter    ap_ST_fsm_state40 = 112'd549755813888;
parameter    ap_ST_fsm_state41 = 112'd1099511627776;
parameter    ap_ST_fsm_state42 = 112'd2199023255552;
parameter    ap_ST_fsm_state43 = 112'd4398046511104;
parameter    ap_ST_fsm_state44 = 112'd8796093022208;
parameter    ap_ST_fsm_state45 = 112'd17592186044416;
parameter    ap_ST_fsm_state46 = 112'd35184372088832;
parameter    ap_ST_fsm_state47 = 112'd70368744177664;
parameter    ap_ST_fsm_state48 = 112'd140737488355328;
parameter    ap_ST_fsm_state49 = 112'd281474976710656;
parameter    ap_ST_fsm_state50 = 112'd562949953421312;
parameter    ap_ST_fsm_state51 = 112'd1125899906842624;
parameter    ap_ST_fsm_state52 = 112'd2251799813685248;
parameter    ap_ST_fsm_state53 = 112'd4503599627370496;
parameter    ap_ST_fsm_state54 = 112'd9007199254740992;
parameter    ap_ST_fsm_state55 = 112'd18014398509481984;
parameter    ap_ST_fsm_state56 = 112'd36028797018963968;
parameter    ap_ST_fsm_state57 = 112'd72057594037927936;
parameter    ap_ST_fsm_state58 = 112'd144115188075855872;
parameter    ap_ST_fsm_state59 = 112'd288230376151711744;
parameter    ap_ST_fsm_state60 = 112'd576460752303423488;
parameter    ap_ST_fsm_state61 = 112'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 112'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 112'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 112'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 112'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 112'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 112'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 112'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 112'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 112'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 112'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 112'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 112'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 112'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 112'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 112'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 112'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 112'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 112'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 112'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 112'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 112'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 112'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 112'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 112'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 112'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 112'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 112'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 112'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 112'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 112'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 112'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 112'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 112'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 112'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 112'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 112'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 112'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 112'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 112'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 112'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 112'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 112'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 112'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 112'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 112'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 112'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 112'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 112'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 112'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 112'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 112'd2596148429267413814265248164610048;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] axis_enc_data_in_TDATA;
input   axis_enc_data_in_TVALID;
output   axis_enc_data_in_TREADY;
input  [3:0] axis_enc_data_in_TKEEP;
input  [0:0] axis_enc_data_in_TLAST;
output  [31:0] axis_dec_data_out_TDATA;
output   axis_dec_data_out_TVALID;
input   axis_dec_data_out_TREADY;
output  [3:0] axis_dec_data_out_TKEEP;
output  [0:0] axis_dec_data_out_TLAST;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [111:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] axis_enc_data_in_V_data_V_0_data_out;
wire    axis_enc_data_in_V_data_V_0_vld_in;
wire    axis_enc_data_in_V_data_V_0_vld_out;
wire    axis_enc_data_in_V_data_V_0_ack_in;
reg    axis_enc_data_in_V_data_V_0_ack_out;
reg   [31:0] axis_enc_data_in_V_data_V_0_payload_A;
reg   [31:0] axis_enc_data_in_V_data_V_0_payload_B;
reg    axis_enc_data_in_V_data_V_0_sel_rd;
reg    axis_enc_data_in_V_data_V_0_sel_wr;
wire    axis_enc_data_in_V_data_V_0_sel;
wire    axis_enc_data_in_V_data_V_0_load_A;
wire    axis_enc_data_in_V_data_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_data_V_0_state;
wire    axis_enc_data_in_V_data_V_0_state_cmp_full;
reg   [3:0] axis_enc_data_in_V_keep_V_0_data_out;
wire    axis_enc_data_in_V_keep_V_0_vld_in;
wire    axis_enc_data_in_V_keep_V_0_vld_out;
wire    axis_enc_data_in_V_keep_V_0_ack_in;
reg    axis_enc_data_in_V_keep_V_0_ack_out;
reg   [3:0] axis_enc_data_in_V_keep_V_0_payload_A;
reg   [3:0] axis_enc_data_in_V_keep_V_0_payload_B;
reg    axis_enc_data_in_V_keep_V_0_sel_rd;
reg    axis_enc_data_in_V_keep_V_0_sel_wr;
wire    axis_enc_data_in_V_keep_V_0_sel;
wire    axis_enc_data_in_V_keep_V_0_load_A;
wire    axis_enc_data_in_V_keep_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_keep_V_0_state;
wire    axis_enc_data_in_V_keep_V_0_state_cmp_full;
reg   [0:0] axis_enc_data_in_V_last_V_0_data_out;
wire    axis_enc_data_in_V_last_V_0_vld_in;
wire    axis_enc_data_in_V_last_V_0_vld_out;
wire    axis_enc_data_in_V_last_V_0_ack_in;
reg    axis_enc_data_in_V_last_V_0_ack_out;
reg   [0:0] axis_enc_data_in_V_last_V_0_payload_A;
reg   [0:0] axis_enc_data_in_V_last_V_0_payload_B;
reg    axis_enc_data_in_V_last_V_0_sel_rd;
reg    axis_enc_data_in_V_last_V_0_sel_wr;
wire    axis_enc_data_in_V_last_V_0_sel;
wire    axis_enc_data_in_V_last_V_0_load_A;
wire    axis_enc_data_in_V_last_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_last_V_0_state;
wire    axis_enc_data_in_V_last_V_0_state_cmp_full;
reg   [31:0] axis_dec_data_out_V_data_V_1_data_out;
reg    axis_dec_data_out_V_data_V_1_vld_in;
wire    axis_dec_data_out_V_data_V_1_vld_out;
wire    axis_dec_data_out_V_data_V_1_ack_in;
wire    axis_dec_data_out_V_data_V_1_ack_out;
reg   [31:0] axis_dec_data_out_V_data_V_1_payload_A;
reg   [31:0] axis_dec_data_out_V_data_V_1_payload_B;
reg    axis_dec_data_out_V_data_V_1_sel_rd;
reg    axis_dec_data_out_V_data_V_1_sel_wr;
wire    axis_dec_data_out_V_data_V_1_sel;
wire    axis_dec_data_out_V_data_V_1_load_A;
wire    axis_dec_data_out_V_data_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_data_V_1_state;
wire    axis_dec_data_out_V_data_V_1_state_cmp_full;
reg   [3:0] axis_dec_data_out_V_keep_V_1_data_out;
reg    axis_dec_data_out_V_keep_V_1_vld_in;
wire    axis_dec_data_out_V_keep_V_1_vld_out;
wire    axis_dec_data_out_V_keep_V_1_ack_in;
wire    axis_dec_data_out_V_keep_V_1_ack_out;
reg   [3:0] axis_dec_data_out_V_keep_V_1_payload_A;
reg   [3:0] axis_dec_data_out_V_keep_V_1_payload_B;
reg    axis_dec_data_out_V_keep_V_1_sel_rd;
reg    axis_dec_data_out_V_keep_V_1_sel_wr;
wire    axis_dec_data_out_V_keep_V_1_sel;
wire    axis_dec_data_out_V_keep_V_1_load_A;
wire    axis_dec_data_out_V_keep_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_keep_V_1_state;
wire    axis_dec_data_out_V_keep_V_1_state_cmp_full;
reg   [0:0] axis_dec_data_out_V_last_V_1_data_out;
reg    axis_dec_data_out_V_last_V_1_vld_in;
wire    axis_dec_data_out_V_last_V_1_vld_out;
wire    axis_dec_data_out_V_last_V_1_ack_in;
wire    axis_dec_data_out_V_last_V_1_ack_out;
reg   [0:0] axis_dec_data_out_V_last_V_1_payload_A;
reg   [0:0] axis_dec_data_out_V_last_V_1_payload_B;
reg    axis_dec_data_out_V_last_V_1_sel_rd;
reg    axis_dec_data_out_V_last_V_1_sel_wr;
wire    axis_dec_data_out_V_last_V_1_sel;
wire    axis_dec_data_out_V_last_V_1_load_A;
wire    axis_dec_data_out_V_last_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_last_V_1_state;
wire    axis_dec_data_out_V_last_V_1_state_cmp_full;
wire   [7:0] SNR_V;
reg    axis_enc_data_in_TDATA_blk_n;
wire    ap_CS_fsm_state3;
reg    axis_dec_data_out_TDATA_blk_n;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
reg   [0:0] tmp_262_reg_1089;
reg   [7:0] SNR_V_read_reg_990;
wire   [2:0] i_2_fu_285_p2;
reg   [2:0] i_2_reg_998;
wire    ap_CS_fsm_state2;
wire   [1:0] tmp_fu_291_p1;
reg   [1:0] tmp_reg_1003;
wire   [0:0] exitcond2_fu_279_p2;
wire   [127:0] enc_data_in_V_fu_486_p2;
wire   [63:0] grp_encoder_fu_246_ap_return;
reg   [63:0] enc_data_out_V_reg_1013;
wire    ap_CS_fsm_state93;
wire   [1:0] i_3_fu_498_p2;
reg   [1:0] i_3_reg_1022;
wire    ap_CS_fsm_state94;
wire   [0:0] tmp_223_fu_504_p1;
reg   [0:0] tmp_223_reg_1027;
wire   [0:0] exitcond_fu_492_p2;
wire   [31:0] grp_operator_s_fu_262_ap_return;
reg   [31:0] noise_V_reg_1032;
wire    ap_CS_fsm_state95;
wire    grp_operator_s_fu_262_ap_idle;
wire    grp_operator_s_fu_262_ap_ready;
wire    grp_operator_s_fu_262_ap_done;
wire   [5:0] tmp_s_fu_508_p3;
reg   [5:0] tmp_s_reg_1037;
wire   [5:0] tmp_97_fu_516_p2;
reg   [5:0] tmp_97_reg_1043;
wire   [6:0] tmp_234_fu_581_p2;
reg   [6:0] tmp_234_reg_1049;
wire   [63:0] tmp_237_fu_591_p2;
reg   [63:0] tmp_237_reg_1054;
wire   [0:0] grp_fu_275_p2;
reg   [0:0] tmp_241_reg_1059;
wire    ap_CS_fsm_state96;
wire   [6:0] tmp_242_fu_642_p1;
reg   [6:0] tmp_242_reg_1066;
wire   [63:0] tmp_253_fu_667_p2;
reg   [63:0] tmp_253_reg_1072;
wire   [63:0] dec_data_in_V_fu_753_p2;
wire    ap_CS_fsm_state97;
wire   [127:0] grp_decoder_fu_252_ap_return;
reg   [127:0] dec_data_out_V_reg_1083;
wire    ap_CS_fsm_state109;
wire   [0:0] tmp_262_fu_759_p3;
wire    ap_CS_fsm_state110;
wire   [2:0] i_4_fu_767_p2;
reg   [2:0] i_4_reg_1093;
wire   [1:0] tmp_263_fu_773_p1;
reg   [1:0] tmp_263_reg_1098;
wire   [7:0] tmp_274_fu_855_p2;
reg   [7:0] tmp_274_reg_1104;
wire   [127:0] tmp_277_fu_865_p2;
reg   [127:0] tmp_277_reg_1109;
wire   [31:0] axis_dec_data_out_it_fu_909_p1;
wire   [3:0] axis_dec_data_out_it_1_fu_914_p6;
wire   [0:0] axis_dec_data_out_it_2_fu_928_p6;
reg   [0:0] axis_dec_data_out_it_2_reg_1124;
wire    grp_encoder_fu_246_ap_start;
wire    grp_encoder_fu_246_ap_done;
wire    grp_encoder_fu_246_ap_idle;
wire    grp_encoder_fu_246_ap_ready;
wire    grp_decoder_fu_252_ap_start;
wire    grp_decoder_fu_252_ap_done;
wire    grp_decoder_fu_252_ap_idle;
wire    grp_decoder_fu_252_ap_ready;
wire    grp_operator_s_fu_262_ap_start;
reg   [127:0] enc_data_in_V_s_reg_189;
reg   [2:0] i_reg_201;
reg   [63:0] dec_data_in_V_s_reg_212;
reg   [1:0] i5_reg_224;
reg   [2:0] i6_reg_235;
reg    ap_block_state112;
reg    ap_block_state112_io;
reg    grp_encoder_fu_246_ap_start_reg;
reg   [111:0] ap_NS_fsm;
wire    ap_NS_fsm_state4;
wire    ap_CS_fsm_state4;
reg    grp_decoder_fu_252_ap_start_reg;
wire    ap_NS_fsm_state98;
wire    ap_CS_fsm_state98;
reg    grp_operator_s_fu_262_ap_start_reg;
reg   [3:0] tmp_keep_V_fu_128;
reg   [3:0] tmp_keep_V_1_fu_132;
reg   [3:0] tmp_keep_V_2_fu_136;
reg   [3:0] tmp_keep_V_3_fu_140;
reg   [0:0] tmp_last_V_fu_144;
reg   [0:0] tmp_last_V_1_fu_148;
reg   [0:0] tmp_last_V_2_fu_152;
reg   [0:0] tmp_last_V_3_fu_156;
reg   [5:0] grp_fu_275_p0;
reg   [5:0] grp_fu_275_p1;
wire   [6:0] tmp_100_fu_347_p3;
wire   [6:0] tmp_101_fu_354_p2;
wire   [7:0] tmp_282_fu_366_p1;
wire   [0:0] tmp_281_fu_360_p2;
wire   [7:0] tmp_283_fu_370_p1;
wire   [7:0] tmp_285_fu_378_p2;
wire   [7:0] tmp_286_fu_384_p3;
wire   [7:0] tmp_288_fu_400_p3;
wire   [7:0] tmp_287_fu_392_p3;
wire   [7:0] tmp_289_fu_408_p2;
wire   [127:0] tmp_284_fu_374_p1;
wire   [127:0] tmp_290_fu_414_p1;
wire   [127:0] tmp_293_fu_426_p2;
reg   [127:0] tmp_294_fu_432_p4;
wire   [127:0] tmp_291_fu_418_p1;
wire   [127:0] tmp_292_fu_422_p1;
wire   [127:0] tmp_296_fu_450_p2;
wire   [127:0] tmp_297_fu_456_p2;
wire   [127:0] p_demorgan_fu_462_p2;
wire   [127:0] tmp_298_fu_468_p2;
wire   [127:0] tmp_295_fu_442_p3;
wire   [127:0] tmp_299_fu_474_p2;
wire   [127:0] tmp_300_fu_480_p2;
wire   [6:0] tmp_225_fu_523_p1;
wire   [6:0] tmp_226_fu_527_p1;
wire   [6:0] tmp_228_fu_540_p2;
wire   [6:0] tmp_230_fu_552_p2;
reg   [63:0] tmp_227_fu_531_p4;
wire   [6:0] tmp_229_fu_546_p2;
wire   [6:0] tmp_231_fu_558_p3;
wire   [6:0] tmp_233_fu_573_p3;
wire   [63:0] tmp_232_fu_566_p3;
wire   [63:0] tmp_235_fu_587_p1;
wire   [63:0] tmp_236_fu_597_p1;
wire   [63:0] tmp_238_fu_600_p2;
wire   [63:0] tmp_239_fu_606_p2;
wire   [31:0] p_Val2_s_fu_611_p1;
wire   [37:0] tmp_85_fu_615_p3;
wire  signed [37:0] tmp_86_cast_fu_623_p1;
wire   [37:0] p_Val2_8_fu_626_p2;
wire   [31:0] tmp_88_fu_632_p4;
wire   [6:0] tmp_245_fu_649_p2;
wire   [6:0] tmp_248_fu_655_p3;
wire   [63:0] tmp_244_fu_645_p1;
wire   [63:0] tmp_250_fu_663_p1;
wire   [6:0] tmp_243_fu_673_p1;
wire   [6:0] tmp_246_fu_676_p3;
wire   [6:0] tmp_247_fu_682_p3;
wire   [6:0] tmp_249_fu_688_p2;
reg   [63:0] tmp_254_fu_702_p4;
wire   [63:0] tmp_251_fu_694_p1;
wire   [63:0] tmp_252_fu_698_p1;
wire   [63:0] tmp_256_fu_717_p2;
wire   [63:0] tmp_257_fu_723_p2;
wire   [63:0] p_demorgan3_fu_729_p2;
wire   [63:0] tmp_258_fu_735_p2;
wire   [63:0] tmp_255_fu_711_p3;
wire   [63:0] tmp_259_fu_741_p2;
wire   [63:0] tmp_260_fu_747_p2;
wire   [6:0] tmp_98_fu_777_p3;
wire   [6:0] tmp_99_fu_785_p2;
wire   [7:0] tmp_265_fu_797_p1;
wire   [7:0] tmp_266_fu_801_p1;
wire   [0:0] tmp_264_fu_791_p2;
wire   [7:0] tmp_268_fu_814_p2;
wire   [7:0] tmp_270_fu_826_p2;
reg   [127:0] tmp_267_fu_805_p4;
wire   [7:0] tmp_269_fu_820_p2;
wire   [7:0] tmp_271_fu_832_p3;
wire   [7:0] tmp_273_fu_847_p3;
wire   [127:0] tmp_272_fu_840_p3;
wire   [127:0] tmp_275_fu_861_p1;
wire   [127:0] tmp_276_fu_895_p1;
wire   [127:0] tmp_278_fu_898_p2;
wire   [127:0] tmp_279_fu_904_p2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 112'd1;
#0 axis_enc_data_in_V_data_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_data_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_data_V_0_state = 2'd0;
#0 axis_enc_data_in_V_keep_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_keep_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_keep_V_0_state = 2'd0;
#0 axis_enc_data_in_V_last_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_last_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_last_V_0_state = 2'd0;
#0 axis_dec_data_out_V_data_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_data_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_data_V_1_state = 2'd0;
#0 axis_dec_data_out_V_keep_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_keep_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_keep_V_1_state = 2'd0;
#0 axis_dec_data_out_V_last_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_last_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_last_V_1_state = 2'd0;
#0 grp_encoder_fu_246_ap_start_reg = 1'b0;
#0 grp_decoder_fu_252_ap_start_reg = 1'b0;
#0 grp_operator_s_fu_262_ap_start_reg = 1'b0;
end

encoder_decoder_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
encoder_decoder_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .SNR_V(SNR_V)
);

encoder grp_encoder_fu_246(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_encoder_fu_246_ap_start),
    .ap_done(grp_encoder_fu_246_ap_done),
    .ap_idle(grp_encoder_fu_246_ap_idle),
    .ap_ready(grp_encoder_fu_246_ap_ready),
    .data_V_read(enc_data_in_V_s_reg_189),
    .ap_return(grp_encoder_fu_246_ap_return)
);

decoder grp_decoder_fu_252(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_decoder_fu_252_ap_start),
    .ap_done(grp_decoder_fu_252_ap_done),
    .ap_idle(grp_decoder_fu_252_ap_idle),
    .ap_ready(grp_decoder_fu_252_ap_ready),
    .data_V_read(dec_data_in_V_s_reg_212),
    .ap_return(grp_decoder_fu_252_ap_return)
);

operator_s grp_operator_s_fu_262(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_operator_s_fu_262_ap_start),
    .ap_done(grp_operator_s_fu_262_ap_done),
    .ap_idle(grp_operator_s_fu_262_ap_idle),
    .ap_ready(grp_operator_s_fu_262_ap_ready),
    .snr_V_read(SNR_V_read_reg_990),
    .ap_return(grp_operator_s_fu_262_ap_return)
);

encoder_decoder_mibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
encoder_decoder_mibs_U42(
    .din0(tmp_keep_V_fu_128),
    .din1(tmp_keep_V_1_fu_132),
    .din2(tmp_keep_V_2_fu_136),
    .din3(tmp_keep_V_3_fu_140),
    .din4(tmp_263_reg_1098),
    .dout(axis_dec_data_out_it_1_fu_914_p6)
);

encoder_decoder_mjbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
encoder_decoder_mjbC_U43(
    .din0(tmp_last_V_fu_144),
    .din1(tmp_last_V_1_fu_148),
    .din2(tmp_last_V_2_fu_152),
    .din3(tmp_last_V_3_fu_156),
    .din4(tmp_263_reg_1098),
    .dout(axis_dec_data_out_it_2_fu_928_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_data_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_data_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_data_V_1_sel_rd <= ~axis_dec_data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_data_V_1_sel_wr <= ~axis_dec_data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_state == 2'd2)) | ((axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_state == 2'd1)) | ((axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_data_V_1_state == 2'd3)) | ((axis_dec_data_out_V_data_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd1)) | ((axis_dec_data_out_V_data_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd2)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_keep_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_keep_V_1_sel_rd <= ~axis_dec_data_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_keep_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_keep_V_1_sel_wr <= ~axis_dec_data_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_state == 2'd2)) | ((axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_state == 2'd1)) | ((axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_keep_V_1_state == 2'd3)) | ((axis_dec_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd1)) | ((axis_dec_data_out_V_keep_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd2)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_last_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_last_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_last_V_1_sel_rd <= ~axis_dec_data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_last_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_last_V_1_sel_wr <= ~axis_dec_data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_state == 2'd2)) | ((axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_state == 2'd1)) | ((axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_last_V_1_state == 2'd3)) | ((axis_dec_data_out_V_last_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd1)) | ((axis_dec_data_out_V_last_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd2)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_data_V_0_sel_rd <= ~axis_enc_data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_data_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_data_V_0_sel_wr <= ~axis_enc_data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_state == 2'd2)) | ((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_state == 2'd1)) | ((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_data_V_0_state == 2'd3)) | ((axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd1)) | ((axis_enc_data_in_V_data_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_keep_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_keep_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_keep_V_0_sel_rd <= ~axis_enc_data_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_keep_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_keep_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_keep_V_0_sel_wr <= ~axis_enc_data_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_keep_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_keep_V_0_state == 2'd2)) | ((axis_enc_data_in_V_keep_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_keep_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_keep_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_keep_V_0_state == 2'd1)) | ((axis_enc_data_in_V_keep_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_keep_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_keep_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_keep_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_keep_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_keep_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_keep_V_0_state == 2'd3)) | ((axis_enc_data_in_V_keep_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd1)) | ((axis_enc_data_in_V_keep_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_last_V_0_sel_rd <= ~axis_enc_data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_last_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_last_V_0_sel_wr <= ~axis_enc_data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_state == 2'd2)) | ((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_state == 2'd1)) | ((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_last_V_0_state == 2'd3)) | ((axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd1)) | ((axis_enc_data_in_V_last_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_decoder_fu_252_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state98) & (1'b1 == ap_CS_fsm_state94))) begin
            grp_decoder_fu_252_ap_start_reg <= 1'b1;
        end else if ((grp_decoder_fu_252_ap_ready == 1'b1)) begin
            grp_decoder_fu_252_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_encoder_fu_246_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state4) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_encoder_fu_246_ap_start_reg <= 1'b1;
        end else if ((grp_encoder_fu_246_ap_ready == 1'b1)) begin
            grp_encoder_fu_246_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_operator_s_fu_262_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state94) & (exitcond_fu_492_p2 == 1'd0))) begin
            grp_operator_s_fu_262_ap_start_reg <= 1'b1;
        end else if ((grp_operator_s_fu_262_ap_ready == 1'b1)) begin
            grp_operator_s_fu_262_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        i5_reg_224 <= i_3_reg_1022;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        i5_reg_224 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state112_io)) & (1'b1 == ap_CS_fsm_state112) & (axis_dec_data_out_it_2_reg_1124 == 1'd0) & (tmp_262_reg_1089 == 1'd0))) begin
        i6_reg_235 <= i_4_reg_1093;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        i6_reg_235 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        i_reg_201 <= i_2_reg_998;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_201 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        SNR_V_read_reg_990 <= SNR_V;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_data_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_909_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_data_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_909_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_keep_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_keep_V_1_payload_A <= axis_dec_data_out_it_1_fu_914_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_keep_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_keep_V_1_payload_B <= axis_dec_data_out_it_1_fu_914_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_last_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_payload_A <= axis_dec_data_out_it_2_fu_928_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_last_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_payload_B <= axis_dec_data_out_it_2_fu_928_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
        axis_dec_data_out_it_2_reg_1124 <= axis_dec_data_out_it_2_fu_928_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_data_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_data_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_keep_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_keep_V_0_payload_A <= axis_enc_data_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_keep_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_keep_V_0_payload_B <= axis_enc_data_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_last_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_last_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        dec_data_in_V_s_reg_212 <= dec_data_in_V_fu_753_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        dec_data_out_V_reg_1083 <= grp_decoder_fu_252_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        enc_data_in_V_s_reg_189 <= enc_data_in_V_fu_486_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        enc_data_out_V_reg_1013 <= grp_encoder_fu_246_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_2_reg_998 <= i_2_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state94)) begin
        i_3_reg_1022 <= i_3_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state110)) begin
        i_4_reg_1093 <= i_4_fu_767_p2;
        tmp_262_reg_1089 <= i6_reg_235[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((grp_operator_s_fu_262_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state95))) begin
        noise_V_reg_1032 <= grp_operator_s_fu_262_ap_return;
        tmp_234_reg_1049[6 : 1] <= tmp_234_fu_581_p2[6 : 1];
        tmp_237_reg_1054 <= tmp_237_fu_591_p2;
        tmp_97_reg_1043[5] <= tmp_97_fu_516_p2[5];
        tmp_s_reg_1037[5] <= tmp_s_fu_508_p3[5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state94) & (exitcond_fu_492_p2 == 1'd0))) begin
        tmp_223_reg_1027 <= tmp_223_fu_504_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        tmp_241_reg_1059 <= grp_fu_275_p2;
        tmp_242_reg_1066[5] <= tmp_242_fu_642_p1[5];
        tmp_253_reg_1072 <= tmp_253_fu_667_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state110) & (tmp_262_fu_759_p3 == 1'd0))) begin
        tmp_263_reg_1098 <= tmp_263_fu_773_p1;
        tmp_274_reg_1104[7 : 1] <= tmp_274_fu_855_p2[7 : 1];
        tmp_277_reg_1109 <= tmp_277_fu_865_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_1003 == 2'd1) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_1_fu_132 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_1_fu_148 <= axis_enc_data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_1003 == 2'd2) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_2_fu_136 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_2_fu_152 <= axis_enc_data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_1003 == 2'd3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_3_fu_140 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_3_fu_156 <= axis_enc_data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_reg_1003 == 2'd0) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_fu_128 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_fu_144 <= axis_enc_data_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_279_p2 == 1'd0))) begin
        tmp_reg_1003 <= tmp_fu_291_p1;
    end
end

always @ (*) begin
    if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state112_io)) & (1'b1 == ap_CS_fsm_state112) & ((axis_dec_data_out_it_2_reg_1124 == 1'd1) | (tmp_262_reg_1089 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state112_io)) & (1'b1 == ap_CS_fsm_state112) & ((axis_dec_data_out_it_2_reg_1124 == 1'd1) | (tmp_262_reg_1089 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state111) | ((1'b1 == ap_CS_fsm_state112) & (tmp_262_reg_1089 == 1'd0)))) begin
        axis_dec_data_out_TDATA_blk_n = axis_dec_data_out_V_data_V_1_state[1'd1];
    end else begin
        axis_dec_data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_data_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_data_out = axis_dec_data_out_V_data_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_data_V_1_data_out = axis_dec_data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
        axis_dec_data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_keep_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_keep_V_1_data_out = axis_dec_data_out_V_keep_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_keep_V_1_data_out = axis_dec_data_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
        axis_dec_data_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_last_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_data_out = axis_dec_data_out_V_last_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_last_V_1_data_out = axis_dec_data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
        axis_dec_data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        axis_enc_data_in_TDATA_blk_n = axis_enc_data_in_V_data_V_0_state[1'd0];
    end else begin
        axis_enc_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_data_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_data_out = axis_enc_data_in_V_data_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_data_V_0_data_out = axis_enc_data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_keep_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_keep_V_0_data_out = axis_enc_data_in_V_keep_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_keep_V_0_data_out = axis_enc_data_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_last_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_data_out = axis_enc_data_in_V_last_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_last_V_0_data_out = axis_enc_data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_275_p0 = tmp_s_reg_1037;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_275_p0 = tmp_s_fu_508_p3;
    end else begin
        grp_fu_275_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state96)) begin
        grp_fu_275_p1 = tmp_97_reg_1043;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        grp_fu_275_p1 = tmp_97_fu_516_p2;
    end else begin
        grp_fu_275_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_279_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            if (((1'b1 == ap_CS_fsm_state94) & (exitcond_fu_492_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state98;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state95 : begin
            if (((grp_operator_s_fu_262_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state95))) begin
                ap_NS_fsm = ap_ST_fsm_state96;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state95;
            end
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            if (((1'b1 == ap_CS_fsm_state110) & (tmp_262_fu_759_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state111 : begin
            if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state111))) begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state111;
            end
        end
        ap_ST_fsm_state112 : begin
            if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state112_io)) & (1'b1 == ap_CS_fsm_state112) & ((axis_dec_data_out_it_2_reg_1124 == 1'd1) | (tmp_262_reg_1089 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state112_io)) & (1'b1 == ap_CS_fsm_state112) & (axis_dec_data_out_it_2_reg_1124 == 1'd0) & (tmp_262_reg_1089 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state110;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state112;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_NS_fsm_state4 = ap_NS_fsm[32'd3];

assign ap_NS_fsm_state98 = ap_NS_fsm[32'd97];

always @ (*) begin
    ap_block_state112 = ((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state112_io = ((axis_dec_data_out_V_data_V_1_ack_in == 1'b0) & (tmp_262_reg_1089 == 1'd0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axis_dec_data_out_TDATA = axis_dec_data_out_V_data_V_1_data_out;

assign axis_dec_data_out_TKEEP = axis_dec_data_out_V_keep_V_1_data_out;

assign axis_dec_data_out_TLAST = axis_dec_data_out_V_last_V_1_data_out;

assign axis_dec_data_out_TVALID = axis_dec_data_out_V_last_V_1_state[1'd0];

assign axis_dec_data_out_V_data_V_1_ack_in = axis_dec_data_out_V_data_V_1_state[1'd1];

assign axis_dec_data_out_V_data_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_data_V_1_load_A = (~axis_dec_data_out_V_data_V_1_sel_wr & axis_dec_data_out_V_data_V_1_state_cmp_full);

assign axis_dec_data_out_V_data_V_1_load_B = (axis_dec_data_out_V_data_V_1_state_cmp_full & axis_dec_data_out_V_data_V_1_sel_wr);

assign axis_dec_data_out_V_data_V_1_sel = axis_dec_data_out_V_data_V_1_sel_rd;

assign axis_dec_data_out_V_data_V_1_state_cmp_full = ((axis_dec_data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_data_V_1_vld_out = axis_dec_data_out_V_data_V_1_state[1'd0];

assign axis_dec_data_out_V_keep_V_1_ack_in = axis_dec_data_out_V_keep_V_1_state[1'd1];

assign axis_dec_data_out_V_keep_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_keep_V_1_load_A = (~axis_dec_data_out_V_keep_V_1_sel_wr & axis_dec_data_out_V_keep_V_1_state_cmp_full);

assign axis_dec_data_out_V_keep_V_1_load_B = (axis_dec_data_out_V_keep_V_1_state_cmp_full & axis_dec_data_out_V_keep_V_1_sel_wr);

assign axis_dec_data_out_V_keep_V_1_sel = axis_dec_data_out_V_keep_V_1_sel_rd;

assign axis_dec_data_out_V_keep_V_1_state_cmp_full = ((axis_dec_data_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_keep_V_1_vld_out = axis_dec_data_out_V_keep_V_1_state[1'd0];

assign axis_dec_data_out_V_last_V_1_ack_in = axis_dec_data_out_V_last_V_1_state[1'd1];

assign axis_dec_data_out_V_last_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_last_V_1_load_A = (~axis_dec_data_out_V_last_V_1_sel_wr & axis_dec_data_out_V_last_V_1_state_cmp_full);

assign axis_dec_data_out_V_last_V_1_load_B = (axis_dec_data_out_V_last_V_1_state_cmp_full & axis_dec_data_out_V_last_V_1_sel_wr);

assign axis_dec_data_out_V_last_V_1_sel = axis_dec_data_out_V_last_V_1_sel_rd;

assign axis_dec_data_out_V_last_V_1_state_cmp_full = ((axis_dec_data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_last_V_1_vld_out = axis_dec_data_out_V_last_V_1_state[1'd0];

assign axis_dec_data_out_it_fu_909_p1 = tmp_279_fu_904_p2[31:0];

assign axis_enc_data_in_TREADY = axis_enc_data_in_V_last_V_0_state[1'd1];

assign axis_enc_data_in_V_data_V_0_ack_in = axis_enc_data_in_V_data_V_0_state[1'd1];

assign axis_enc_data_in_V_data_V_0_load_A = (~axis_enc_data_in_V_data_V_0_sel_wr & axis_enc_data_in_V_data_V_0_state_cmp_full);

assign axis_enc_data_in_V_data_V_0_load_B = (axis_enc_data_in_V_data_V_0_state_cmp_full & axis_enc_data_in_V_data_V_0_sel_wr);

assign axis_enc_data_in_V_data_V_0_sel = axis_enc_data_in_V_data_V_0_sel_rd;

assign axis_enc_data_in_V_data_V_0_state_cmp_full = ((axis_enc_data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_data_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_data_V_0_vld_out = axis_enc_data_in_V_data_V_0_state[1'd0];

assign axis_enc_data_in_V_keep_V_0_ack_in = axis_enc_data_in_V_keep_V_0_state[1'd1];

assign axis_enc_data_in_V_keep_V_0_load_A = (~axis_enc_data_in_V_keep_V_0_sel_wr & axis_enc_data_in_V_keep_V_0_state_cmp_full);

assign axis_enc_data_in_V_keep_V_0_load_B = (axis_enc_data_in_V_keep_V_0_state_cmp_full & axis_enc_data_in_V_keep_V_0_sel_wr);

assign axis_enc_data_in_V_keep_V_0_sel = axis_enc_data_in_V_keep_V_0_sel_rd;

assign axis_enc_data_in_V_keep_V_0_state_cmp_full = ((axis_enc_data_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_keep_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_keep_V_0_vld_out = axis_enc_data_in_V_keep_V_0_state[1'd0];

assign axis_enc_data_in_V_last_V_0_ack_in = axis_enc_data_in_V_last_V_0_state[1'd1];

assign axis_enc_data_in_V_last_V_0_load_A = (~axis_enc_data_in_V_last_V_0_sel_wr & axis_enc_data_in_V_last_V_0_state_cmp_full);

assign axis_enc_data_in_V_last_V_0_load_B = (axis_enc_data_in_V_last_V_0_state_cmp_full & axis_enc_data_in_V_last_V_0_sel_wr);

assign axis_enc_data_in_V_last_V_0_sel = axis_enc_data_in_V_last_V_0_sel_rd;

assign axis_enc_data_in_V_last_V_0_state_cmp_full = ((axis_enc_data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_last_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_last_V_0_vld_out = axis_enc_data_in_V_last_V_0_state[1'd0];

assign dec_data_in_V_fu_753_p2 = (tmp_260_fu_747_p2 | tmp_259_fu_741_p2);

assign enc_data_in_V_fu_486_p2 = (tmp_300_fu_480_p2 | tmp_299_fu_474_p2);

assign exitcond2_fu_279_p2 = ((i_reg_201 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_492_p2 = ((i5_reg_224 == 2'd2) ? 1'b1 : 1'b0);

assign grp_decoder_fu_252_ap_start = grp_decoder_fu_252_ap_start_reg;

assign grp_encoder_fu_246_ap_start = grp_encoder_fu_246_ap_start_reg;

assign grp_fu_275_p2 = ((grp_fu_275_p0 > grp_fu_275_p1) ? 1'b1 : 1'b0);

assign grp_operator_s_fu_262_ap_start = grp_operator_s_fu_262_ap_start_reg;

assign i_2_fu_285_p2 = (i_reg_201 + 3'd1);

assign i_3_fu_498_p2 = (i5_reg_224 + 2'd1);

assign i_4_fu_767_p2 = (i6_reg_235 + 3'd1);

assign p_Val2_8_fu_626_p2 = ($signed(tmp_85_fu_615_p3) + $signed(tmp_86_cast_fu_623_p1));

assign p_Val2_s_fu_611_p1 = tmp_239_fu_606_p2[31:0];

assign p_demorgan3_fu_729_p2 = (tmp_257_fu_723_p2 & tmp_256_fu_717_p2);

assign p_demorgan_fu_462_p2 = (tmp_297_fu_456_p2 & tmp_296_fu_450_p2);

assign tmp_100_fu_347_p3 = {{tmp_reg_1003}, {5'd0}};

assign tmp_101_fu_354_p2 = (tmp_100_fu_347_p3 | 7'd31);

assign tmp_223_fu_504_p1 = i5_reg_224[0:0];

assign tmp_225_fu_523_p1 = tmp_s_fu_508_p3;

assign tmp_226_fu_527_p1 = tmp_97_fu_516_p2;

integer ap_tvar_int_0;

always @ (enc_data_out_V_reg_1013) begin
    for (ap_tvar_int_0 = 64 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 63 - 0) begin
            tmp_227_fu_531_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_227_fu_531_p4[ap_tvar_int_0] = enc_data_out_V_reg_1013[63 - ap_tvar_int_0];
        end
    end
end

assign tmp_228_fu_540_p2 = (tmp_225_fu_523_p1 - tmp_226_fu_527_p1);

assign tmp_229_fu_546_p2 = (tmp_225_fu_523_p1 ^ 7'd63);

assign tmp_230_fu_552_p2 = (tmp_226_fu_527_p1 - tmp_225_fu_523_p1);

assign tmp_231_fu_558_p3 = ((grp_fu_275_p2[0:0] === 1'b1) ? tmp_228_fu_540_p2 : tmp_230_fu_552_p2);

assign tmp_232_fu_566_p3 = ((grp_fu_275_p2[0:0] === 1'b1) ? tmp_227_fu_531_p4 : enc_data_out_V_reg_1013);

assign tmp_233_fu_573_p3 = ((grp_fu_275_p2[0:0] === 1'b1) ? tmp_229_fu_546_p2 : tmp_225_fu_523_p1);

assign tmp_234_fu_581_p2 = (7'd63 - tmp_231_fu_558_p3);

assign tmp_235_fu_587_p1 = tmp_233_fu_573_p3;

assign tmp_236_fu_597_p1 = tmp_234_reg_1049;

assign tmp_237_fu_591_p2 = tmp_232_fu_566_p3 >> tmp_235_fu_587_p1;

assign tmp_238_fu_600_p2 = 64'd18446744073709551615 >> tmp_236_fu_597_p1;

assign tmp_239_fu_606_p2 = (tmp_238_fu_600_p2 & tmp_237_reg_1054);

assign tmp_242_fu_642_p1 = tmp_s_reg_1037;

assign tmp_243_fu_673_p1 = tmp_97_reg_1043;

assign tmp_244_fu_645_p1 = tmp_88_fu_632_p4;

assign tmp_245_fu_649_p2 = (tmp_242_fu_642_p1 ^ 7'd63);

assign tmp_246_fu_676_p3 = ((tmp_241_reg_1059[0:0] === 1'b1) ? tmp_242_reg_1066 : tmp_243_fu_673_p1);

assign tmp_247_fu_682_p3 = ((tmp_241_reg_1059[0:0] === 1'b1) ? tmp_243_fu_673_p1 : tmp_242_reg_1066);

assign tmp_248_fu_655_p3 = ((grp_fu_275_p2[0:0] === 1'b1) ? tmp_245_fu_649_p2 : tmp_242_fu_642_p1);

assign tmp_249_fu_688_p2 = (tmp_246_fu_676_p3 ^ 7'd63);

assign tmp_250_fu_663_p1 = tmp_248_fu_655_p3;

assign tmp_251_fu_694_p1 = tmp_247_fu_682_p3;

assign tmp_252_fu_698_p1 = tmp_249_fu_688_p2;

assign tmp_253_fu_667_p2 = tmp_244_fu_645_p1 << tmp_250_fu_663_p1;

integer ap_tvar_int_1;

always @ (tmp_253_reg_1072) begin
    for (ap_tvar_int_1 = 64 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 63 - 0) begin
            tmp_254_fu_702_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_254_fu_702_p4[ap_tvar_int_1] = tmp_253_reg_1072[63 - ap_tvar_int_1];
        end
    end
end

assign tmp_255_fu_711_p3 = ((tmp_241_reg_1059[0:0] === 1'b1) ? tmp_254_fu_702_p4 : tmp_253_reg_1072);

assign tmp_256_fu_717_p2 = 64'd18446744073709551615 << tmp_251_fu_694_p1;

assign tmp_257_fu_723_p2 = 64'd18446744073709551615 >> tmp_252_fu_698_p1;

assign tmp_258_fu_735_p2 = (p_demorgan3_fu_729_p2 ^ 64'd18446744073709551615);

assign tmp_259_fu_741_p2 = (tmp_258_fu_735_p2 & dec_data_in_V_s_reg_212);

assign tmp_260_fu_747_p2 = (tmp_255_fu_711_p3 & p_demorgan3_fu_729_p2);

assign tmp_262_fu_759_p3 = i6_reg_235[32'd2];

assign tmp_263_fu_773_p1 = i6_reg_235[1:0];

assign tmp_264_fu_791_p2 = ((tmp_98_fu_777_p3 > tmp_99_fu_785_p2) ? 1'b1 : 1'b0);

assign tmp_265_fu_797_p1 = tmp_98_fu_777_p3;

assign tmp_266_fu_801_p1 = tmp_99_fu_785_p2;

integer ap_tvar_int_2;

always @ (dec_data_out_V_reg_1083) begin
    for (ap_tvar_int_2 = 128 - 1; ap_tvar_int_2 >= 0; ap_tvar_int_2 = ap_tvar_int_2 - 1) begin
        if (ap_tvar_int_2 > 127 - 0) begin
            tmp_267_fu_805_p4[ap_tvar_int_2] = 1'b0;
        end else begin
            tmp_267_fu_805_p4[ap_tvar_int_2] = dec_data_out_V_reg_1083[127 - ap_tvar_int_2];
        end
    end
end

assign tmp_268_fu_814_p2 = (tmp_265_fu_797_p1 - tmp_266_fu_801_p1);

assign tmp_269_fu_820_p2 = (tmp_265_fu_797_p1 ^ 8'd127);

assign tmp_270_fu_826_p2 = (tmp_266_fu_801_p1 - tmp_265_fu_797_p1);

assign tmp_271_fu_832_p3 = ((tmp_264_fu_791_p2[0:0] === 1'b1) ? tmp_268_fu_814_p2 : tmp_270_fu_826_p2);

assign tmp_272_fu_840_p3 = ((tmp_264_fu_791_p2[0:0] === 1'b1) ? tmp_267_fu_805_p4 : dec_data_out_V_reg_1083);

assign tmp_273_fu_847_p3 = ((tmp_264_fu_791_p2[0:0] === 1'b1) ? tmp_269_fu_820_p2 : tmp_265_fu_797_p1);

assign tmp_274_fu_855_p2 = (8'd127 - tmp_271_fu_832_p3);

assign tmp_275_fu_861_p1 = tmp_273_fu_847_p3;

assign tmp_276_fu_895_p1 = tmp_274_reg_1104;

assign tmp_277_fu_865_p2 = tmp_272_fu_840_p3 >> tmp_275_fu_861_p1;

assign tmp_278_fu_898_p2 = 128'd340282366920938463463374607431768211455 >> tmp_276_fu_895_p1;

assign tmp_279_fu_904_p2 = (tmp_278_fu_898_p2 & tmp_277_reg_1109);

assign tmp_281_fu_360_p2 = ((tmp_100_fu_347_p3 > tmp_101_fu_354_p2) ? 1'b1 : 1'b0);

assign tmp_282_fu_366_p1 = tmp_100_fu_347_p3;

assign tmp_283_fu_370_p1 = tmp_101_fu_354_p2;

assign tmp_284_fu_374_p1 = axis_enc_data_in_V_data_V_0_data_out;

assign tmp_285_fu_378_p2 = (tmp_282_fu_366_p1 ^ 8'd127);

assign tmp_286_fu_384_p3 = ((tmp_281_fu_360_p2[0:0] === 1'b1) ? tmp_282_fu_366_p1 : tmp_283_fu_370_p1);

assign tmp_287_fu_392_p3 = ((tmp_281_fu_360_p2[0:0] === 1'b1) ? tmp_283_fu_370_p1 : tmp_282_fu_366_p1);

assign tmp_288_fu_400_p3 = ((tmp_281_fu_360_p2[0:0] === 1'b1) ? tmp_285_fu_378_p2 : tmp_282_fu_366_p1);

assign tmp_289_fu_408_p2 = (tmp_286_fu_384_p3 ^ 8'd127);

assign tmp_290_fu_414_p1 = tmp_288_fu_400_p3;

assign tmp_291_fu_418_p1 = tmp_287_fu_392_p3;

assign tmp_292_fu_422_p1 = tmp_289_fu_408_p2;

assign tmp_293_fu_426_p2 = tmp_284_fu_374_p1 << tmp_290_fu_414_p1;

integer ap_tvar_int_3;

always @ (tmp_293_fu_426_p2) begin
    for (ap_tvar_int_3 = 128 - 1; ap_tvar_int_3 >= 0; ap_tvar_int_3 = ap_tvar_int_3 - 1) begin
        if (ap_tvar_int_3 > 127 - 0) begin
            tmp_294_fu_432_p4[ap_tvar_int_3] = 1'b0;
        end else begin
            tmp_294_fu_432_p4[ap_tvar_int_3] = tmp_293_fu_426_p2[127 - ap_tvar_int_3];
        end
    end
end

assign tmp_295_fu_442_p3 = ((tmp_281_fu_360_p2[0:0] === 1'b1) ? tmp_294_fu_432_p4 : tmp_293_fu_426_p2);

assign tmp_296_fu_450_p2 = 128'd340282366920938463463374607431768211455 << tmp_291_fu_418_p1;

assign tmp_297_fu_456_p2 = 128'd340282366920938463463374607431768211455 >> tmp_292_fu_422_p1;

assign tmp_298_fu_468_p2 = (p_demorgan_fu_462_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_299_fu_474_p2 = (tmp_298_fu_468_p2 & enc_data_in_V_s_reg_189);

assign tmp_300_fu_480_p2 = (tmp_295_fu_442_p3 & p_demorgan_fu_462_p2);

assign tmp_85_fu_615_p3 = {{p_Val2_s_fu_611_p1}, {6'd0}};

assign tmp_86_cast_fu_623_p1 = $signed(noise_V_reg_1032);

assign tmp_88_fu_632_p4 = {{p_Val2_8_fu_626_p2[37:6]}};

assign tmp_97_fu_516_p2 = (tmp_s_fu_508_p3 | 6'd31);

assign tmp_98_fu_777_p3 = {{tmp_263_fu_773_p1}, {5'd0}};

assign tmp_99_fu_785_p2 = (tmp_98_fu_777_p3 | 7'd31);

assign tmp_fu_291_p1 = i_reg_201[1:0];

assign tmp_s_fu_508_p3 = {{tmp_223_reg_1027}, {5'd0}};

always @ (posedge ap_clk) begin
    tmp_s_reg_1037[4:0] <= 5'b00000;
    tmp_97_reg_1043[4:0] <= 5'b11111;
    tmp_234_reg_1049[0] <= 1'b0;
    tmp_242_reg_1066[4:0] <= 5'b00000;
    tmp_242_reg_1066[6] <= 1'b0;
    tmp_274_reg_1104[0] <= 1'b0;
end

endmodule //encoder_decoder
