// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="encoder_decoder,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.940000,HLS_SYN_LAT=213,HLS_SYN_TPT=none,HLS_SYN_MEM=27,HLS_SYN_DSP=218,HLS_SYN_FF=31726,HLS_SYN_LUT=34287,HLS_VERSION=2018_2}" *)

module encoder_decoder (
        ap_clk,
        ap_rst_n,
        axis_enc_data_in_TDATA,
        axis_enc_data_in_TVALID,
        axis_enc_data_in_TREADY,
        axis_enc_data_in_TKEEP,
        axis_enc_data_in_TUSER,
        axis_enc_data_in_TLAST,
        axis_dec_data_out_TDATA,
        axis_dec_data_out_TVALID,
        axis_dec_data_out_TREADY,
        axis_dec_data_out_TKEEP,
        axis_dec_data_out_TUSER,
        axis_dec_data_out_TLAST,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 128'd1;
parameter    ap_ST_fsm_state2 = 128'd2;
parameter    ap_ST_fsm_state3 = 128'd4;
parameter    ap_ST_fsm_state4 = 128'd8;
parameter    ap_ST_fsm_state5 = 128'd16;
parameter    ap_ST_fsm_state6 = 128'd32;
parameter    ap_ST_fsm_state7 = 128'd64;
parameter    ap_ST_fsm_state8 = 128'd128;
parameter    ap_ST_fsm_state9 = 128'd256;
parameter    ap_ST_fsm_state10 = 128'd512;
parameter    ap_ST_fsm_state11 = 128'd1024;
parameter    ap_ST_fsm_state12 = 128'd2048;
parameter    ap_ST_fsm_state13 = 128'd4096;
parameter    ap_ST_fsm_state14 = 128'd8192;
parameter    ap_ST_fsm_state15 = 128'd16384;
parameter    ap_ST_fsm_state16 = 128'd32768;
parameter    ap_ST_fsm_state17 = 128'd65536;
parameter    ap_ST_fsm_state18 = 128'd131072;
parameter    ap_ST_fsm_state19 = 128'd262144;
parameter    ap_ST_fsm_state20 = 128'd524288;
parameter    ap_ST_fsm_state21 = 128'd1048576;
parameter    ap_ST_fsm_state22 = 128'd2097152;
parameter    ap_ST_fsm_state23 = 128'd4194304;
parameter    ap_ST_fsm_state24 = 128'd8388608;
parameter    ap_ST_fsm_state25 = 128'd16777216;
parameter    ap_ST_fsm_state26 = 128'd33554432;
parameter    ap_ST_fsm_state27 = 128'd67108864;
parameter    ap_ST_fsm_state28 = 128'd134217728;
parameter    ap_ST_fsm_state29 = 128'd268435456;
parameter    ap_ST_fsm_state30 = 128'd536870912;
parameter    ap_ST_fsm_state31 = 128'd1073741824;
parameter    ap_ST_fsm_state32 = 128'd2147483648;
parameter    ap_ST_fsm_state33 = 128'd4294967296;
parameter    ap_ST_fsm_state34 = 128'd8589934592;
parameter    ap_ST_fsm_state35 = 128'd17179869184;
parameter    ap_ST_fsm_state36 = 128'd34359738368;
parameter    ap_ST_fsm_state37 = 128'd68719476736;
parameter    ap_ST_fsm_state38 = 128'd137438953472;
parameter    ap_ST_fsm_state39 = 128'd274877906944;
parameter    ap_ST_fsm_state40 = 128'd549755813888;
parameter    ap_ST_fsm_state41 = 128'd1099511627776;
parameter    ap_ST_fsm_state42 = 128'd2199023255552;
parameter    ap_ST_fsm_state43 = 128'd4398046511104;
parameter    ap_ST_fsm_state44 = 128'd8796093022208;
parameter    ap_ST_fsm_state45 = 128'd17592186044416;
parameter    ap_ST_fsm_state46 = 128'd35184372088832;
parameter    ap_ST_fsm_state47 = 128'd70368744177664;
parameter    ap_ST_fsm_state48 = 128'd140737488355328;
parameter    ap_ST_fsm_state49 = 128'd281474976710656;
parameter    ap_ST_fsm_state50 = 128'd562949953421312;
parameter    ap_ST_fsm_state51 = 128'd1125899906842624;
parameter    ap_ST_fsm_state52 = 128'd2251799813685248;
parameter    ap_ST_fsm_state53 = 128'd4503599627370496;
parameter    ap_ST_fsm_state54 = 128'd9007199254740992;
parameter    ap_ST_fsm_state55 = 128'd18014398509481984;
parameter    ap_ST_fsm_state56 = 128'd36028797018963968;
parameter    ap_ST_fsm_state57 = 128'd72057594037927936;
parameter    ap_ST_fsm_state58 = 128'd144115188075855872;
parameter    ap_ST_fsm_state59 = 128'd288230376151711744;
parameter    ap_ST_fsm_state60 = 128'd576460752303423488;
parameter    ap_ST_fsm_state61 = 128'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 128'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 128'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 128'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 128'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 128'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 128'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 128'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 128'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 128'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 128'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 128'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 128'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 128'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 128'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 128'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 128'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 128'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 128'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 128'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 128'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 128'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 128'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 128'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 128'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 128'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 128'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 128'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 128'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 128'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 128'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 128'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 128'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 128'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 128'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 128'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 128'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 128'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 128'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 128'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 128'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 128'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 128'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 128'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 128'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 128'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 128'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 128'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 128'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 128'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 128'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 128'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 128'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 128'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 128'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 128'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 128'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 128'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 128'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 128'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 128'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 128'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 128'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 128'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 128'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 128'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 128'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 128'd170141183460469231731687303715884105728;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [31:0] axis_enc_data_in_TDATA;
input   axis_enc_data_in_TVALID;
output   axis_enc_data_in_TREADY;
input  [3:0] axis_enc_data_in_TKEEP;
input  [31:0] axis_enc_data_in_TUSER;
input  [0:0] axis_enc_data_in_TLAST;
output  [31:0] axis_dec_data_out_TDATA;
output   axis_dec_data_out_TVALID;
input   axis_dec_data_out_TREADY;
output  [3:0] axis_dec_data_out_TKEEP;
output  [31:0] axis_dec_data_out_TUSER;
output  [0:0] axis_dec_data_out_TLAST;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [127:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [31:0] axis_enc_data_in_V_data_V_0_data_out;
wire    axis_enc_data_in_V_data_V_0_vld_in;
wire    axis_enc_data_in_V_data_V_0_vld_out;
wire    axis_enc_data_in_V_data_V_0_ack_in;
reg    axis_enc_data_in_V_data_V_0_ack_out;
reg   [31:0] axis_enc_data_in_V_data_V_0_payload_A;
reg   [31:0] axis_enc_data_in_V_data_V_0_payload_B;
reg    axis_enc_data_in_V_data_V_0_sel_rd;
reg    axis_enc_data_in_V_data_V_0_sel_wr;
wire    axis_enc_data_in_V_data_V_0_sel;
wire    axis_enc_data_in_V_data_V_0_load_A;
wire    axis_enc_data_in_V_data_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_data_V_0_state;
wire    axis_enc_data_in_V_data_V_0_state_cmp_full;
reg   [3:0] axis_enc_data_in_V_keep_V_0_data_out;
wire    axis_enc_data_in_V_keep_V_0_vld_in;
wire    axis_enc_data_in_V_keep_V_0_vld_out;
wire    axis_enc_data_in_V_keep_V_0_ack_in;
reg    axis_enc_data_in_V_keep_V_0_ack_out;
reg   [3:0] axis_enc_data_in_V_keep_V_0_payload_A;
reg   [3:0] axis_enc_data_in_V_keep_V_0_payload_B;
reg    axis_enc_data_in_V_keep_V_0_sel_rd;
reg    axis_enc_data_in_V_keep_V_0_sel_wr;
wire    axis_enc_data_in_V_keep_V_0_sel;
wire    axis_enc_data_in_V_keep_V_0_load_A;
wire    axis_enc_data_in_V_keep_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_keep_V_0_state;
wire    axis_enc_data_in_V_keep_V_0_state_cmp_full;
reg   [31:0] axis_enc_data_in_V_user_V_0_data_out;
wire    axis_enc_data_in_V_user_V_0_vld_in;
wire    axis_enc_data_in_V_user_V_0_vld_out;
wire    axis_enc_data_in_V_user_V_0_ack_in;
reg    axis_enc_data_in_V_user_V_0_ack_out;
reg   [31:0] axis_enc_data_in_V_user_V_0_payload_A;
reg   [31:0] axis_enc_data_in_V_user_V_0_payload_B;
reg    axis_enc_data_in_V_user_V_0_sel_rd;
reg    axis_enc_data_in_V_user_V_0_sel_wr;
wire    axis_enc_data_in_V_user_V_0_sel;
wire    axis_enc_data_in_V_user_V_0_load_A;
wire    axis_enc_data_in_V_user_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_user_V_0_state;
wire    axis_enc_data_in_V_user_V_0_state_cmp_full;
reg   [0:0] axis_enc_data_in_V_last_V_0_data_out;
wire    axis_enc_data_in_V_last_V_0_vld_in;
wire    axis_enc_data_in_V_last_V_0_vld_out;
wire    axis_enc_data_in_V_last_V_0_ack_in;
reg    axis_enc_data_in_V_last_V_0_ack_out;
reg   [0:0] axis_enc_data_in_V_last_V_0_payload_A;
reg   [0:0] axis_enc_data_in_V_last_V_0_payload_B;
reg    axis_enc_data_in_V_last_V_0_sel_rd;
reg    axis_enc_data_in_V_last_V_0_sel_wr;
wire    axis_enc_data_in_V_last_V_0_sel;
wire    axis_enc_data_in_V_last_V_0_load_A;
wire    axis_enc_data_in_V_last_V_0_load_B;
reg   [1:0] axis_enc_data_in_V_last_V_0_state;
wire    axis_enc_data_in_V_last_V_0_state_cmp_full;
reg   [31:0] axis_dec_data_out_V_data_V_1_data_out;
reg    axis_dec_data_out_V_data_V_1_vld_in;
wire    axis_dec_data_out_V_data_V_1_vld_out;
wire    axis_dec_data_out_V_data_V_1_ack_in;
wire    axis_dec_data_out_V_data_V_1_ack_out;
reg   [31:0] axis_dec_data_out_V_data_V_1_payload_A;
reg   [31:0] axis_dec_data_out_V_data_V_1_payload_B;
reg    axis_dec_data_out_V_data_V_1_sel_rd;
reg    axis_dec_data_out_V_data_V_1_sel_wr;
wire    axis_dec_data_out_V_data_V_1_sel;
wire    axis_dec_data_out_V_data_V_1_load_A;
wire    axis_dec_data_out_V_data_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_data_V_1_state;
wire    axis_dec_data_out_V_data_V_1_state_cmp_full;
reg   [3:0] axis_dec_data_out_V_keep_V_1_data_out;
reg    axis_dec_data_out_V_keep_V_1_vld_in;
wire    axis_dec_data_out_V_keep_V_1_vld_out;
wire    axis_dec_data_out_V_keep_V_1_ack_in;
wire    axis_dec_data_out_V_keep_V_1_ack_out;
reg   [3:0] axis_dec_data_out_V_keep_V_1_payload_A;
reg   [3:0] axis_dec_data_out_V_keep_V_1_payload_B;
reg    axis_dec_data_out_V_keep_V_1_sel_rd;
reg    axis_dec_data_out_V_keep_V_1_sel_wr;
wire    axis_dec_data_out_V_keep_V_1_sel;
wire    axis_dec_data_out_V_keep_V_1_load_A;
wire    axis_dec_data_out_V_keep_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_keep_V_1_state;
wire    axis_dec_data_out_V_keep_V_1_state_cmp_full;
reg   [31:0] axis_dec_data_out_V_user_V_1_data_out;
reg    axis_dec_data_out_V_user_V_1_vld_in;
wire    axis_dec_data_out_V_user_V_1_vld_out;
wire    axis_dec_data_out_V_user_V_1_ack_in;
wire    axis_dec_data_out_V_user_V_1_ack_out;
reg   [31:0] axis_dec_data_out_V_user_V_1_payload_A;
reg   [31:0] axis_dec_data_out_V_user_V_1_payload_B;
reg    axis_dec_data_out_V_user_V_1_sel_rd;
reg    axis_dec_data_out_V_user_V_1_sel_wr;
wire    axis_dec_data_out_V_user_V_1_sel;
wire    axis_dec_data_out_V_user_V_1_load_A;
wire    axis_dec_data_out_V_user_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_user_V_1_state;
wire    axis_dec_data_out_V_user_V_1_state_cmp_full;
reg   [0:0] axis_dec_data_out_V_last_V_1_data_out;
reg    axis_dec_data_out_V_last_V_1_vld_in;
wire    axis_dec_data_out_V_last_V_1_vld_out;
wire    axis_dec_data_out_V_last_V_1_ack_in;
wire    axis_dec_data_out_V_last_V_1_ack_out;
reg   [0:0] axis_dec_data_out_V_last_V_1_payload_A;
reg   [0:0] axis_dec_data_out_V_last_V_1_payload_B;
reg    axis_dec_data_out_V_last_V_1_sel_rd;
reg    axis_dec_data_out_V_last_V_1_sel_wr;
wire    axis_dec_data_out_V_last_V_1_sel;
wire    axis_dec_data_out_V_last_V_1_load_A;
wire    axis_dec_data_out_V_last_V_1_load_B;
reg   [1:0] axis_dec_data_out_V_last_V_1_state;
wire    axis_dec_data_out_V_last_V_1_state_cmp_full;
wire   [7:0] SNR_REG_V;
wire   [31:0] AWGN_EN_REG;
reg   [127:0] uut_lfsr128_V;
reg   [127:0] uut_lfsr128_V_1;
reg    axis_enc_data_in_TDATA_blk_n;
wire    ap_CS_fsm_state8;
reg    axis_dec_data_out_TDATA_blk_n;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state128;
reg   [0:0] tmp_225_reg_1087;
reg   [31:0] AWGN_EN_REG_read_reg_967;
reg   [7:0] snr_sample_stream_V_s_din;
wire    snr_sample_stream_V_s_full_n;
reg    snr_sample_stream_V_s_write;
reg    ap_block_state1;
reg   [7:0] tmp_V_reg_972;
reg   [7:0] tmp_V_8_reg_1008;
wire    ap_CS_fsm_state2;
wire   [7:0] snr_sample_stream_V_s_dout;
wire    snr_sample_stream_V_s_empty_n;
reg    snr_sample_stream_V_s_read;
reg    ap_block_state2;
wire    ap_CS_fsm_state3;
reg   [7:0] tmp_V_10_reg_1018;
reg   [25:0] noiseSample_V_reg_1028;
wire    ap_CS_fsm_state4;
wire    grp_operator_s_fu_324_ap_idle;
wire    grp_operator_s_fu_324_ap_ready;
wire    grp_operator_s_fu_324_ap_done;
wire    grp_operator_s_fu_336_ap_idle;
wire    grp_operator_s_fu_336_ap_ready;
wire    grp_operator_s_fu_336_ap_done;
reg    ap_block_state4_on_subcall_done;
reg   [25:0] noiseSample_V_1_reg_1033;
reg   [25:0] tmp_V_9_reg_1038;
wire    ap_CS_fsm_state6;
wire   [25:0] noise_sample_stream0_1_dout;
wire    noise_sample_stream0_1_empty_n;
reg    noise_sample_stream0_1_read;
wire   [25:0] noise_sample_stream1_1_dout;
wire    noise_sample_stream1_1_empty_n;
reg    noise_sample_stream1_1_read;
reg    ap_block_state6;
reg   [25:0] tmp_V_11_reg_1043;
wire   [2:0] i_2_fu_393_p2;
reg   [2:0] i_2_reg_1051;
wire    ap_CS_fsm_state7;
wire   [1:0] tmp_224_fu_399_p1;
reg   [1:0] tmp_224_reg_1056;
wire   [0:0] exitcond_fu_387_p2;
wire   [0:0] tmp_s_fu_403_p2;
reg   [0:0] tmp_s_reg_1061;
wire   [63:0] grp_encoder_fu_310_ap_return;
reg   [63:0] enc_data_out_V_reg_1066;
wire    ap_CS_fsm_state108;
wire   [31:0] p_Val2_s_fu_637_p1;
reg   [31:0] p_Val2_s_reg_1071;
reg   [31:0] p_Val2_8_reg_1076;
wire   [127:0] grp_decoder_fu_315_ap_return;
reg   [127:0] dec_data_out_V_reg_1081;
wire    ap_CS_fsm_state125;
wire   [0:0] tmp_225_fu_686_p3;
wire    ap_CS_fsm_state126;
wire   [2:0] i_3_fu_694_p2;
reg   [2:0] i_3_reg_1091;
wire   [1:0] tmp_226_fu_700_p1;
reg   [1:0] tmp_226_reg_1096;
wire   [7:0] tmp_237_fu_782_p2;
reg   [7:0] tmp_237_reg_1103;
wire   [127:0] tmp_240_fu_792_p2;
reg   [127:0] tmp_240_reg_1108;
wire   [31:0] axis_dec_data_out_it_fu_848_p1;
wire   [3:0] axis_dec_data_out_it_1_fu_853_p6;
wire   [0:0] axis_dec_data_out_it_2_fu_867_p6;
reg   [0:0] axis_dec_data_out_it_2_reg_1123;
wire   [31:0] axis_dec_data_out_it_3_fu_881_p6;
wire    grp_encoder_fu_310_ap_start;
wire    grp_encoder_fu_310_ap_done;
wire    grp_encoder_fu_310_ap_idle;
wire    grp_encoder_fu_310_ap_ready;
wire    grp_encoder_fu_310_data_V_blk_n;
wire    grp_decoder_fu_315_ap_start;
wire    grp_decoder_fu_315_ap_done;
wire    grp_decoder_fu_315_ap_idle;
wire    grp_decoder_fu_315_ap_ready;
wire    grp_decoder_fu_315_data_V_blk_n;
wire    grp_operator_s_fu_324_ap_start;
wire   [25:0] grp_operator_s_fu_324_ap_return_0;
wire   [127:0] grp_operator_s_fu_324_ap_return_1;
wire    grp_operator_s_fu_336_ap_start;
wire   [25:0] grp_operator_s_fu_336_ap_return_0;
wire   [127:0] grp_operator_s_fu_336_ap_return_1;
reg   [2:0] i_reg_288;
reg   [2:0] i5_reg_299;
reg    ap_block_state128;
reg    ap_block_state128_io;
reg    grp_encoder_fu_310_ap_start_reg;
reg   [127:0] ap_NS_fsm;
wire    ap_NS_fsm_state9;
reg   [127:0] enc_data_in_V_fu_194;
wire    ap_CS_fsm_state9;
reg    grp_decoder_fu_315_ap_start_reg;
wire    ap_CS_fsm_state109;
wire    ap_NS_fsm_state110;
reg   [63:0] dec_data_in_V_fu_198;
wire    ap_CS_fsm_state110;
reg    grp_operator_s_fu_324_ap_start_reg;
reg    grp_operator_s_fu_336_ap_start_reg;
wire    noise_sample_stream0_1_full_n;
reg    noise_sample_stream0_1_write;
wire    ap_CS_fsm_state5;
wire    noise_sample_stream1_1_full_n;
reg    noise_sample_stream1_1_write;
reg    ap_block_state5;
reg   [3:0] tmp_keep_V_fu_146;
reg   [3:0] tmp_keep_V_1_fu_150;
reg   [3:0] tmp_keep_V_2_fu_154;
reg   [3:0] tmp_keep_V_3_fu_158;
reg   [31:0] tmp_user_V_fu_162;
reg   [31:0] tmp_user_V_1_fu_166;
reg   [31:0] tmp_user_V_2_fu_170;
reg   [31:0] tmp_user_V_3_fu_174;
reg   [0:0] tmp_last_V_fu_178;
reg   [0:0] tmp_last_V_1_fu_182;
reg   [0:0] tmp_last_V_2_fu_186;
reg   [0:0] tmp_last_V_3_fu_190;
wire   [127:0] enc_data_in_V_1_fu_626_p2;
wire   [63:0] dec_data_in_V_1_fu_675_p3;
wire   [6:0] tmp_100_fu_487_p3;
wire   [6:0] tmp_101_fu_494_p2;
wire   [7:0] tmp_245_fu_506_p1;
wire   [0:0] tmp_244_fu_500_p2;
wire   [7:0] tmp_246_fu_510_p1;
wire   [7:0] tmp_248_fu_518_p2;
wire   [7:0] tmp_249_fu_524_p3;
wire   [7:0] tmp_251_fu_540_p3;
wire   [7:0] tmp_250_fu_532_p3;
wire   [7:0] tmp_252_fu_548_p2;
wire   [127:0] tmp_247_fu_514_p1;
wire   [127:0] tmp_253_fu_554_p1;
wire   [127:0] tmp_256_fu_566_p2;
reg   [127:0] tmp_257_fu_572_p4;
wire   [127:0] tmp_254_fu_558_p1;
wire   [127:0] tmp_255_fu_562_p1;
wire   [127:0] tmp_259_fu_590_p2;
wire   [127:0] tmp_260_fu_596_p2;
wire   [127:0] p_demorgan_fu_602_p2;
wire   [127:0] tmp_261_fu_608_p2;
wire   [127:0] tmp_258_fu_582_p3;
wire   [127:0] tmp_262_fu_614_p2;
wire   [127:0] tmp_263_fu_620_p2;
wire  signed [31:0] tmp_85_fu_651_p1;
wire  signed [31:0] tmp_86_fu_659_p1;
wire   [31:0] p_Val2_2_fu_662_p2;
wire   [31:0] p_Val2_s_62_fu_654_p2;
wire   [63:0] tmp_fu_667_p3;
wire   [6:0] tmp_98_fu_704_p3;
wire   [6:0] tmp_99_fu_712_p2;
wire   [7:0] tmp_228_fu_724_p1;
wire   [7:0] tmp_229_fu_728_p1;
wire   [0:0] tmp_227_fu_718_p2;
wire   [7:0] tmp_231_fu_741_p2;
wire   [7:0] tmp_233_fu_753_p2;
reg   [127:0] tmp_230_fu_732_p4;
wire   [7:0] tmp_232_fu_747_p2;
wire   [7:0] tmp_234_fu_759_p3;
wire   [7:0] tmp_236_fu_774_p3;
wire   [127:0] tmp_235_fu_767_p3;
wire   [127:0] tmp_238_fu_788_p1;
wire   [127:0] tmp_239_fu_834_p1;
wire   [127:0] tmp_241_fu_837_p2;
wire   [127:0] tmp_242_fu_843_p2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 128'd1;
#0 axis_enc_data_in_V_data_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_data_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_data_V_0_state = 2'd0;
#0 axis_enc_data_in_V_keep_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_keep_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_keep_V_0_state = 2'd0;
#0 axis_enc_data_in_V_user_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_user_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_user_V_0_state = 2'd0;
#0 axis_enc_data_in_V_last_V_0_sel_rd = 1'b0;
#0 axis_enc_data_in_V_last_V_0_sel_wr = 1'b0;
#0 axis_enc_data_in_V_last_V_0_state = 2'd0;
#0 axis_dec_data_out_V_data_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_data_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_data_V_1_state = 2'd0;
#0 axis_dec_data_out_V_keep_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_keep_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_keep_V_1_state = 2'd0;
#0 axis_dec_data_out_V_user_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_user_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_user_V_1_state = 2'd0;
#0 axis_dec_data_out_V_last_V_1_sel_rd = 1'b0;
#0 axis_dec_data_out_V_last_V_1_sel_wr = 1'b0;
#0 axis_dec_data_out_V_last_V_1_state = 2'd0;
#0 uut_lfsr128_V = 128'd1512366075204170930279365292653862640;
#0 uut_lfsr128_V_1 = 128'd228367255636749529347312101941974493065;
#0 grp_encoder_fu_310_ap_start_reg = 1'b0;
#0 grp_decoder_fu_315_ap_start_reg = 1'b0;
#0 grp_operator_s_fu_324_ap_start_reg = 1'b0;
#0 grp_operator_s_fu_336_ap_start_reg = 1'b0;
end

encoder_decoder_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
encoder_decoder_ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .SNR_REG_V(SNR_REG_V),
    .AWGN_EN_REG(AWGN_EN_REG)
);

encoder grp_encoder_fu_310(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_encoder_fu_310_ap_start),
    .ap_done(grp_encoder_fu_310_ap_done),
    .ap_idle(grp_encoder_fu_310_ap_idle),
    .ap_ready(grp_encoder_fu_310_ap_ready),
    .data_V_ap_vld(1'b1),
    .data_V(enc_data_in_V_fu_194),
    .ap_return(grp_encoder_fu_310_ap_return),
    .data_V_blk_n(grp_encoder_fu_310_data_V_blk_n)
);

decoder grp_decoder_fu_315(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_decoder_fu_315_ap_start),
    .ap_done(grp_decoder_fu_315_ap_done),
    .ap_idle(grp_decoder_fu_315_ap_idle),
    .ap_ready(grp_decoder_fu_315_ap_ready),
    .data_V_ap_vld(1'b1),
    .data_V(dec_data_in_V_fu_198),
    .ap_return(grp_decoder_fu_315_ap_return),
    .data_V_blk_n(grp_decoder_fu_315_data_V_blk_n)
);

operator_s grp_operator_s_fu_324(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_operator_s_fu_324_ap_start),
    .ap_done(grp_operator_s_fu_324_ap_done),
    .ap_idle(grp_operator_s_fu_324_ap_idle),
    .ap_ready(grp_operator_s_fu_324_ap_ready),
    .awgn_26_lfsr128_V_read(uut_lfsr128_V),
    .snr_V_read(tmp_V_8_reg_1008),
    .ap_return_0(grp_operator_s_fu_324_ap_return_0),
    .ap_return_1(grp_operator_s_fu_324_ap_return_1)
);

operator_s grp_operator_s_fu_336(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_operator_s_fu_336_ap_start),
    .ap_done(grp_operator_s_fu_336_ap_done),
    .ap_idle(grp_operator_s_fu_336_ap_idle),
    .ap_ready(grp_operator_s_fu_336_ap_ready),
    .awgn_26_lfsr128_V_read(uut_lfsr128_V_1),
    .snr_V_read(tmp_V_10_reg_1018),
    .ap_return_0(grp_operator_s_fu_336_ap_return_0),
    .ap_return_1(grp_operator_s_fu_336_ap_return_1)
);

encoder_decoder_mBew #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .din3_WIDTH( 4 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 4 ))
encoder_decoder_mBew_U115(
    .din0(tmp_keep_V_fu_146),
    .din1(tmp_keep_V_1_fu_150),
    .din2(tmp_keep_V_2_fu_154),
    .din3(tmp_keep_V_3_fu_158),
    .din4(tmp_226_reg_1096),
    .dout(axis_dec_data_out_it_1_fu_853_p6)
);

encoder_decoder_mCeG #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 1 ),
    .din1_WIDTH( 1 ),
    .din2_WIDTH( 1 ),
    .din3_WIDTH( 1 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 1 ))
encoder_decoder_mCeG_U116(
    .din0(tmp_last_V_fu_178),
    .din1(tmp_last_V_1_fu_182),
    .din2(tmp_last_V_2_fu_186),
    .din3(tmp_last_V_3_fu_190),
    .din4(tmp_226_reg_1096),
    .dout(axis_dec_data_out_it_2_fu_867_p6)
);

encoder_decoder_mDeQ #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
encoder_decoder_mDeQ_U117(
    .din0(tmp_user_V_fu_162),
    .din1(tmp_user_V_1_fu_166),
    .din2(tmp_user_V_2_fu_170),
    .din3(tmp_user_V_3_fu_174),
    .din4(tmp_226_reg_1096),
    .dout(axis_dec_data_out_it_3_fu_881_p6)
);

fifo_w26_d100_A noise_sample_stream0_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(noiseSample_V_reg_1028),
    .if_full_n(noise_sample_stream0_1_full_n),
    .if_write(noise_sample_stream0_1_write),
    .if_dout(noise_sample_stream0_1_dout),
    .if_empty_n(noise_sample_stream0_1_empty_n),
    .if_read(noise_sample_stream0_1_read)
);

fifo_w26_d100_A noise_sample_stream1_1_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(noiseSample_V_1_reg_1033),
    .if_full_n(noise_sample_stream1_1_full_n),
    .if_write(noise_sample_stream1_1_write),
    .if_dout(noise_sample_stream1_1_dout),
    .if_empty_n(noise_sample_stream1_1_empty_n),
    .if_read(noise_sample_stream1_1_read)
);

fifo_w8_d100_A snr_sample_stream_V_s_fifo_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(snr_sample_stream_V_s_din),
    .if_full_n(snr_sample_stream_V_s_full_n),
    .if_write(snr_sample_stream_V_s_write),
    .if_dout(snr_sample_stream_V_s_dout),
    .if_empty_n(snr_sample_stream_V_s_empty_n),
    .if_read(snr_sample_stream_V_s_read)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_data_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_data_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_data_V_1_sel_rd <= ~axis_dec_data_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_data_V_1_sel_wr <= ~axis_dec_data_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_state == 2'd2)) | ((axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_state == 2'd1)) | ((axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_data_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_data_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_data_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_data_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_data_V_1_state == 2'd3)) | ((axis_dec_data_out_V_data_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd1)) | ((axis_dec_data_out_V_data_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_data_V_1_state == 2'd2)))) begin
            axis_dec_data_out_V_data_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_keep_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_keep_V_1_sel_rd <= ~axis_dec_data_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_keep_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_keep_V_1_sel_wr <= ~axis_dec_data_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_state == 2'd2)) | ((axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_state == 2'd1)) | ((axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_keep_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_keep_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_keep_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_keep_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_keep_V_1_state == 2'd3)) | ((axis_dec_data_out_V_keep_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd1)) | ((axis_dec_data_out_V_keep_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_keep_V_1_state == 2'd2)))) begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_last_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_last_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_last_V_1_sel_rd <= ~axis_dec_data_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_last_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_last_V_1_sel_wr <= ~axis_dec_data_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_state == 2'd2)) | ((axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_state == 2'd1)) | ((axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_last_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_last_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_last_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_last_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_last_V_1_state == 2'd3)) | ((axis_dec_data_out_V_last_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd1)) | ((axis_dec_data_out_V_last_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_last_V_1_state == 2'd2)))) begin
            axis_dec_data_out_V_last_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_user_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_user_V_1_vld_out == 1'b1))) begin
            axis_dec_data_out_V_user_V_1_sel_rd <= ~axis_dec_data_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((axis_dec_data_out_V_user_V_1_ack_in == 1'b1) & (axis_dec_data_out_V_user_V_1_vld_in == 1'b1))) begin
            axis_dec_data_out_V_user_V_1_sel_wr <= ~axis_dec_data_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_dec_data_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((axis_dec_data_out_V_user_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_user_V_1_state == 2'd2)) | ((axis_dec_data_out_V_user_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_user_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_user_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_user_V_1_state <= 2'd2;
        end else if ((((axis_dec_data_out_V_user_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_user_V_1_state == 2'd1)) | ((axis_dec_data_out_V_user_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_user_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_user_V_1_state == 2'd3)))) begin
            axis_dec_data_out_V_user_V_1_state <= 2'd1;
        end else if (((~((axis_dec_data_out_V_user_V_1_vld_in == 1'b0) & (axis_dec_data_out_V_user_V_1_ack_out == 1'b1)) & ~((axis_dec_data_out_V_user_V_1_ack_out == 1'b0) & (axis_dec_data_out_V_user_V_1_vld_in == 1'b1)) & (axis_dec_data_out_V_user_V_1_state == 2'd3)) | ((axis_dec_data_out_V_user_V_1_ack_out == 1'b1) & (axis_dec_data_out_V_user_V_1_state == 2'd1)) | ((axis_dec_data_out_V_user_V_1_vld_in == 1'b1) & (axis_dec_data_out_V_user_V_1_state == 2'd2)))) begin
            axis_dec_data_out_V_user_V_1_state <= 2'd3;
        end else begin
            axis_dec_data_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_data_V_0_sel_rd <= ~axis_enc_data_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_data_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_data_V_0_sel_wr <= ~axis_enc_data_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_state == 2'd2)) | ((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_state == 2'd1)) | ((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_data_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_data_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_data_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_data_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_data_V_0_state == 2'd3)) | ((axis_enc_data_in_V_data_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd1)) | ((axis_enc_data_in_V_data_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_data_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_data_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_keep_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_keep_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_keep_V_0_sel_rd <= ~axis_enc_data_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_keep_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_keep_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_keep_V_0_sel_wr <= ~axis_enc_data_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_keep_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_keep_V_0_state == 2'd2)) | ((axis_enc_data_in_V_keep_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_keep_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_keep_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_keep_V_0_state == 2'd1)) | ((axis_enc_data_in_V_keep_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_keep_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_keep_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_keep_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_keep_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_keep_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_keep_V_0_state == 2'd3)) | ((axis_enc_data_in_V_keep_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd1)) | ((axis_enc_data_in_V_keep_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_keep_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_last_V_0_sel_rd <= ~axis_enc_data_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_last_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_last_V_0_sel_wr <= ~axis_enc_data_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_state == 2'd2)) | ((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_state == 2'd1)) | ((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_last_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_last_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_last_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_last_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_last_V_0_state == 2'd3)) | ((axis_enc_data_in_V_last_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd1)) | ((axis_enc_data_in_V_last_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_last_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_last_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_user_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_user_V_0_vld_out == 1'b1))) begin
            axis_enc_data_in_V_user_V_0_sel_rd <= ~axis_enc_data_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((axis_enc_data_in_V_user_V_0_ack_in == 1'b1) & (axis_enc_data_in_V_user_V_0_vld_in == 1'b1))) begin
            axis_enc_data_in_V_user_V_0_sel_wr <= ~axis_enc_data_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        axis_enc_data_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((axis_enc_data_in_V_user_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_user_V_0_state == 2'd2)) | ((axis_enc_data_in_V_user_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_user_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_user_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_user_V_0_state <= 2'd2;
        end else if ((((axis_enc_data_in_V_user_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_user_V_0_state == 2'd1)) | ((axis_enc_data_in_V_user_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_user_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_user_V_0_state == 2'd3)))) begin
            axis_enc_data_in_V_user_V_0_state <= 2'd1;
        end else if (((~((axis_enc_data_in_V_user_V_0_vld_in == 1'b0) & (axis_enc_data_in_V_user_V_0_ack_out == 1'b1)) & ~((axis_enc_data_in_V_user_V_0_ack_out == 1'b0) & (axis_enc_data_in_V_user_V_0_vld_in == 1'b1)) & (axis_enc_data_in_V_user_V_0_state == 2'd3)) | ((axis_enc_data_in_V_user_V_0_ack_out == 1'b1) & (axis_enc_data_in_V_user_V_0_state == 2'd1)) | ((axis_enc_data_in_V_user_V_0_vld_in == 1'b1) & (axis_enc_data_in_V_user_V_0_state == 2'd2)))) begin
            axis_enc_data_in_V_user_V_0_state <= 2'd3;
        end else begin
            axis_enc_data_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_decoder_fu_315_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state110) & (1'b1 == ap_CS_fsm_state109))) begin
            grp_decoder_fu_315_ap_start_reg <= 1'b1;
        end else if ((grp_decoder_fu_315_ap_ready == 1'b1)) begin
            grp_decoder_fu_315_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_encoder_fu_310_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state9) & (1'b1 == ap_CS_fsm_state7))) begin
            grp_encoder_fu_310_ap_start_reg <= 1'b1;
        end else if ((grp_encoder_fu_310_ap_ready == 1'b1)) begin
            grp_encoder_fu_310_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_operator_s_fu_324_ap_start_reg <= 1'b0;
    end else begin
        if (((snr_sample_stream_V_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_operator_s_fu_324_ap_start_reg <= 1'b1;
        end else if ((grp_operator_s_fu_324_ap_ready == 1'b1)) begin
            grp_operator_s_fu_324_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_operator_s_fu_336_ap_start_reg <= 1'b0;
    end else begin
        if (((snr_sample_stream_V_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            grp_operator_s_fu_336_ap_start_reg <= 1'b1;
        end else if ((grp_operator_s_fu_336_ap_ready == 1'b1)) begin
            grp_operator_s_fu_336_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_user_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state128_io)) & (1'b1 == ap_CS_fsm_state128) & (axis_dec_data_out_it_2_reg_1123 == 1'd0) & (tmp_225_reg_1087 == 1'd0))) begin
        i5_reg_299 <= i_3_reg_1091;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        i5_reg_299 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        i_reg_288 <= i_2_reg_1051;
    end else if ((~((noise_sample_stream1_1_empty_n == 1'b0) | (noise_sample_stream0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        i_reg_288 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((snr_sample_stream_V_s_full_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        AWGN_EN_REG_read_reg_967 <= AWGN_EN_REG;
        tmp_V_reg_972 <= SNR_REG_V;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_data_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_848_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_data_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_848_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_keep_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_keep_V_1_payload_A <= axis_dec_data_out_it_1_fu_853_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_keep_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_keep_V_1_payload_B <= axis_dec_data_out_it_1_fu_853_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_last_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_payload_A <= axis_dec_data_out_it_2_fu_867_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_last_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_payload_B <= axis_dec_data_out_it_2_fu_867_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_user_V_1_load_A == 1'b1)) begin
        axis_dec_data_out_V_user_V_1_payload_A <= axis_dec_data_out_it_3_fu_881_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_dec_data_out_V_user_V_1_load_B == 1'b1)) begin
        axis_dec_data_out_V_user_V_1_payload_B <= axis_dec_data_out_it_3_fu_881_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
        axis_dec_data_out_it_2_reg_1123 <= axis_dec_data_out_it_2_fu_867_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_data_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_data_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_keep_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_keep_V_0_payload_A <= axis_enc_data_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_keep_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_keep_V_0_payload_B <= axis_enc_data_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_last_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_last_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_user_V_0_load_A == 1'b1)) begin
        axis_enc_data_in_V_user_V_0_payload_A <= axis_enc_data_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((axis_enc_data_in_V_user_V_0_load_B == 1'b1)) begin
        axis_enc_data_in_V_user_V_0_payload_B <= axis_enc_data_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        dec_data_in_V_fu_198 <= dec_data_in_V_1_fu_675_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        dec_data_out_V_reg_1081 <= grp_decoder_fu_315_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        enc_data_in_V_fu_194 <= enc_data_in_V_1_fu_626_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state108)) begin
        enc_data_out_V_reg_1066 <= grp_encoder_fu_310_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        i_2_reg_1051 <= i_2_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state126)) begin
        i_3_reg_1091 <= i_3_fu_694_p2;
        tmp_225_reg_1087 <= i5_reg_299[32'd2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        noiseSample_V_1_reg_1033 <= grp_operator_s_fu_336_ap_return_0;
        noiseSample_V_reg_1028 <= grp_operator_s_fu_324_ap_return_0;
        uut_lfsr128_V <= grp_operator_s_fu_324_ap_return_1;
        uut_lfsr128_V_1 <= grp_operator_s_fu_336_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state108) & (tmp_s_reg_1061 == 1'd1))) begin
        p_Val2_8_reg_1076 <= {{grp_encoder_fu_310_ap_return[63:32]}};
        p_Val2_s_reg_1071 <= p_Val2_s_fu_637_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_387_p2 == 1'd0))) begin
        tmp_224_reg_1056 <= tmp_224_fu_399_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state126) & (tmp_225_fu_686_p3 == 1'd0))) begin
        tmp_226_reg_1096 <= tmp_226_fu_700_p1;
        tmp_237_reg_1103[7 : 1] <= tmp_237_fu_782_p2[7 : 1];
        tmp_240_reg_1108 <= tmp_240_fu_792_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((snr_sample_stream_V_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_V_10_reg_1018 <= snr_sample_stream_V_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((noise_sample_stream1_1_empty_n == 1'b0) | (noise_sample_stream0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_V_11_reg_1043 <= noise_sample_stream1_1_dout;
        tmp_V_9_reg_1038 <= noise_sample_stream0_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((~((snr_sample_stream_V_s_empty_n == 1'b0) | (snr_sample_stream_V_s_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_V_8_reg_1008 <= snr_sample_stream_V_s_dout;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_224_reg_1056 == 2'd1) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_1_fu_150 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_1_fu_182 <= axis_enc_data_in_V_last_V_0_data_out;
        tmp_user_V_1_fu_166 <= axis_enc_data_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_224_reg_1056 == 2'd2) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_2_fu_154 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_2_fu_186 <= axis_enc_data_in_V_last_V_0_data_out;
        tmp_user_V_2_fu_170 <= axis_enc_data_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_224_reg_1056 == 2'd3) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_3_fu_158 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_3_fu_190 <= axis_enc_data_in_V_last_V_0_data_out;
        tmp_user_V_3_fu_174 <= axis_enc_data_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_224_reg_1056 == 2'd0) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        tmp_keep_V_fu_146 <= axis_enc_data_in_V_keep_V_0_data_out;
        tmp_last_V_fu_178 <= axis_enc_data_in_V_last_V_0_data_out;
        tmp_user_V_fu_162 <= axis_enc_data_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_387_p2 == 1'd1))) begin
        tmp_s_reg_1061 <= tmp_s_fu_403_p2;
    end
end

always @ (*) begin
    if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_user_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state128_io)) & (1'b1 == ap_CS_fsm_state128) & ((axis_dec_data_out_it_2_reg_1123 == 1'd1) | (tmp_225_reg_1087 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_user_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state128_io)) & (1'b1 == ap_CS_fsm_state128) & ((axis_dec_data_out_it_2_reg_1123 == 1'd1) | (tmp_225_reg_1087 == 1'd1)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state127) | ((1'b1 == ap_CS_fsm_state128) & (tmp_225_reg_1087 == 1'd0)))) begin
        axis_dec_data_out_TDATA_blk_n = axis_dec_data_out_V_data_V_1_state[1'd1];
    end else begin
        axis_dec_data_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_data_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_data_V_1_data_out = axis_dec_data_out_V_data_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_data_V_1_data_out = axis_dec_data_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
        axis_dec_data_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_keep_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_keep_V_1_data_out = axis_dec_data_out_V_keep_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_keep_V_1_data_out = axis_dec_data_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
        axis_dec_data_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_last_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_last_V_1_data_out = axis_dec_data_out_V_last_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_last_V_1_data_out = axis_dec_data_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
        axis_dec_data_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((axis_dec_data_out_V_user_V_1_sel == 1'b1)) begin
        axis_dec_data_out_V_user_V_1_data_out = axis_dec_data_out_V_user_V_1_payload_B;
    end else begin
        axis_dec_data_out_V_user_V_1_data_out = axis_dec_data_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
        axis_dec_data_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        axis_dec_data_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axis_enc_data_in_TDATA_blk_n = axis_enc_data_in_V_data_V_0_state[1'd0];
    end else begin
        axis_enc_data_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_data_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_data_V_0_data_out = axis_enc_data_in_V_data_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_data_V_0_data_out = axis_enc_data_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_keep_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_keep_V_0_data_out = axis_enc_data_in_V_keep_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_keep_V_0_data_out = axis_enc_data_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_last_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_last_V_0_data_out = axis_enc_data_in_V_last_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_last_V_0_data_out = axis_enc_data_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
        axis_enc_data_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        axis_enc_data_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((axis_enc_data_in_V_user_V_0_sel == 1'b1)) begin
        axis_enc_data_in_V_user_V_0_data_out = axis_enc_data_in_V_user_V_0_payload_B;
    end else begin
        axis_enc_data_in_V_user_V_0_data_out = axis_enc_data_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((noise_sample_stream1_1_empty_n == 1'b0) | (noise_sample_stream0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        noise_sample_stream0_1_read = 1'b1;
    end else begin
        noise_sample_stream0_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((noise_sample_stream1_1_full_n == 1'b0) | (noise_sample_stream0_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        noise_sample_stream0_1_write = 1'b1;
    end else begin
        noise_sample_stream0_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((noise_sample_stream1_1_empty_n == 1'b0) | (noise_sample_stream0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
        noise_sample_stream1_1_read = 1'b1;
    end else begin
        noise_sample_stream1_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((noise_sample_stream1_1_full_n == 1'b0) | (noise_sample_stream0_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
        noise_sample_stream1_1_write = 1'b1;
    end else begin
        noise_sample_stream1_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((snr_sample_stream_V_s_empty_n == 1'b0) | (snr_sample_stream_V_s_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
        snr_sample_stream_V_s_din = tmp_V_reg_972;
    end else if ((~((snr_sample_stream_V_s_full_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        snr_sample_stream_V_s_din = SNR_REG_V;
    end else begin
        snr_sample_stream_V_s_din = 'bx;
    end
end

always @ (*) begin
    if ((((snr_sample_stream_V_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3)) | (~((snr_sample_stream_V_s_empty_n == 1'b0) | (snr_sample_stream_V_s_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)))) begin
        snr_sample_stream_V_s_read = 1'b1;
    end else begin
        snr_sample_stream_V_s_read = 1'b0;
    end
end

always @ (*) begin
    if (((~((snr_sample_stream_V_s_empty_n == 1'b0) | (snr_sample_stream_V_s_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2)) | (~((snr_sample_stream_V_s_full_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        snr_sample_stream_V_s_write = 1'b1;
    end else begin
        snr_sample_stream_V_s_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((snr_sample_stream_V_s_full_n == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if ((~((snr_sample_stream_V_s_empty_n == 1'b0) | (snr_sample_stream_V_s_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((snr_sample_stream_V_s_empty_n == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((noise_sample_stream1_1_full_n == 1'b0) | (noise_sample_stream0_1_full_n == 1'b0)) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((noise_sample_stream1_1_empty_n == 1'b0) | (noise_sample_stream0_1_empty_n == 1'b0)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (exitcond_fu_387_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (axis_enc_data_in_V_data_V_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            if (((1'b1 == ap_CS_fsm_state126) & (tmp_225_fu_686_p3 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end
        end
        ap_ST_fsm_state127 : begin
            if (((axis_dec_data_out_V_data_V_1_ack_in == 1'b1) & (1'b1 == ap_CS_fsm_state127))) begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state127;
            end
        end
        ap_ST_fsm_state128 : begin
            if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_user_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state128_io)) & (1'b1 == ap_CS_fsm_state128) & ((axis_dec_data_out_it_2_reg_1123 == 1'd1) | (tmp_225_reg_1087 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_user_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0) | (1'b1 == ap_block_state128_io)) & (1'b1 == ap_CS_fsm_state128) & (axis_dec_data_out_it_2_reg_1123 == 1'd0) & (tmp_225_reg_1087 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state126;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state128;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state110 = ap_NS_fsm[32'd109];

assign ap_NS_fsm_state9 = ap_NS_fsm[32'd8];

always @ (*) begin
    ap_block_state1 = ((snr_sample_stream_V_s_full_n == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state128 = ((axis_dec_data_out_V_last_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_user_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_keep_V_1_ack_in == 1'b0) | (axis_dec_data_out_V_data_V_1_ack_in == 1'b0));
end

always @ (*) begin
    ap_block_state128_io = ((axis_dec_data_out_V_data_V_1_ack_in == 1'b0) & (tmp_225_reg_1087 == 1'd0));
end

always @ (*) begin
    ap_block_state2 = ((snr_sample_stream_V_s_empty_n == 1'b0) | (snr_sample_stream_V_s_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state4_on_subcall_done = ((grp_operator_s_fu_336_ap_done == 1'b0) | (grp_operator_s_fu_324_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state5 = ((noise_sample_stream1_1_full_n == 1'b0) | (noise_sample_stream0_1_full_n == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((noise_sample_stream1_1_empty_n == 1'b0) | (noise_sample_stream0_1_empty_n == 1'b0));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign axis_dec_data_out_TDATA = axis_dec_data_out_V_data_V_1_data_out;

assign axis_dec_data_out_TKEEP = axis_dec_data_out_V_keep_V_1_data_out;

assign axis_dec_data_out_TLAST = axis_dec_data_out_V_last_V_1_data_out;

assign axis_dec_data_out_TUSER = axis_dec_data_out_V_user_V_1_data_out;

assign axis_dec_data_out_TVALID = axis_dec_data_out_V_last_V_1_state[1'd0];

assign axis_dec_data_out_V_data_V_1_ack_in = axis_dec_data_out_V_data_V_1_state[1'd1];

assign axis_dec_data_out_V_data_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_data_V_1_load_A = (~axis_dec_data_out_V_data_V_1_sel_wr & axis_dec_data_out_V_data_V_1_state_cmp_full);

assign axis_dec_data_out_V_data_V_1_load_B = (axis_dec_data_out_V_data_V_1_state_cmp_full & axis_dec_data_out_V_data_V_1_sel_wr);

assign axis_dec_data_out_V_data_V_1_sel = axis_dec_data_out_V_data_V_1_sel_rd;

assign axis_dec_data_out_V_data_V_1_state_cmp_full = ((axis_dec_data_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_data_V_1_vld_out = axis_dec_data_out_V_data_V_1_state[1'd0];

assign axis_dec_data_out_V_keep_V_1_ack_in = axis_dec_data_out_V_keep_V_1_state[1'd1];

assign axis_dec_data_out_V_keep_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_keep_V_1_load_A = (~axis_dec_data_out_V_keep_V_1_sel_wr & axis_dec_data_out_V_keep_V_1_state_cmp_full);

assign axis_dec_data_out_V_keep_V_1_load_B = (axis_dec_data_out_V_keep_V_1_state_cmp_full & axis_dec_data_out_V_keep_V_1_sel_wr);

assign axis_dec_data_out_V_keep_V_1_sel = axis_dec_data_out_V_keep_V_1_sel_rd;

assign axis_dec_data_out_V_keep_V_1_state_cmp_full = ((axis_dec_data_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_keep_V_1_vld_out = axis_dec_data_out_V_keep_V_1_state[1'd0];

assign axis_dec_data_out_V_last_V_1_ack_in = axis_dec_data_out_V_last_V_1_state[1'd1];

assign axis_dec_data_out_V_last_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_last_V_1_load_A = (~axis_dec_data_out_V_last_V_1_sel_wr & axis_dec_data_out_V_last_V_1_state_cmp_full);

assign axis_dec_data_out_V_last_V_1_load_B = (axis_dec_data_out_V_last_V_1_state_cmp_full & axis_dec_data_out_V_last_V_1_sel_wr);

assign axis_dec_data_out_V_last_V_1_sel = axis_dec_data_out_V_last_V_1_sel_rd;

assign axis_dec_data_out_V_last_V_1_state_cmp_full = ((axis_dec_data_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_last_V_1_vld_out = axis_dec_data_out_V_last_V_1_state[1'd0];

assign axis_dec_data_out_V_user_V_1_ack_in = axis_dec_data_out_V_user_V_1_state[1'd1];

assign axis_dec_data_out_V_user_V_1_ack_out = axis_dec_data_out_TREADY;

assign axis_dec_data_out_V_user_V_1_load_A = (~axis_dec_data_out_V_user_V_1_sel_wr & axis_dec_data_out_V_user_V_1_state_cmp_full);

assign axis_dec_data_out_V_user_V_1_load_B = (axis_dec_data_out_V_user_V_1_state_cmp_full & axis_dec_data_out_V_user_V_1_sel_wr);

assign axis_dec_data_out_V_user_V_1_sel = axis_dec_data_out_V_user_V_1_sel_rd;

assign axis_dec_data_out_V_user_V_1_state_cmp_full = ((axis_dec_data_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_dec_data_out_V_user_V_1_vld_out = axis_dec_data_out_V_user_V_1_state[1'd0];

assign axis_dec_data_out_it_fu_848_p1 = tmp_242_fu_843_p2[31:0];

assign axis_enc_data_in_TREADY = axis_enc_data_in_V_last_V_0_state[1'd1];

assign axis_enc_data_in_V_data_V_0_ack_in = axis_enc_data_in_V_data_V_0_state[1'd1];

assign axis_enc_data_in_V_data_V_0_load_A = (~axis_enc_data_in_V_data_V_0_sel_wr & axis_enc_data_in_V_data_V_0_state_cmp_full);

assign axis_enc_data_in_V_data_V_0_load_B = (axis_enc_data_in_V_data_V_0_state_cmp_full & axis_enc_data_in_V_data_V_0_sel_wr);

assign axis_enc_data_in_V_data_V_0_sel = axis_enc_data_in_V_data_V_0_sel_rd;

assign axis_enc_data_in_V_data_V_0_state_cmp_full = ((axis_enc_data_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_data_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_data_V_0_vld_out = axis_enc_data_in_V_data_V_0_state[1'd0];

assign axis_enc_data_in_V_keep_V_0_ack_in = axis_enc_data_in_V_keep_V_0_state[1'd1];

assign axis_enc_data_in_V_keep_V_0_load_A = (~axis_enc_data_in_V_keep_V_0_sel_wr & axis_enc_data_in_V_keep_V_0_state_cmp_full);

assign axis_enc_data_in_V_keep_V_0_load_B = (axis_enc_data_in_V_keep_V_0_state_cmp_full & axis_enc_data_in_V_keep_V_0_sel_wr);

assign axis_enc_data_in_V_keep_V_0_sel = axis_enc_data_in_V_keep_V_0_sel_rd;

assign axis_enc_data_in_V_keep_V_0_state_cmp_full = ((axis_enc_data_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_keep_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_keep_V_0_vld_out = axis_enc_data_in_V_keep_V_0_state[1'd0];

assign axis_enc_data_in_V_last_V_0_ack_in = axis_enc_data_in_V_last_V_0_state[1'd1];

assign axis_enc_data_in_V_last_V_0_load_A = (~axis_enc_data_in_V_last_V_0_sel_wr & axis_enc_data_in_V_last_V_0_state_cmp_full);

assign axis_enc_data_in_V_last_V_0_load_B = (axis_enc_data_in_V_last_V_0_state_cmp_full & axis_enc_data_in_V_last_V_0_sel_wr);

assign axis_enc_data_in_V_last_V_0_sel = axis_enc_data_in_V_last_V_0_sel_rd;

assign axis_enc_data_in_V_last_V_0_state_cmp_full = ((axis_enc_data_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_last_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_last_V_0_vld_out = axis_enc_data_in_V_last_V_0_state[1'd0];

assign axis_enc_data_in_V_user_V_0_ack_in = axis_enc_data_in_V_user_V_0_state[1'd1];

assign axis_enc_data_in_V_user_V_0_load_A = (~axis_enc_data_in_V_user_V_0_sel_wr & axis_enc_data_in_V_user_V_0_state_cmp_full);

assign axis_enc_data_in_V_user_V_0_load_B = (axis_enc_data_in_V_user_V_0_state_cmp_full & axis_enc_data_in_V_user_V_0_sel_wr);

assign axis_enc_data_in_V_user_V_0_sel = axis_enc_data_in_V_user_V_0_sel_rd;

assign axis_enc_data_in_V_user_V_0_state_cmp_full = ((axis_enc_data_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign axis_enc_data_in_V_user_V_0_vld_in = axis_enc_data_in_TVALID;

assign axis_enc_data_in_V_user_V_0_vld_out = axis_enc_data_in_V_user_V_0_state[1'd0];

assign dec_data_in_V_1_fu_675_p3 = ((tmp_s_reg_1061[0:0] === 1'b1) ? tmp_fu_667_p3 : enc_data_out_V_reg_1066);

assign enc_data_in_V_1_fu_626_p2 = (tmp_263_fu_620_p2 | tmp_262_fu_614_p2);

assign exitcond_fu_387_p2 = ((i_reg_288 == 3'd4) ? 1'b1 : 1'b0);

assign grp_decoder_fu_315_ap_start = grp_decoder_fu_315_ap_start_reg;

assign grp_encoder_fu_310_ap_start = grp_encoder_fu_310_ap_start_reg;

assign grp_operator_s_fu_324_ap_start = grp_operator_s_fu_324_ap_start_reg;

assign grp_operator_s_fu_336_ap_start = grp_operator_s_fu_336_ap_start_reg;

assign i_2_fu_393_p2 = (i_reg_288 + 3'd1);

assign i_3_fu_694_p2 = (i5_reg_299 + 3'd1);

assign p_Val2_2_fu_662_p2 = ($signed(tmp_86_fu_659_p1) + $signed(p_Val2_8_reg_1076));

assign p_Val2_s_62_fu_654_p2 = ($signed(tmp_85_fu_651_p1) + $signed(p_Val2_s_reg_1071));

assign p_Val2_s_fu_637_p1 = grp_encoder_fu_310_ap_return[31:0];

assign p_demorgan_fu_602_p2 = (tmp_260_fu_596_p2 & tmp_259_fu_590_p2);

assign tmp_100_fu_487_p3 = {{tmp_224_reg_1056}, {5'd0}};

assign tmp_101_fu_494_p2 = (tmp_100_fu_487_p3 | 7'd31);

assign tmp_224_fu_399_p1 = i_reg_288[1:0];

assign tmp_225_fu_686_p3 = i5_reg_299[32'd2];

assign tmp_226_fu_700_p1 = i5_reg_299[1:0];

assign tmp_227_fu_718_p2 = ((tmp_98_fu_704_p3 > tmp_99_fu_712_p2) ? 1'b1 : 1'b0);

assign tmp_228_fu_724_p1 = tmp_98_fu_704_p3;

assign tmp_229_fu_728_p1 = tmp_99_fu_712_p2;

integer ap_tvar_int_0;

always @ (dec_data_out_V_reg_1081) begin
    for (ap_tvar_int_0 = 128 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 127 - 0) begin
            tmp_230_fu_732_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            tmp_230_fu_732_p4[ap_tvar_int_0] = dec_data_out_V_reg_1081[127 - ap_tvar_int_0];
        end
    end
end

assign tmp_231_fu_741_p2 = (tmp_228_fu_724_p1 - tmp_229_fu_728_p1);

assign tmp_232_fu_747_p2 = (tmp_228_fu_724_p1 ^ 8'd127);

assign tmp_233_fu_753_p2 = (tmp_229_fu_728_p1 - tmp_228_fu_724_p1);

assign tmp_234_fu_759_p3 = ((tmp_227_fu_718_p2[0:0] === 1'b1) ? tmp_231_fu_741_p2 : tmp_233_fu_753_p2);

assign tmp_235_fu_767_p3 = ((tmp_227_fu_718_p2[0:0] === 1'b1) ? tmp_230_fu_732_p4 : dec_data_out_V_reg_1081);

assign tmp_236_fu_774_p3 = ((tmp_227_fu_718_p2[0:0] === 1'b1) ? tmp_232_fu_747_p2 : tmp_228_fu_724_p1);

assign tmp_237_fu_782_p2 = (8'd127 - tmp_234_fu_759_p3);

assign tmp_238_fu_788_p1 = tmp_236_fu_774_p3;

assign tmp_239_fu_834_p1 = tmp_237_reg_1103;

assign tmp_240_fu_792_p2 = tmp_235_fu_767_p3 >> tmp_238_fu_788_p1;

assign tmp_241_fu_837_p2 = 128'd340282366920938463463374607431768211455 >> tmp_239_fu_834_p1;

assign tmp_242_fu_843_p2 = (tmp_241_fu_837_p2 & tmp_240_reg_1108);

assign tmp_244_fu_500_p2 = ((tmp_100_fu_487_p3 > tmp_101_fu_494_p2) ? 1'b1 : 1'b0);

assign tmp_245_fu_506_p1 = tmp_100_fu_487_p3;

assign tmp_246_fu_510_p1 = tmp_101_fu_494_p2;

assign tmp_247_fu_514_p1 = axis_enc_data_in_V_data_V_0_data_out;

assign tmp_248_fu_518_p2 = (tmp_245_fu_506_p1 ^ 8'd127);

assign tmp_249_fu_524_p3 = ((tmp_244_fu_500_p2[0:0] === 1'b1) ? tmp_245_fu_506_p1 : tmp_246_fu_510_p1);

assign tmp_250_fu_532_p3 = ((tmp_244_fu_500_p2[0:0] === 1'b1) ? tmp_246_fu_510_p1 : tmp_245_fu_506_p1);

assign tmp_251_fu_540_p3 = ((tmp_244_fu_500_p2[0:0] === 1'b1) ? tmp_248_fu_518_p2 : tmp_245_fu_506_p1);

assign tmp_252_fu_548_p2 = (tmp_249_fu_524_p3 ^ 8'd127);

assign tmp_253_fu_554_p1 = tmp_251_fu_540_p3;

assign tmp_254_fu_558_p1 = tmp_250_fu_532_p3;

assign tmp_255_fu_562_p1 = tmp_252_fu_548_p2;

assign tmp_256_fu_566_p2 = tmp_247_fu_514_p1 << tmp_253_fu_554_p1;

integer ap_tvar_int_1;

always @ (tmp_256_fu_566_p2) begin
    for (ap_tvar_int_1 = 128 - 1; ap_tvar_int_1 >= 0; ap_tvar_int_1 = ap_tvar_int_1 - 1) begin
        if (ap_tvar_int_1 > 127 - 0) begin
            tmp_257_fu_572_p4[ap_tvar_int_1] = 1'b0;
        end else begin
            tmp_257_fu_572_p4[ap_tvar_int_1] = tmp_256_fu_566_p2[127 - ap_tvar_int_1];
        end
    end
end

assign tmp_258_fu_582_p3 = ((tmp_244_fu_500_p2[0:0] === 1'b1) ? tmp_257_fu_572_p4 : tmp_256_fu_566_p2);

assign tmp_259_fu_590_p2 = 128'd340282366920938463463374607431768211455 << tmp_254_fu_558_p1;

assign tmp_260_fu_596_p2 = 128'd340282366920938463463374607431768211455 >> tmp_255_fu_562_p1;

assign tmp_261_fu_608_p2 = (p_demorgan_fu_602_p2 ^ 128'd340282366920938463463374607431768211455);

assign tmp_262_fu_614_p2 = (tmp_261_fu_608_p2 & enc_data_in_V_fu_194);

assign tmp_263_fu_620_p2 = (tmp_258_fu_582_p3 & p_demorgan_fu_602_p2);

assign tmp_85_fu_651_p1 = $signed(tmp_V_9_reg_1038);

assign tmp_86_fu_659_p1 = $signed(tmp_V_11_reg_1043);

assign tmp_98_fu_704_p3 = {{tmp_226_fu_700_p1}, {5'd0}};

assign tmp_99_fu_712_p2 = (tmp_98_fu_704_p3 | 7'd31);

assign tmp_fu_667_p3 = {{p_Val2_2_fu_662_p2}, {p_Val2_s_62_fu_654_p2}};

assign tmp_s_fu_403_p2 = ((AWGN_EN_REG_read_reg_967 == 32'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_237_reg_1103[0] <= 1'b0;
end

endmodule //encoder_decoder
