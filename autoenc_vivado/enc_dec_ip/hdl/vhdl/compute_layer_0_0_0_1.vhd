-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_layer_0_0_0_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of compute_layer_0_0_0_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv56_1D4FD32 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001110101001111110100110010";
    constant ap_const_lv56_FFFFFFFE0D9AB0 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111110000011011001101010110000";
    constant ap_const_lv56_FFFFFFFC7E7638 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111100011111100111011000111000";
    constant ap_const_lv51_209B0 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100000100110110000";
    constant ap_const_lv56_1E690C3 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001111001101001000011000011";
    constant ap_const_lv51_242B3 : STD_LOGIC_VECTOR (50 downto 0) := "000000000000000000000000000000000100100001010110011";
    constant ap_const_lv56_11A736D : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001000110100111001101101101";
    constant ap_const_lv56_FFFFFFFED41943 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111110110101000001100101000011";
    constant ap_const_lv56_C8FD27 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000000110010001111110100100111";
    constant ap_const_lv56_1C58863 : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000001110001011000100001100011";
    constant ap_const_lv56_FFFFFFFED2898C : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111110110100101000100110001100";
    constant ap_const_lv56_FFFFFFFD204C14 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111101001000000100110000010100";
    constant ap_const_lv56_FFFFFFFD3C5E87 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111101001111000101111010000111";
    constant ap_const_lv56_26B80DF : STD_LOGIC_VECTOR (55 downto 0) := "00000000000000000000000000000010011010111000000011011111";
    constant ap_const_lv56_FFFFFFFDB73A83 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111101101101110011101010000011";
    constant ap_const_lv56_FFFFFFFDC9B874 : STD_LOGIC_VECTOR (55 downto 0) := "11111111111111111111111111111101110010011011100001110100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_FE0FDC17 : STD_LOGIC_VECTOR (31 downto 0) := "11111110000011111101110000010111";
    constant ap_const_lv32_FF73B05C : STD_LOGIC_VECTOR (31 downto 0) := "11111111011100111011000001011100";
    constant ap_const_lv32_18AE46E : STD_LOGIC_VECTOR (31 downto 0) := "00000001100010101110010001101110";
    constant ap_const_lv32_C3F5E5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000110000111111010111100101";

    signal data_1_V_read_5_reg_1308 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_0_V_read_5_reg_1313 : STD_LOGIC_VECTOR (31 downto 0);
    signal OP1_V_2_cast_fu_1008_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal OP1_V_3_cast_fu_1015_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal OP1_V_cast_fu_1027_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal OP1_V_1_cast_fu_1033_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp_153_2_reg_1359 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_2_1_reg_1364 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_reg_1369 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_153_2_3_reg_1374 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_3_reg_1379 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_3_1_reg_1384 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_3_2_reg_1389 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_3_3_reg_1394 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_105_reg_1399 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1404 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_153_0_2_reg_1409 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_0_3_reg_1414 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_1_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_1_1_reg_1424 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_1_2_reg_1429 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_153_1_3_reg_1434 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_1208_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_reg_1439 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_fu_1218_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp5_reg_1444 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_fu_1228_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp8_reg_1449 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_fu_1239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp11_reg_1454 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_107_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_107_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_108_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_108_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_109_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_110_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_110_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_111_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_112_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_112_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_113_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_114_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_114_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_115_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_115_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_116_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_116_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_117_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_117_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_118_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_118_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_119_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_119_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_120_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_120_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal grp_fu_121_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_121_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal OP1_V_2_cast_fu_1008_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_112_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_119_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_115_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_117_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (50 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_108_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_110_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal grp_fu_107_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal tmp3_fu_1203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp6_fu_1213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp9_fu_1223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_108_fu_1200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp12_fu_1234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_fu_1247_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_106_fu_1244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp4_fu_1256_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp7_fu_1266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp10_fu_1275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_0_V_write_assig_fu_1251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_1_V_write_assig_fu_1261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_2_V_write_assig_fu_1270_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal res_3_V_write_assig_fu_1279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_106_ce : STD_LOGIC;
    signal grp_fu_107_ce : STD_LOGIC;
    signal grp_fu_108_ce : STD_LOGIC;
    signal grp_fu_109_ce : STD_LOGIC;
    signal grp_fu_110_ce : STD_LOGIC;
    signal grp_fu_111_ce : STD_LOGIC;
    signal grp_fu_112_ce : STD_LOGIC;
    signal grp_fu_113_ce : STD_LOGIC;
    signal grp_fu_114_ce : STD_LOGIC;
    signal grp_fu_115_ce : STD_LOGIC;
    signal grp_fu_116_ce : STD_LOGIC;
    signal grp_fu_117_ce : STD_LOGIC;
    signal grp_fu_118_ce : STD_LOGIC;
    signal grp_fu_119_ce : STD_LOGIC;
    signal grp_fu_120_ce : STD_LOGIC;
    signal grp_fu_121_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal data_0_V_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_1_V_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_2_V_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal data_3_V_read_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (31 downto 0);

    component encoder_decoder_mpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component encoder_decoder_mwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component encoder_decoder_mxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component encoder_decoder_myd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (50 downto 0) );
    end component;


    component encoder_decoder_mocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component encoder_decoder_mzec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (26 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;



begin
    encoder_decoder_mpcA_U84 : component encoder_decoder_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_106_p0,
        din1 => grp_fu_106_p1,
        ce => grp_fu_106_ce,
        dout => grp_fu_106_p2);

    encoder_decoder_mwdI_U85 : component encoder_decoder_mwdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_107_p0,
        din1 => grp_fu_107_p1,
        ce => grp_fu_107_ce,
        dout => grp_fu_107_p2);

    encoder_decoder_mxdS_U86 : component encoder_decoder_mxdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_108_p0,
        din1 => grp_fu_108_p1,
        ce => grp_fu_108_ce,
        dout => grp_fu_108_p2);

    encoder_decoder_myd2_U87 : component encoder_decoder_myd2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_2_V_read_int_reg,
        din1 => grp_fu_109_p1,
        ce => grp_fu_109_ce,
        dout => grp_fu_109_p2);

    encoder_decoder_mpcA_U88 : component encoder_decoder_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_110_p0,
        din1 => grp_fu_110_p1,
        ce => grp_fu_110_ce,
        dout => grp_fu_110_p2);

    encoder_decoder_myd2_U89 : component encoder_decoder_myd2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 19,
        dout_WIDTH => 51)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_0_V_read_5_reg_1313,
        din1 => grp_fu_111_p1,
        ce => grp_fu_111_ce,
        dout => grp_fu_111_p2);

    encoder_decoder_mpcA_U90 : component encoder_decoder_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_112_p0,
        din1 => grp_fu_112_p1,
        ce => grp_fu_112_ce,
        dout => grp_fu_112_p2);

    encoder_decoder_mwdI_U91 : component encoder_decoder_mwdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_113_p0,
        din1 => grp_fu_113_p1,
        ce => grp_fu_113_ce,
        dout => grp_fu_113_p2);

    encoder_decoder_mocq_U92 : component encoder_decoder_mocq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 25,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_114_p0,
        din1 => grp_fu_114_p1,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p2);

    encoder_decoder_mpcA_U93 : component encoder_decoder_mpcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_115_p0,
        din1 => grp_fu_115_p1,
        ce => grp_fu_115_ce,
        dout => grp_fu_115_p2);

    encoder_decoder_mwdI_U94 : component encoder_decoder_mwdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 26,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_116_p0,
        din1 => grp_fu_116_p1,
        ce => grp_fu_116_ce,
        dout => grp_fu_116_p2);

    encoder_decoder_mxdS_U95 : component encoder_decoder_mxdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_117_p0,
        din1 => grp_fu_117_p1,
        ce => grp_fu_117_ce,
        dout => grp_fu_117_p2);

    encoder_decoder_mxdS_U96 : component encoder_decoder_mxdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_118_p0,
        din1 => grp_fu_118_p1,
        ce => grp_fu_118_ce,
        dout => grp_fu_118_p2);

    encoder_decoder_mzec_U97 : component encoder_decoder_mzec
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_119_p0,
        din1 => grp_fu_119_p1,
        ce => grp_fu_119_ce,
        dout => grp_fu_119_p2);

    encoder_decoder_mxdS_U98 : component encoder_decoder_mxdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_120_p0,
        din1 => grp_fu_120_p1,
        ce => grp_fu_120_ce,
        dout => grp_fu_120_p2);

    encoder_decoder_mxdS_U99 : component encoder_decoder_mxdS
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 27,
        dout_WIDTH => 56)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_121_p0,
        din1 => grp_fu_121_p1,
        ce => grp_fu_121_ce,
        dout => grp_fu_121_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= res_0_V_write_assig_fu_1251_p2;
                ap_return_1_int_reg <= res_1_V_write_assig_fu_1261_p2;
                ap_return_2_int_reg <= res_2_V_write_assig_fu_1270_p2;
                ap_return_3_int_reg <= res_3_V_write_assig_fu_1279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_0_V_read_5_reg_1313 <= data_0_V_read_int_reg;
                data_1_V_read_5_reg_1308 <= data_1_V_read_int_reg;
                tmp11_reg_1454 <= tmp11_fu_1239_p2;
                tmp2_reg_1439 <= tmp2_fu_1208_p2;
                tmp5_reg_1444 <= tmp5_fu_1218_p2;
                tmp8_reg_1449 <= tmp8_fu_1228_p2;
                tmp_105_reg_1399 <= grp_fu_117_p2(55 downto 24);
                tmp_107_reg_1369 <= grp_fu_109_p2(50 downto 24);
                tmp_153_0_2_reg_1409 <= grp_fu_116_p2(55 downto 24);
                tmp_153_0_3_reg_1414 <= grp_fu_106_p2(55 downto 24);
                tmp_153_1_1_reg_1424 <= grp_fu_108_p2(55 downto 24);
                tmp_153_1_2_reg_1429 <= grp_fu_110_p2(55 downto 24);
                tmp_153_1_3_reg_1434 <= grp_fu_107_p2(55 downto 24);
                tmp_153_1_reg_1419 <= grp_fu_114_p2(55 downto 24);
                tmp_153_2_1_reg_1364 <= grp_fu_112_p2(55 downto 24);
                tmp_153_2_3_reg_1374 <= grp_fu_121_p2(55 downto 24);
                tmp_153_2_reg_1359 <= grp_fu_113_p2(55 downto 24);
                tmp_153_3_1_reg_1384 <= grp_fu_115_p2(55 downto 24);
                tmp_153_3_2_reg_1389 <= grp_fu_118_p2(55 downto 24);
                tmp_153_3_3_reg_1394 <= grp_fu_120_p2(55 downto 24);
                tmp_153_3_reg_1379 <= grp_fu_119_p2(55 downto 24);
                tmp_s_reg_1404 <= grp_fu_111_p2(50 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                data_0_V_read_int_reg <= data_0_V_read;
                data_1_V_read_int_reg <= data_1_V_read;
                data_2_V_read_int_reg <= data_2_V_read;
                data_3_V_read_int_reg <= data_3_V_read;
            end if;
        end if;
    end process;
        OP1_V_1_cast_fu_1033_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_1_V_read_5_reg_1308),56));

    OP1_V_2_cast_fu_1008_p0 <= data_2_V_read_int_reg;
        OP1_V_2_cast_fu_1008_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(OP1_V_2_cast_fu_1008_p0),56));

        OP1_V_3_cast_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_3_V_read_int_reg),56));

        OP1_V_cast_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_0_V_read_5_reg_1313),56));

        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(res_0_V_write_assig_fu_1251_p2, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= res_0_V_write_assig_fu_1251_p2;
        end if; 
    end process;


    ap_return_1_assign_proc : process(res_1_V_write_assig_fu_1261_p2, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= res_1_V_write_assig_fu_1261_p2;
        end if; 
    end process;


    ap_return_2_assign_proc : process(res_2_V_write_assig_fu_1270_p2, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= res_2_V_write_assig_fu_1270_p2;
        end if; 
    end process;


    ap_return_3_assign_proc : process(res_3_V_write_assig_fu_1279_p2, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= res_3_V_write_assig_fu_1279_p2;
        end if; 
    end process;


    grp_fu_106_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_106_ce <= ap_const_logic_1;
        else 
            grp_fu_106_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_106_p0 <= OP1_V_cast_fu_1027_p1(32 - 1 downto 0);
    grp_fu_106_p1 <= ap_const_lv56_1D4FD32(26 - 1 downto 0);

    grp_fu_107_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_107_ce <= ap_const_logic_1;
        else 
            grp_fu_107_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_107_p0 <= OP1_V_1_cast_fu_1033_p1(32 - 1 downto 0);
    grp_fu_107_p1 <= ap_const_lv56_FFFFFFFE0D9AB0(26 - 1 downto 0);

    grp_fu_108_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_108_ce <= ap_const_logic_1;
        else 
            grp_fu_108_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_108_p0 <= OP1_V_1_cast_fu_1033_p1(32 - 1 downto 0);
    grp_fu_108_p1 <= ap_const_lv56_FFFFFFFC7E7638(27 - 1 downto 0);

    grp_fu_109_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_109_ce <= ap_const_logic_1;
        else 
            grp_fu_109_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_109_p1 <= ap_const_lv51_209B0(19 - 1 downto 0);

    grp_fu_110_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_110_ce <= ap_const_logic_1;
        else 
            grp_fu_110_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_110_p0 <= OP1_V_1_cast_fu_1033_p1(32 - 1 downto 0);
    grp_fu_110_p1 <= ap_const_lv56_1E690C3(26 - 1 downto 0);

    grp_fu_111_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_111_ce <= ap_const_logic_1;
        else 
            grp_fu_111_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_111_p1 <= ap_const_lv51_242B3(19 - 1 downto 0);

    grp_fu_112_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_112_ce <= ap_const_logic_1;
        else 
            grp_fu_112_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_112_p0 <= OP1_V_2_cast_fu_1008_p1(32 - 1 downto 0);
    grp_fu_112_p1 <= ap_const_lv56_11A736D(26 - 1 downto 0);

    grp_fu_113_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_113_ce <= ap_const_logic_1;
        else 
            grp_fu_113_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_113_p0 <= OP1_V_2_cast_fu_1008_p1(32 - 1 downto 0);
    grp_fu_113_p1 <= ap_const_lv56_FFFFFFFED41943(26 - 1 downto 0);

    grp_fu_114_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_114_ce <= ap_const_logic_1;
        else 
            grp_fu_114_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_114_p0 <= OP1_V_1_cast_fu_1033_p1(32 - 1 downto 0);
    grp_fu_114_p1 <= ap_const_lv56_C8FD27(25 - 1 downto 0);

    grp_fu_115_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_115_ce <= ap_const_logic_1;
        else 
            grp_fu_115_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_115_p0 <= OP1_V_3_cast_fu_1015_p1(32 - 1 downto 0);
    grp_fu_115_p1 <= ap_const_lv56_1C58863(26 - 1 downto 0);

    grp_fu_116_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_116_ce <= ap_const_logic_1;
        else 
            grp_fu_116_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_116_p0 <= OP1_V_cast_fu_1027_p1(32 - 1 downto 0);
    grp_fu_116_p1 <= ap_const_lv56_FFFFFFFED2898C(26 - 1 downto 0);

    grp_fu_117_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_117_ce <= ap_const_logic_1;
        else 
            grp_fu_117_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_117_p0 <= OP1_V_cast_fu_1027_p1(32 - 1 downto 0);
    grp_fu_117_p1 <= ap_const_lv56_FFFFFFFD204C14(27 - 1 downto 0);

    grp_fu_118_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_118_ce <= ap_const_logic_1;
        else 
            grp_fu_118_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_118_p0 <= OP1_V_3_cast_fu_1015_p1(32 - 1 downto 0);
    grp_fu_118_p1 <= ap_const_lv56_FFFFFFFD3C5E87(27 - 1 downto 0);

    grp_fu_119_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_119_ce <= ap_const_logic_1;
        else 
            grp_fu_119_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_119_p0 <= OP1_V_3_cast_fu_1015_p1(32 - 1 downto 0);
    grp_fu_119_p1 <= ap_const_lv56_26B80DF(27 - 1 downto 0);

    grp_fu_120_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_120_ce <= ap_const_logic_1;
        else 
            grp_fu_120_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_120_p0 <= OP1_V_3_cast_fu_1015_p1(32 - 1 downto 0);
    grp_fu_120_p1 <= ap_const_lv56_FFFFFFFDB73A83(27 - 1 downto 0);

    grp_fu_121_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_121_ce <= ap_const_logic_1;
        else 
            grp_fu_121_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_121_p0 <= OP1_V_2_cast_fu_1008_p1(32 - 1 downto 0);
    grp_fu_121_p1 <= ap_const_lv56_FFFFFFFDC9B874(27 - 1 downto 0);
    res_0_V_write_assig_fu_1251_p2 <= std_logic_vector(unsigned(tmp2_reg_1439) + unsigned(tmp1_fu_1247_p2));
    res_1_V_write_assig_fu_1261_p2 <= std_logic_vector(unsigned(tmp5_reg_1444) + unsigned(tmp4_fu_1256_p2));
    res_2_V_write_assig_fu_1270_p2 <= std_logic_vector(unsigned(tmp8_reg_1449) + unsigned(tmp7_fu_1266_p2));
    res_3_V_write_assig_fu_1279_p2 <= std_logic_vector(unsigned(tmp11_reg_1454) + unsigned(tmp10_fu_1275_p2));
    tmp10_fu_1275_p2 <= std_logic_vector(unsigned(tmp_153_0_3_reg_1414) + unsigned(tmp_153_1_3_reg_1434));
    tmp11_fu_1239_p2 <= std_logic_vector(unsigned(tmp12_fu_1234_p2) + unsigned(tmp_153_2_3_reg_1374));
    tmp12_fu_1234_p2 <= std_logic_vector(unsigned(tmp_153_3_3_reg_1394) + unsigned(ap_const_lv32_C3F5E5));
    tmp1_fu_1247_p2 <= std_logic_vector(unsigned(tmp_105_reg_1399) + unsigned(tmp_153_1_reg_1419));
    tmp2_fu_1208_p2 <= std_logic_vector(unsigned(tmp3_fu_1203_p2) + unsigned(tmp_153_2_reg_1359));
    tmp3_fu_1203_p2 <= std_logic_vector(unsigned(tmp_153_3_reg_1379) + unsigned(ap_const_lv32_FE0FDC17));
    tmp4_fu_1256_p2 <= std_logic_vector(signed(tmp_106_fu_1244_p1) + signed(tmp_153_1_1_reg_1424));
    tmp5_fu_1218_p2 <= std_logic_vector(unsigned(tmp6_fu_1213_p2) + unsigned(tmp_153_2_1_reg_1364));
    tmp6_fu_1213_p2 <= std_logic_vector(unsigned(tmp_153_3_1_reg_1384) + unsigned(ap_const_lv32_FF73B05C));
    tmp7_fu_1266_p2 <= std_logic_vector(unsigned(tmp_153_0_2_reg_1409) + unsigned(tmp_153_1_2_reg_1429));
    tmp8_fu_1228_p2 <= std_logic_vector(unsigned(tmp9_fu_1223_p2) + unsigned(tmp_108_fu_1200_p1));
    tmp9_fu_1223_p2 <= std_logic_vector(unsigned(tmp_153_3_2_reg_1389) + unsigned(ap_const_lv32_18AE46E));
        tmp_106_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_1404),32));

        tmp_108_fu_1200_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_107_reg_1369),32));

end behav;
