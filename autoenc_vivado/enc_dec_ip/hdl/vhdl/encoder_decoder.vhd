-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder_decoder is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis_enc_data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_in_TVALID : IN STD_LOGIC;
    axis_enc_data_in_TREADY : OUT STD_LOGIC;
    axis_enc_data_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axis_enc_data_in_TUSER : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_dec_data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_out_TVALID : OUT STD_LOGIC;
    axis_dec_data_out_TREADY : IN STD_LOGIC;
    axis_dec_data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axis_dec_data_out_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of encoder_decoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_decoder,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.940000,HLS_SYN_LAT=213,HLS_SYN_TPT=none,HLS_SYN_MEM=27,HLS_SYN_DSP=218,HLS_SYN_FF=31726,HLS_SYN_LUT=34287,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (127 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (127 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (127 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (127 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (127 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (127 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (127 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (127 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (127 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (127 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (127 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_4 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_user_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_user_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_user_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_user_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_user_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_user_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_user_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_user_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_user_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_user_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_user_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_user_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_user_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal SNR_REG_V : STD_LOGIC_VECTOR (7 downto 0);
    signal AWGN_EN_REG : STD_LOGIC_VECTOR (31 downto 0);
    signal uut_lfsr128_V : STD_LOGIC_VECTOR (127 downto 0) := "00000001001000110100010101100111100010011010101111001101111011110001001000110100010101100111100010011010101111001101111011110000";
    signal uut_lfsr128_V_1 : STD_LOGIC_VECTOR (127 downto 0) := "10101011110011011110111100000000000100100011010001010110011110001001101010111100110111101111000100100011010001010110011110001001";
    signal axis_enc_data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal axis_dec_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal tmp_225_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal AWGN_EN_REG_read_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal snr_sample_stream_V_s_din : STD_LOGIC_VECTOR (7 downto 0);
    signal snr_sample_stream_V_s_full_n : STD_LOGIC;
    signal snr_sample_stream_V_s_write : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal tmp_V_reg_972 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_V_8_reg_1008 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal snr_sample_stream_V_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal snr_sample_stream_V_s_empty_n : STD_LOGIC;
    signal snr_sample_stream_V_s_read : STD_LOGIC;
    signal ap_block_state2 : BOOLEAN;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_V_10_reg_1018 : STD_LOGIC_VECTOR (7 downto 0);
    signal noiseSample_V_reg_1028 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_operator_s_fu_324_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_324_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_324_ap_done : STD_LOGIC;
    signal grp_operator_s_fu_336_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_336_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_336_ap_done : STD_LOGIC;
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal noiseSample_V_1_reg_1033 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_V_9_reg_1038 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal noise_sample_stream0_1_dout : STD_LOGIC_VECTOR (25 downto 0);
    signal noise_sample_stream0_1_empty_n : STD_LOGIC;
    signal noise_sample_stream0_1_read : STD_LOGIC;
    signal noise_sample_stream1_1_dout : STD_LOGIC_VECTOR (25 downto 0);
    signal noise_sample_stream1_1_empty_n : STD_LOGIC;
    signal noise_sample_stream1_1_read : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal tmp_V_11_reg_1043 : STD_LOGIC_VECTOR (25 downto 0);
    signal i_2_fu_393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1051 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_224_fu_399_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_224_reg_1056 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1061 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder_fu_310_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_data_out_V_reg_1066 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal p_Val2_s_fu_637_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decoder_fu_315_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal dec_data_out_V_reg_1081 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal tmp_225_fu_686_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal i_3_fu_694_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1091 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_226_fu_700_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_226_reg_1096 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_237_fu_782_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_237_reg_1103 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_240_fu_792_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_240_reg_1108 : STD_LOGIC_VECTOR (127 downto 0);
    signal axis_dec_data_out_it_fu_848_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_it_1_fu_853_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_it_2_fu_867_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_it_2_reg_1123 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_it_3_fu_881_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoder_fu_310_ap_start : STD_LOGIC;
    signal grp_encoder_fu_310_ap_done : STD_LOGIC;
    signal grp_encoder_fu_310_ap_idle : STD_LOGIC;
    signal grp_encoder_fu_310_ap_ready : STD_LOGIC;
    signal grp_encoder_fu_310_data_V_blk_n : STD_LOGIC;
    signal grp_decoder_fu_315_ap_start : STD_LOGIC;
    signal grp_decoder_fu_315_ap_done : STD_LOGIC;
    signal grp_decoder_fu_315_ap_idle : STD_LOGIC;
    signal grp_decoder_fu_315_ap_ready : STD_LOGIC;
    signal grp_decoder_fu_315_data_V_blk_n : STD_LOGIC;
    signal grp_operator_s_fu_324_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_324_ap_return_0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_operator_s_fu_324_ap_return_1 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_operator_s_fu_336_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_336_ap_return_0 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_operator_s_fu_336_ap_return_1 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_288 : STD_LOGIC_VECTOR (2 downto 0);
    signal i5_reg_299 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state128 : BOOLEAN;
    signal ap_block_state128_io : BOOLEAN;
    signal grp_encoder_fu_310_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_NS_fsm_state9 : STD_LOGIC;
    signal enc_data_in_V_fu_194 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_decoder_fu_315_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_NS_fsm_state110 : STD_LOGIC;
    signal dec_data_in_V_fu_198 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal grp_operator_s_fu_324_ap_start_reg : STD_LOGIC := '0';
    signal grp_operator_s_fu_336_ap_start_reg : STD_LOGIC := '0';
    signal noise_sample_stream0_1_full_n : STD_LOGIC;
    signal noise_sample_stream0_1_write : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal noise_sample_stream1_1_full_n : STD_LOGIC;
    signal noise_sample_stream1_1_write : STD_LOGIC;
    signal ap_block_state5 : BOOLEAN;
    signal tmp_keep_V_fu_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_fu_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_2_fu_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_3_fu_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_user_V_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_user_V_1_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_user_V_2_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_user_V_3_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_last_V_fu_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_fu_186 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_fu_190 : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_in_V_1_fu_626_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal dec_data_in_V_1_fu_675_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_100_fu_487_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_101_fu_494_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_245_fu_506_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_244_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_246_fu_510_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_248_fu_518_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_249_fu_524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_251_fu_540_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_250_fu_532_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_252_fu_548_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_247_fu_514_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_253_fu_554_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_256_fu_566_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_257_fu_572_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_254_fu_558_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_255_fu_562_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_259_fu_590_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_260_fu_596_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_602_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_261_fu_608_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_258_fu_582_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_262_fu_614_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_263_fu_620_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_85_fu_651_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_62_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_667_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_98_fu_704_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_99_fu_712_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_228_fu_724_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_229_fu_728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_227_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_231_fu_741_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_233_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_230_fu_732_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_232_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_234_fu_759_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_236_fu_774_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_235_fu_767_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_238_fu_788_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_239_fu_834_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_241_fu_837_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_242_fu_843_p2 : STD_LOGIC_VECTOR (127 downto 0);

    component encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_ap_vld : IN STD_LOGIC;
        data_V : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0);
        data_V_blk_n : OUT STD_LOGIC );
    end component;


    component decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_ap_vld : IN STD_LOGIC;
        data_V : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0);
        data_V_blk_n : OUT STD_LOGIC );
    end component;


    component operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        awgn_26_lfsr128_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        snr_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component encoder_decoder_mBew IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component encoder_decoder_mCeG IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component encoder_decoder_mDeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fifo_w26_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (25 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (25 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d100_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoder_decoder_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        SNR_REG_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWGN_EN_REG : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    encoder_decoder_ctrl_s_axi_U : component encoder_decoder_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        SNR_REG_V => SNR_REG_V,
        AWGN_EN_REG => AWGN_EN_REG);

    grp_encoder_fu_310 : component encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoder_fu_310_ap_start,
        ap_done => grp_encoder_fu_310_ap_done,
        ap_idle => grp_encoder_fu_310_ap_idle,
        ap_ready => grp_encoder_fu_310_ap_ready,
        data_V_ap_vld => ap_const_logic_1,
        data_V => enc_data_in_V_fu_194,
        ap_return => grp_encoder_fu_310_ap_return,
        data_V_blk_n => grp_encoder_fu_310_data_V_blk_n);

    grp_decoder_fu_315 : component decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decoder_fu_315_ap_start,
        ap_done => grp_decoder_fu_315_ap_done,
        ap_idle => grp_decoder_fu_315_ap_idle,
        ap_ready => grp_decoder_fu_315_ap_ready,
        data_V_ap_vld => ap_const_logic_1,
        data_V => dec_data_in_V_fu_198,
        ap_return => grp_decoder_fu_315_ap_return,
        data_V_blk_n => grp_decoder_fu_315_data_V_blk_n);

    grp_operator_s_fu_324 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_s_fu_324_ap_start,
        ap_done => grp_operator_s_fu_324_ap_done,
        ap_idle => grp_operator_s_fu_324_ap_idle,
        ap_ready => grp_operator_s_fu_324_ap_ready,
        awgn_26_lfsr128_V_read => uut_lfsr128_V,
        snr_V_read => tmp_V_8_reg_1008,
        ap_return_0 => grp_operator_s_fu_324_ap_return_0,
        ap_return_1 => grp_operator_s_fu_324_ap_return_1);

    grp_operator_s_fu_336 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_s_fu_336_ap_start,
        ap_done => grp_operator_s_fu_336_ap_done,
        ap_idle => grp_operator_s_fu_336_ap_idle,
        ap_ready => grp_operator_s_fu_336_ap_ready,
        awgn_26_lfsr128_V_read => uut_lfsr128_V_1,
        snr_V_read => tmp_V_10_reg_1018,
        ap_return_0 => grp_operator_s_fu_336_ap_return_0,
        ap_return_1 => grp_operator_s_fu_336_ap_return_1);

    encoder_decoder_mBew_U115 : component encoder_decoder_mBew
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => tmp_keep_V_fu_146,
        din1 => tmp_keep_V_1_fu_150,
        din2 => tmp_keep_V_2_fu_154,
        din3 => tmp_keep_V_3_fu_158,
        din4 => tmp_226_reg_1096,
        dout => axis_dec_data_out_it_1_fu_853_p6);

    encoder_decoder_mCeG_U116 : component encoder_decoder_mCeG
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_last_V_fu_178,
        din1 => tmp_last_V_1_fu_182,
        din2 => tmp_last_V_2_fu_186,
        din3 => tmp_last_V_3_fu_190,
        din4 => tmp_226_reg_1096,
        dout => axis_dec_data_out_it_2_fu_867_p6);

    encoder_decoder_mDeQ_U117 : component encoder_decoder_mDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => tmp_user_V_fu_162,
        din1 => tmp_user_V_1_fu_166,
        din2 => tmp_user_V_2_fu_170,
        din3 => tmp_user_V_3_fu_174,
        din4 => tmp_226_reg_1096,
        dout => axis_dec_data_out_it_3_fu_881_p6);

    noise_sample_stream0_1_fifo_U : component fifo_w26_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => noiseSample_V_reg_1028,
        if_full_n => noise_sample_stream0_1_full_n,
        if_write => noise_sample_stream0_1_write,
        if_dout => noise_sample_stream0_1_dout,
        if_empty_n => noise_sample_stream0_1_empty_n,
        if_read => noise_sample_stream0_1_read);

    noise_sample_stream1_1_fifo_U : component fifo_w26_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => noiseSample_V_1_reg_1033,
        if_full_n => noise_sample_stream1_1_full_n,
        if_write => noise_sample_stream1_1_write,
        if_dout => noise_sample_stream1_1_dout,
        if_empty_n => noise_sample_stream1_1_empty_n,
        if_read => noise_sample_stream1_1_read);

    snr_sample_stream_V_s_fifo_U : component fifo_w8_d100_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => snr_sample_stream_V_s_din,
        if_full_n => snr_sample_stream_V_s_full_n,
        if_write => snr_sample_stream_V_s_write,
        if_dout => snr_sample_stream_V_s_dout,
        if_empty_n => snr_sample_stream_V_s_empty_n,
        if_read => snr_sample_stream_V_s_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_rd <= not(axis_dec_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_wr <= not(axis_dec_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_rd <= not(axis_dec_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_wr <= not(axis_dec_data_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_rd <= not(axis_dec_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_wr <= not(axis_dec_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_user_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_user_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_user_V_1_sel_rd <= not(axis_dec_data_out_V_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_user_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_user_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_user_V_1_sel_wr <= not(axis_dec_data_out_V_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_user_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_user_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_user_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_user_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_user_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_user_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_user_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_user_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_user_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_user_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_user_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_user_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_user_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_user_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_rd <= not(axis_enc_data_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_wr <= not(axis_enc_data_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_rd <= not(axis_enc_data_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_wr <= not(axis_enc_data_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_rd <= not(axis_enc_data_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_wr <= not(axis_enc_data_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_user_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_user_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_user_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_user_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_user_V_0_sel_rd <= not(axis_enc_data_in_V_user_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_user_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_user_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_user_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_user_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_user_V_0_sel_wr <= not(axis_enc_data_in_V_user_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_user_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_user_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_user_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_user_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_user_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_user_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_user_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_user_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_user_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_user_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_user_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_user_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_user_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_user_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_user_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_user_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_user_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_user_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_decoder_fu_315_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decoder_fu_315_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state110) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
                    grp_decoder_fu_315_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoder_fu_315_ap_ready = ap_const_logic_1)) then 
                    grp_decoder_fu_315_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encoder_fu_310_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoder_fu_310_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state9) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                    grp_encoder_fu_310_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoder_fu_310_ap_ready = ap_const_logic_1)) then 
                    grp_encoder_fu_310_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_324_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_s_fu_324_ap_start_reg <= ap_const_logic_0;
            else
                if (((snr_sample_stream_V_s_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_operator_s_fu_324_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_324_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_324_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_336_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_s_fu_336_ap_start_reg <= ap_const_logic_0;
            else
                if (((snr_sample_stream_V_s_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_operator_s_fu_336_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_336_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_336_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i5_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state128_io))) and (ap_const_logic_1 = ap_CS_fsm_state128) and (axis_dec_data_out_it_2_reg_1123 = ap_const_lv1_0) and (tmp_225_reg_1087 = ap_const_lv1_0))) then 
                i5_reg_299 <= i_3_reg_1091;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
                i5_reg_299 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_288 <= i_2_reg_1051;
            elsif ((not(((noise_sample_stream1_1_empty_n = ap_const_logic_0) or (noise_sample_stream0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_reg_288 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((snr_sample_stream_V_s_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                AWGN_EN_REG_read_reg_967 <= AWGN_EN_REG;
                tmp_V_reg_972 <= SNR_REG_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_848_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_848_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_A <= axis_dec_data_out_it_1_fu_853_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_B <= axis_dec_data_out_it_1_fu_853_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_A <= axis_dec_data_out_it_2_fu_867_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_B <= axis_dec_data_out_it_2_fu_867_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_user_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_user_V_1_payload_A <= axis_dec_data_out_it_3_fu_881_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_user_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_user_V_1_payload_B <= axis_dec_data_out_it_3_fu_881_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                axis_dec_data_out_it_2_reg_1123 <= axis_dec_data_out_it_2_fu_867_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_A <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_B <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_user_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_user_V_0_payload_A <= axis_enc_data_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_user_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_user_V_0_payload_B <= axis_enc_data_in_TUSER;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state109)) then
                dec_data_in_V_fu_198 <= dec_data_in_V_1_fu_675_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state125)) then
                dec_data_out_V_reg_1081 <= grp_decoder_fu_315_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                enc_data_in_V_fu_194 <= enc_data_in_V_1_fu_626_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                enc_data_out_V_reg_1066 <= grp_encoder_fu_310_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_2_reg_1051 <= i_2_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state126)) then
                i_3_reg_1091 <= i_3_fu_694_p2;
                tmp_225_reg_1087 <= i5_reg_299(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                noiseSample_V_1_reg_1033 <= grp_operator_s_fu_336_ap_return_0;
                noiseSample_V_reg_1028 <= grp_operator_s_fu_324_ap_return_0;
                uut_lfsr128_V <= grp_operator_s_fu_324_ap_return_1;
                uut_lfsr128_V_1 <= grp_operator_s_fu_336_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) and (tmp_s_reg_1061 = ap_const_lv1_1))) then
                p_Val2_8_reg_1076 <= grp_encoder_fu_310_ap_return(63 downto 32);
                p_Val2_s_reg_1071 <= p_Val2_s_fu_637_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_387_p2 = ap_const_lv1_0))) then
                tmp_224_reg_1056 <= tmp_224_fu_399_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state126) and (tmp_225_fu_686_p3 = ap_const_lv1_0))) then
                tmp_226_reg_1096 <= tmp_226_fu_700_p1;
                    tmp_237_reg_1103(7 downto 1) <= tmp_237_fu_782_p2(7 downto 1);
                tmp_240_reg_1108 <= tmp_240_fu_792_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((snr_sample_stream_V_s_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_V_10_reg_1018 <= snr_sample_stream_V_s_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((noise_sample_stream1_1_empty_n = ap_const_logic_0) or (noise_sample_stream0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                tmp_V_11_reg_1043 <= noise_sample_stream1_1_dout;
                tmp_V_9_reg_1038 <= noise_sample_stream0_1_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((snr_sample_stream_V_s_empty_n = ap_const_logic_0) or (snr_sample_stream_V_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                tmp_V_8_reg_1008 <= snr_sample_stream_V_s_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_224_reg_1056 = ap_const_lv2_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_1_fu_150 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_1_fu_182 <= axis_enc_data_in_V_last_V_0_data_out;
                tmp_user_V_1_fu_166 <= axis_enc_data_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_224_reg_1056 = ap_const_lv2_2) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_2_fu_154 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_2_fu_186 <= axis_enc_data_in_V_last_V_0_data_out;
                tmp_user_V_2_fu_170 <= axis_enc_data_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_224_reg_1056 = ap_const_lv2_3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_3_fu_158 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_3_fu_190 <= axis_enc_data_in_V_last_V_0_data_out;
                tmp_user_V_3_fu_174 <= axis_enc_data_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_224_reg_1056 = ap_const_lv2_0) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_fu_146 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_fu_178 <= axis_enc_data_in_V_last_V_0_data_out;
                tmp_user_V_fu_162 <= axis_enc_data_in_V_user_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_387_p2 = ap_const_lv1_1))) then
                tmp_s_reg_1061 <= tmp_s_fu_403_p2;
            end if;
        end if;
    end process;
    tmp_237_reg_1103(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, axis_enc_data_in_V_data_V_0_vld_out, axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_user_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state8, ap_CS_fsm_state127, ap_CS_fsm_state128, tmp_225_reg_1087, snr_sample_stream_V_s_full_n, ap_CS_fsm_state2, snr_sample_stream_V_s_empty_n, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state6, noise_sample_stream0_1_empty_n, noise_sample_stream1_1_empty_n, ap_CS_fsm_state7, exitcond_fu_387_p2, tmp_225_fu_686_p3, ap_CS_fsm_state126, axis_dec_data_out_it_2_reg_1123, ap_block_state128_io, noise_sample_stream0_1_full_n, ap_CS_fsm_state5, noise_sample_stream1_1_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((snr_sample_stream_V_s_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((snr_sample_stream_V_s_empty_n = ap_const_logic_0) or (snr_sample_stream_V_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((snr_sample_stream_V_s_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if ((not(((noise_sample_stream1_1_full_n = ap_const_logic_0) or (noise_sample_stream0_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((noise_sample_stream1_1_empty_n = ap_const_logic_0) or (noise_sample_stream0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond_fu_387_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state126) and (tmp_225_fu_686_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state128;
                else
                    ap_NS_fsm <= ap_ST_fsm_state127;
                end if;
            when ap_ST_fsm_state127 => 
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then
                    ap_NS_fsm <= ap_ST_fsm_state128;
                else
                    ap_NS_fsm <= ap_ST_fsm_state127;
                end if;
            when ap_ST_fsm_state128 => 
                if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state128_io))) and (ap_const_logic_1 = ap_CS_fsm_state128) and ((axis_dec_data_out_it_2_reg_1123 = ap_const_lv1_1) or (tmp_225_reg_1087 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state128_io))) and (ap_const_logic_1 = ap_CS_fsm_state128) and (axis_dec_data_out_it_2_reg_1123 = ap_const_lv1_0) and (tmp_225_reg_1087 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state126;
                else
                    ap_NS_fsm <= ap_ST_fsm_state128;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state110 <= ap_NS_fsm(109);
    ap_NS_fsm_state9 <= ap_NS_fsm(8);

    ap_block_state1_assign_proc : process(ap_start, snr_sample_stream_V_s_full_n)
    begin
                ap_block_state1 <= ((snr_sample_stream_V_s_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state128_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_user_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state128 <= ((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state128_io_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, tmp_225_reg_1087)
    begin
                ap_block_state128_io <= ((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_225_reg_1087 = ap_const_lv1_0));
    end process;


    ap_block_state2_assign_proc : process(snr_sample_stream_V_s_full_n, snr_sample_stream_V_s_empty_n)
    begin
                ap_block_state2 <= ((snr_sample_stream_V_s_empty_n = ap_const_logic_0) or (snr_sample_stream_V_s_full_n = ap_const_logic_0));
    end process;


    ap_block_state4_on_subcall_done_assign_proc : process(grp_operator_s_fu_324_ap_done, grp_operator_s_fu_336_ap_done)
    begin
                ap_block_state4_on_subcall_done <= ((grp_operator_s_fu_336_ap_done = ap_const_logic_0) or (grp_operator_s_fu_324_ap_done = ap_const_logic_0));
    end process;


    ap_block_state5_assign_proc : process(noise_sample_stream0_1_full_n, noise_sample_stream1_1_full_n)
    begin
                ap_block_state5 <= ((noise_sample_stream1_1_full_n = ap_const_logic_0) or (noise_sample_stream0_1_full_n = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(noise_sample_stream0_1_empty_n, noise_sample_stream1_1_empty_n)
    begin
                ap_block_state6 <= ((noise_sample_stream1_1_empty_n = ap_const_logic_0) or (noise_sample_stream0_1_empty_n = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_user_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state128, tmp_225_reg_1087, axis_dec_data_out_it_2_reg_1123, ap_block_state128_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state128_io))) and (ap_const_logic_1 = ap_CS_fsm_state128) and ((axis_dec_data_out_it_2_reg_1123 = ap_const_lv1_1) or (tmp_225_reg_1087 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_user_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state128, tmp_225_reg_1087, axis_dec_data_out_it_2_reg_1123, ap_block_state128_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_user_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state128_io))) and (ap_const_logic_1 = ap_CS_fsm_state128) and ((axis_dec_data_out_it_2_reg_1123 = ap_const_lv1_1) or (tmp_225_reg_1087 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axis_dec_data_out_TDATA <= axis_dec_data_out_V_data_V_1_data_out;

    axis_dec_data_out_TDATA_blk_n_assign_proc : process(axis_dec_data_out_V_data_V_1_state, ap_CS_fsm_state127, ap_CS_fsm_state128, tmp_225_reg_1087)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state127) or ((ap_const_logic_1 = ap_CS_fsm_state128) and (tmp_225_reg_1087 = ap_const_lv1_0)))) then 
            axis_dec_data_out_TDATA_blk_n <= axis_dec_data_out_V_data_V_1_state(1);
        else 
            axis_dec_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_dec_data_out_TKEEP <= axis_dec_data_out_V_keep_V_1_data_out;
    axis_dec_data_out_TLAST <= axis_dec_data_out_V_last_V_1_data_out;
    axis_dec_data_out_TUSER <= axis_dec_data_out_V_user_V_1_data_out;
    axis_dec_data_out_TVALID <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_V_data_V_1_ack_in <= axis_dec_data_out_V_data_V_1_state(1);
    axis_dec_data_out_V_data_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_data_V_1_data_out_assign_proc : process(axis_dec_data_out_V_data_V_1_payload_A, axis_dec_data_out_V_data_V_1_payload_B, axis_dec_data_out_V_data_V_1_sel)
    begin
        if ((axis_dec_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_B;
        else 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_load_A <= (not(axis_dec_data_out_V_data_V_1_sel_wr) and axis_dec_data_out_V_data_V_1_state_cmp_full);
    axis_dec_data_out_V_data_V_1_load_B <= (axis_dec_data_out_V_data_V_1_state_cmp_full and axis_dec_data_out_V_data_V_1_sel_wr);
    axis_dec_data_out_V_data_V_1_sel <= axis_dec_data_out_V_data_V_1_sel_rd;
    axis_dec_data_out_V_data_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_data_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state127)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_vld_out <= axis_dec_data_out_V_data_V_1_state(0);
    axis_dec_data_out_V_keep_V_1_ack_in <= axis_dec_data_out_V_keep_V_1_state(1);
    axis_dec_data_out_V_keep_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_keep_V_1_data_out_assign_proc : process(axis_dec_data_out_V_keep_V_1_payload_A, axis_dec_data_out_V_keep_V_1_payload_B, axis_dec_data_out_V_keep_V_1_sel)
    begin
        if ((axis_dec_data_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_B;
        else 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_load_A <= (not(axis_dec_data_out_V_keep_V_1_sel_wr) and axis_dec_data_out_V_keep_V_1_state_cmp_full);
    axis_dec_data_out_V_keep_V_1_load_B <= (axis_dec_data_out_V_keep_V_1_state_cmp_full and axis_dec_data_out_V_keep_V_1_sel_wr);
    axis_dec_data_out_V_keep_V_1_sel <= axis_dec_data_out_V_keep_V_1_sel_rd;
    axis_dec_data_out_V_keep_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_keep_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state127)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_vld_out <= axis_dec_data_out_V_keep_V_1_state(0);
    axis_dec_data_out_V_last_V_1_ack_in <= axis_dec_data_out_V_last_V_1_state(1);
    axis_dec_data_out_V_last_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_last_V_1_data_out_assign_proc : process(axis_dec_data_out_V_last_V_1_payload_A, axis_dec_data_out_V_last_V_1_payload_B, axis_dec_data_out_V_last_V_1_sel)
    begin
        if ((axis_dec_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_B;
        else 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_load_A <= (not(axis_dec_data_out_V_last_V_1_sel_wr) and axis_dec_data_out_V_last_V_1_state_cmp_full);
    axis_dec_data_out_V_last_V_1_load_B <= (axis_dec_data_out_V_last_V_1_state_cmp_full and axis_dec_data_out_V_last_V_1_sel_wr);
    axis_dec_data_out_V_last_V_1_sel <= axis_dec_data_out_V_last_V_1_sel_rd;
    axis_dec_data_out_V_last_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_last_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state127)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_vld_out <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_V_user_V_1_ack_in <= axis_dec_data_out_V_user_V_1_state(1);
    axis_dec_data_out_V_user_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_user_V_1_data_out_assign_proc : process(axis_dec_data_out_V_user_V_1_payload_A, axis_dec_data_out_V_user_V_1_payload_B, axis_dec_data_out_V_user_V_1_sel)
    begin
        if ((axis_dec_data_out_V_user_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_user_V_1_data_out <= axis_dec_data_out_V_user_V_1_payload_B;
        else 
            axis_dec_data_out_V_user_V_1_data_out <= axis_dec_data_out_V_user_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_user_V_1_load_A <= (not(axis_dec_data_out_V_user_V_1_sel_wr) and axis_dec_data_out_V_user_V_1_state_cmp_full);
    axis_dec_data_out_V_user_V_1_load_B <= (axis_dec_data_out_V_user_V_1_state_cmp_full and axis_dec_data_out_V_user_V_1_sel_wr);
    axis_dec_data_out_V_user_V_1_sel <= axis_dec_data_out_V_user_V_1_sel_rd;
    axis_dec_data_out_V_user_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_user_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_user_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state127)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state127))) then 
            axis_dec_data_out_V_user_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_user_V_1_vld_out <= axis_dec_data_out_V_user_V_1_state(0);
    axis_dec_data_out_it_fu_848_p1 <= tmp_242_fu_843_p2(32 - 1 downto 0);

    axis_enc_data_in_TDATA_blk_n_assign_proc : process(axis_enc_data_in_V_data_V_0_state, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            axis_enc_data_in_TDATA_blk_n <= axis_enc_data_in_V_data_V_0_state(0);
        else 
            axis_enc_data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_enc_data_in_TREADY <= axis_enc_data_in_V_last_V_0_state(1);
    axis_enc_data_in_V_data_V_0_ack_in <= axis_enc_data_in_V_data_V_0_state(1);

    axis_enc_data_in_V_data_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_data_V_0_data_out_assign_proc : process(axis_enc_data_in_V_data_V_0_payload_A, axis_enc_data_in_V_data_V_0_payload_B, axis_enc_data_in_V_data_V_0_sel)
    begin
        if ((axis_enc_data_in_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_B;
        else 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_data_V_0_load_A <= (not(axis_enc_data_in_V_data_V_0_sel_wr) and axis_enc_data_in_V_data_V_0_state_cmp_full);
    axis_enc_data_in_V_data_V_0_load_B <= (axis_enc_data_in_V_data_V_0_state_cmp_full and axis_enc_data_in_V_data_V_0_sel_wr);
    axis_enc_data_in_V_data_V_0_sel <= axis_enc_data_in_V_data_V_0_sel_rd;
    axis_enc_data_in_V_data_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_data_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_data_V_0_vld_out <= axis_enc_data_in_V_data_V_0_state(0);
    axis_enc_data_in_V_keep_V_0_ack_in <= axis_enc_data_in_V_keep_V_0_state(1);

    axis_enc_data_in_V_keep_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_keep_V_0_data_out_assign_proc : process(axis_enc_data_in_V_keep_V_0_payload_A, axis_enc_data_in_V_keep_V_0_payload_B, axis_enc_data_in_V_keep_V_0_sel)
    begin
        if ((axis_enc_data_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_B;
        else 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_keep_V_0_load_A <= (not(axis_enc_data_in_V_keep_V_0_sel_wr) and axis_enc_data_in_V_keep_V_0_state_cmp_full);
    axis_enc_data_in_V_keep_V_0_load_B <= (axis_enc_data_in_V_keep_V_0_state_cmp_full and axis_enc_data_in_V_keep_V_0_sel_wr);
    axis_enc_data_in_V_keep_V_0_sel <= axis_enc_data_in_V_keep_V_0_sel_rd;
    axis_enc_data_in_V_keep_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_keep_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_keep_V_0_vld_out <= axis_enc_data_in_V_keep_V_0_state(0);
    axis_enc_data_in_V_last_V_0_ack_in <= axis_enc_data_in_V_last_V_0_state(1);

    axis_enc_data_in_V_last_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_last_V_0_data_out_assign_proc : process(axis_enc_data_in_V_last_V_0_payload_A, axis_enc_data_in_V_last_V_0_payload_B, axis_enc_data_in_V_last_V_0_sel)
    begin
        if ((axis_enc_data_in_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_B;
        else 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_last_V_0_load_A <= (not(axis_enc_data_in_V_last_V_0_sel_wr) and axis_enc_data_in_V_last_V_0_state_cmp_full);
    axis_enc_data_in_V_last_V_0_load_B <= (axis_enc_data_in_V_last_V_0_state_cmp_full and axis_enc_data_in_V_last_V_0_sel_wr);
    axis_enc_data_in_V_last_V_0_sel <= axis_enc_data_in_V_last_V_0_sel_rd;
    axis_enc_data_in_V_last_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_last_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_last_V_0_vld_out <= axis_enc_data_in_V_last_V_0_state(0);
    axis_enc_data_in_V_user_V_0_ack_in <= axis_enc_data_in_V_user_V_0_state(1);

    axis_enc_data_in_V_user_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_user_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_user_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_user_V_0_data_out_assign_proc : process(axis_enc_data_in_V_user_V_0_payload_A, axis_enc_data_in_V_user_V_0_payload_B, axis_enc_data_in_V_user_V_0_sel)
    begin
        if ((axis_enc_data_in_V_user_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_user_V_0_data_out <= axis_enc_data_in_V_user_V_0_payload_B;
        else 
            axis_enc_data_in_V_user_V_0_data_out <= axis_enc_data_in_V_user_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_user_V_0_load_A <= (not(axis_enc_data_in_V_user_V_0_sel_wr) and axis_enc_data_in_V_user_V_0_state_cmp_full);
    axis_enc_data_in_V_user_V_0_load_B <= (axis_enc_data_in_V_user_V_0_state_cmp_full and axis_enc_data_in_V_user_V_0_sel_wr);
    axis_enc_data_in_V_user_V_0_sel <= axis_enc_data_in_V_user_V_0_sel_rd;
    axis_enc_data_in_V_user_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_user_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_user_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_user_V_0_vld_out <= axis_enc_data_in_V_user_V_0_state(0);
    dec_data_in_V_1_fu_675_p3 <= 
        tmp_fu_667_p3 when (tmp_s_reg_1061(0) = '1') else 
        enc_data_out_V_reg_1066;
    enc_data_in_V_1_fu_626_p2 <= (tmp_263_fu_620_p2 or tmp_262_fu_614_p2);
    exitcond_fu_387_p2 <= "1" when (i_reg_288 = ap_const_lv3_4) else "0";
    grp_decoder_fu_315_ap_start <= grp_decoder_fu_315_ap_start_reg;
    grp_encoder_fu_310_ap_start <= grp_encoder_fu_310_ap_start_reg;
    grp_operator_s_fu_324_ap_start <= grp_operator_s_fu_324_ap_start_reg;
    grp_operator_s_fu_336_ap_start <= grp_operator_s_fu_336_ap_start_reg;
    i_2_fu_393_p2 <= std_logic_vector(unsigned(i_reg_288) + unsigned(ap_const_lv3_1));
    i_3_fu_694_p2 <= std_logic_vector(unsigned(i5_reg_299) + unsigned(ap_const_lv3_1));

    noise_sample_stream0_1_read_assign_proc : process(ap_CS_fsm_state6, noise_sample_stream0_1_empty_n, noise_sample_stream1_1_empty_n)
    begin
        if ((not(((noise_sample_stream1_1_empty_n = ap_const_logic_0) or (noise_sample_stream0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            noise_sample_stream0_1_read <= ap_const_logic_1;
        else 
            noise_sample_stream0_1_read <= ap_const_logic_0;
        end if; 
    end process;


    noise_sample_stream0_1_write_assign_proc : process(noise_sample_stream0_1_full_n, ap_CS_fsm_state5, noise_sample_stream1_1_full_n)
    begin
        if ((not(((noise_sample_stream1_1_full_n = ap_const_logic_0) or (noise_sample_stream0_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            noise_sample_stream0_1_write <= ap_const_logic_1;
        else 
            noise_sample_stream0_1_write <= ap_const_logic_0;
        end if; 
    end process;


    noise_sample_stream1_1_read_assign_proc : process(ap_CS_fsm_state6, noise_sample_stream0_1_empty_n, noise_sample_stream1_1_empty_n)
    begin
        if ((not(((noise_sample_stream1_1_empty_n = ap_const_logic_0) or (noise_sample_stream0_1_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            noise_sample_stream1_1_read <= ap_const_logic_1;
        else 
            noise_sample_stream1_1_read <= ap_const_logic_0;
        end if; 
    end process;


    noise_sample_stream1_1_write_assign_proc : process(noise_sample_stream0_1_full_n, ap_CS_fsm_state5, noise_sample_stream1_1_full_n)
    begin
        if ((not(((noise_sample_stream1_1_full_n = ap_const_logic_0) or (noise_sample_stream0_1_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            noise_sample_stream1_1_write <= ap_const_logic_1;
        else 
            noise_sample_stream1_1_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_2_fu_662_p2 <= std_logic_vector(signed(tmp_86_fu_659_p1) + signed(p_Val2_8_reg_1076));
    p_Val2_s_62_fu_654_p2 <= std_logic_vector(signed(tmp_85_fu_651_p1) + signed(p_Val2_s_reg_1071));
    p_Val2_s_fu_637_p1 <= grp_encoder_fu_310_ap_return(32 - 1 downto 0);
    p_demorgan_fu_602_p2 <= (tmp_260_fu_596_p2 and tmp_259_fu_590_p2);

    snr_sample_stream_V_s_din_assign_proc : process(ap_start, ap_CS_fsm_state1, SNR_REG_V, snr_sample_stream_V_s_full_n, tmp_V_reg_972, ap_CS_fsm_state2, snr_sample_stream_V_s_empty_n)
    begin
        if ((not(((snr_sample_stream_V_s_empty_n = ap_const_logic_0) or (snr_sample_stream_V_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            snr_sample_stream_V_s_din <= tmp_V_reg_972;
        elsif ((not(((snr_sample_stream_V_s_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            snr_sample_stream_V_s_din <= SNR_REG_V;
        else 
            snr_sample_stream_V_s_din <= "XXXXXXXX";
        end if; 
    end process;


    snr_sample_stream_V_s_read_assign_proc : process(snr_sample_stream_V_s_full_n, ap_CS_fsm_state2, snr_sample_stream_V_s_empty_n, ap_CS_fsm_state3)
    begin
        if ((((snr_sample_stream_V_s_empty_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or (not(((snr_sample_stream_V_s_empty_n = ap_const_logic_0) or (snr_sample_stream_V_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            snr_sample_stream_V_s_read <= ap_const_logic_1;
        else 
            snr_sample_stream_V_s_read <= ap_const_logic_0;
        end if; 
    end process;


    snr_sample_stream_V_s_write_assign_proc : process(ap_start, ap_CS_fsm_state1, snr_sample_stream_V_s_full_n, ap_CS_fsm_state2, snr_sample_stream_V_s_empty_n)
    begin
        if (((not(((snr_sample_stream_V_s_empty_n = ap_const_logic_0) or (snr_sample_stream_V_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2)) or (not(((snr_sample_stream_V_s_full_n = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            snr_sample_stream_V_s_write <= ap_const_logic_1;
        else 
            snr_sample_stream_V_s_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_fu_487_p3 <= (tmp_224_reg_1056 & ap_const_lv5_0);
    tmp_101_fu_494_p2 <= (tmp_100_fu_487_p3 or ap_const_lv7_1F);
    tmp_224_fu_399_p1 <= i_reg_288(2 - 1 downto 0);
    tmp_225_fu_686_p3 <= i5_reg_299(2 downto 2);
    tmp_226_fu_700_p1 <= i5_reg_299(2 - 1 downto 0);
    tmp_227_fu_718_p2 <= "1" when (unsigned(tmp_98_fu_704_p3) > unsigned(tmp_99_fu_712_p2)) else "0";
    tmp_228_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_704_p3),8));
    tmp_229_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_712_p2),8));
    
    tmp_230_fu_732_p4_proc : process(dec_data_out_V_reg_1081)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_230_fu_732_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := dec_data_out_V_reg_1081;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_230_fu_732_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_230_fu_732_p4_i) := dec_data_out_V_reg_1081(128-1-tmp_230_fu_732_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_230_fu_732_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_231_fu_741_p2 <= std_logic_vector(unsigned(tmp_228_fu_724_p1) - unsigned(tmp_229_fu_728_p1));
    tmp_232_fu_747_p2 <= (tmp_228_fu_724_p1 xor ap_const_lv8_7F);
    tmp_233_fu_753_p2 <= std_logic_vector(unsigned(tmp_229_fu_728_p1) - unsigned(tmp_228_fu_724_p1));
    tmp_234_fu_759_p3 <= 
        tmp_231_fu_741_p2 when (tmp_227_fu_718_p2(0) = '1') else 
        tmp_233_fu_753_p2;
    tmp_235_fu_767_p3 <= 
        tmp_230_fu_732_p4 when (tmp_227_fu_718_p2(0) = '1') else 
        dec_data_out_V_reg_1081;
    tmp_236_fu_774_p3 <= 
        tmp_232_fu_747_p2 when (tmp_227_fu_718_p2(0) = '1') else 
        tmp_228_fu_724_p1;
    tmp_237_fu_782_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_234_fu_759_p3));
    tmp_238_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_236_fu_774_p3),128));
    tmp_239_fu_834_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_237_reg_1103),128));
    tmp_240_fu_792_p2 <= std_logic_vector(shift_right(unsigned(tmp_235_fu_767_p3),to_integer(unsigned('0' & tmp_238_fu_788_p1(31-1 downto 0)))));
    tmp_241_fu_837_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_4),to_integer(unsigned('0' & tmp_239_fu_834_p1(31-1 downto 0)))));
    tmp_242_fu_843_p2 <= (tmp_241_fu_837_p2 and tmp_240_reg_1108);
    tmp_244_fu_500_p2 <= "1" when (unsigned(tmp_100_fu_487_p3) > unsigned(tmp_101_fu_494_p2)) else "0";
    tmp_245_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_487_p3),8));
    tmp_246_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_494_p2),8));
    tmp_247_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(axis_enc_data_in_V_data_V_0_data_out),128));
    tmp_248_fu_518_p2 <= (tmp_245_fu_506_p1 xor ap_const_lv8_7F);
    tmp_249_fu_524_p3 <= 
        tmp_245_fu_506_p1 when (tmp_244_fu_500_p2(0) = '1') else 
        tmp_246_fu_510_p1;
    tmp_250_fu_532_p3 <= 
        tmp_246_fu_510_p1 when (tmp_244_fu_500_p2(0) = '1') else 
        tmp_245_fu_506_p1;
    tmp_251_fu_540_p3 <= 
        tmp_248_fu_518_p2 when (tmp_244_fu_500_p2(0) = '1') else 
        tmp_245_fu_506_p1;
    tmp_252_fu_548_p2 <= (tmp_249_fu_524_p3 xor ap_const_lv8_7F);
    tmp_253_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_251_fu_540_p3),128));
    tmp_254_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_250_fu_532_p3),128));
    tmp_255_fu_562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_252_fu_548_p2),128));
    tmp_256_fu_566_p2 <= std_logic_vector(shift_left(unsigned(tmp_247_fu_514_p1),to_integer(unsigned('0' & tmp_253_fu_554_p1(31-1 downto 0)))));
    
    tmp_257_fu_572_p4_proc : process(tmp_256_fu_566_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_257_fu_572_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_256_fu_566_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_257_fu_572_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_257_fu_572_p4_i) := tmp_256_fu_566_p2(128-1-tmp_257_fu_572_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_257_fu_572_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_258_fu_582_p3 <= 
        tmp_257_fu_572_p4 when (tmp_244_fu_500_p2(0) = '1') else 
        tmp_256_fu_566_p2;
    tmp_259_fu_590_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_4),to_integer(unsigned('0' & tmp_254_fu_558_p1(31-1 downto 0)))));
    tmp_260_fu_596_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_4),to_integer(unsigned('0' & tmp_255_fu_562_p1(31-1 downto 0)))));
    tmp_261_fu_608_p2 <= (p_demorgan_fu_602_p2 xor ap_const_lv128_lc_4);
    tmp_262_fu_614_p2 <= (tmp_261_fu_608_p2 and enc_data_in_V_fu_194);
    tmp_263_fu_620_p2 <= (tmp_258_fu_582_p3 and p_demorgan_fu_602_p2);
        tmp_85_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_9_reg_1038),32));

        tmp_86_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_V_11_reg_1043),32));

    tmp_98_fu_704_p3 <= (tmp_226_fu_700_p1 & ap_const_lv5_0);
    tmp_99_fu_712_p2 <= (tmp_98_fu_704_p3 or ap_const_lv7_1F);
    tmp_fu_667_p3 <= (p_Val2_2_fu_662_p2 & p_Val2_s_62_fu_654_p2);
    tmp_s_fu_403_p2 <= "1" when (AWGN_EN_REG_read_reg_967 = ap_const_lv32_0) else "0";
end behav;
