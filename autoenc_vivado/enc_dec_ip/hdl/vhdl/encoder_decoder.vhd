-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder_decoder is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis_enc_data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_in_TVALID : IN STD_LOGIC;
    axis_enc_data_in_TREADY : OUT STD_LOGIC;
    axis_enc_data_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axis_enc_data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_dec_data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_out_TVALID : OUT STD_LOGIC;
    axis_dec_data_out_TREADY : IN STD_LOGIC;
    axis_dec_data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axis_dec_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of encoder_decoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_decoder,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=234,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=160,HLS_SYN_FF=20773,HLS_SYN_LUT=36778,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (131 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (131 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (131 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (131 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (131 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (131 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (131 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (131 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (131 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (131 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (131 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (131 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (131 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (131 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal SNR_REG_V : STD_LOGIC_VECTOR (7 downto 0);
    signal AWGN_EN_REG : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axis_dec_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal tmp_368_reg_1842 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_operator_s_fu_358_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_379 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_operator_s_fu_358_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_358_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_358_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal AWGN_EN_REG_read_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal SNR_REG_V_read_reg_1682 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_389_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1690 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_223_fu_395_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_223_reg_1695 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_in_V_fu_590_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_encoder_fu_339_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_data_out_V_reg_1705 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal tmp_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1713 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1717 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_622_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_6_reg_1730 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal tmp_346_fu_628_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_346_reg_1735 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_616_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_data_out_V_4_fu_777_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal i_5_fu_789_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_1748 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal tmp_323_fu_795_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_323_reg_1753 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond5_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_data_out_V_3_fu_938_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal i_4_fu_950_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_1766 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal tmp_263_fu_956_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_263_reg_1771 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond4_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_100_fu_960_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_reg_1776 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_101_fu_968_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_101_reg_1783 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_264_reg_1790 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_61_fu_1064_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_61_reg_1797 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal dec_data_in_V_3_fu_1187_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal i_3_fu_1199_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_3_reg_1810 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal tmp_98_fu_1209_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_98_reg_1815 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond3_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_1218_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_99_reg_1821 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_235_fu_1283_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_235_reg_1827 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_238_fu_1293_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_238_reg_1832 : STD_LOGIC_VECTOR (63 downto 0);
    signal dec_data_in_V_2_fu_1435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal tmp_368_fu_1441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal i_7_fu_1449_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_1846 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_369_fu_1455_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_369_reg_1851 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_380_fu_1539_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_380_reg_1857 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_383_fu_1549_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_383_reg_1862 : STD_LOGIC_VECTOR (127 downto 0);
    signal axis_dec_data_out_it_fu_1593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_it_1_fu_1598_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_it_2_fu_1612_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_it_2_reg_1877 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder_fu_339_ap_start : STD_LOGIC;
    signal grp_encoder_fu_339_ap_done : STD_LOGIC;
    signal grp_encoder_fu_339_ap_idle : STD_LOGIC;
    signal grp_encoder_fu_339_ap_ready : STD_LOGIC;
    signal grp_decoder_fu_345_ap_start : STD_LOGIC;
    signal grp_decoder_fu_345_ap_done : STD_LOGIC;
    signal grp_decoder_fu_345_ap_idle : STD_LOGIC;
    signal grp_decoder_fu_345_ap_ready : STD_LOGIC;
    signal grp_decoder_fu_345_data_V_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_decoder_fu_345_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_operator_s_fu_358_ap_start : STD_LOGIC;
    signal enc_data_in_V_s_reg_193 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal dec_data_out_V_1_reg_216 : STD_LOGIC_VECTOR (127 downto 0);
    signal i8_reg_228 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_85_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_86_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_data_out_V3_reg_239 : STD_LOGIC_VECTOR (127 downto 0);
    signal i7_reg_251 : STD_LOGIC_VECTOR (2 downto 0);
    signal dec_data_in_V_1_reg_262 : STD_LOGIC_VECTOR (63 downto 0);
    signal i6_reg_274 : STD_LOGIC_VECTOR (1 downto 0);
    signal dec_data_out_V_5_reg_285 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal dec_data_in_V_reg_305 : STD_LOGIC_VECTOR (63 downto 0);
    signal i5_reg_317 : STD_LOGIC_VECTOR (1 downto 0);
    signal i9_reg_328 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state132 : BOOLEAN;
    signal ap_block_state132_io : BOOLEAN;
    signal grp_encoder_fu_339_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (131 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_decoder_fu_345_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state105 : STD_LOGIC;
    signal ap_NS_fsm_state119 : STD_LOGIC;
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal grp_operator_s_fu_358_ap_start_reg : STD_LOGIC := '0';
    signal tmp_keep_V_fu_126 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_fu_130 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_2_fu_134 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_3_fu_138 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_fu_142 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_fu_150 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_fu_154 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_371_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_371_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_375_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_375_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_102_fu_451_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_103_fu_458_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_303_fu_470_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_302_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_304_fu_474_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_306_fu_482_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_307_fu_488_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_309_fu_504_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_308_fu_496_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_310_fu_512_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_305_fu_478_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_311_fu_518_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_314_fu_530_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_315_fu_536_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_312_fu_522_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_313_fu_526_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_317_fu_554_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_318_fu_560_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_566_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_319_fu_572_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_316_fu_546_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_320_fu_578_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_321_fu_584_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_106_fu_638_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_107_fu_645_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_345_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_348_fu_657_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_347_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_349_fu_661_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_351_fu_669_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_352_fu_675_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_354_fu_691_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_353_fu_683_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_355_fu_699_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_350_fu_665_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_356_fu_705_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_359_fu_717_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_360_fu_723_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_357_fu_709_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_358_fu_713_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_362_fu_741_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_363_fu_747_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan7_fu_753_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_364_fu_759_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_361_fu_733_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_365_fu_765_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_366_fu_771_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_104_fu_799_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_105_fu_806_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_325_fu_818_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_324_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_326_fu_822_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_328_fu_830_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_329_fu_836_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_331_fu_852_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_330_fu_844_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_332_fu_860_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_327_fu_826_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_333_fu_866_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_336_fu_878_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_337_fu_884_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_334_fu_870_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_335_fu_874_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_339_fu_902_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_340_fu_908_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan8_fu_914_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_341_fu_920_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_338_fu_894_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_342_fu_926_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_343_fu_932_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_265_fu_975_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_266_fu_978_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_268_fu_990_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_270_fu_1002_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_267_fu_981_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_269_fu_996_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_271_fu_1008_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_273_fu_1021_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_274_fu_1028_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_272_fu_1015_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_275_fu_1034_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_276_fu_1038_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_277_fu_1042_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_278_fu_1048_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_279_fu_1054_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_s_fu_1060_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_282_fu_1070_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_283_fu_1073_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_285_fu_1079_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_286_fu_1085_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_288_fu_1101_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_287_fu_1093_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_289_fu_1109_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_284_fu_1076_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_290_fu_1115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_293_fu_1127_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_294_fu_1133_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_291_fu_1119_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_292_fu_1123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_296_fu_1151_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_297_fu_1157_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan9_fu_1163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_298_fu_1169_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_295_fu_1143_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_299_fu_1175_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_300_fu_1181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_224_fu_1205_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_226_fu_1225_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_227_fu_1229_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_229_fu_1242_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_231_fu_1254_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_228_fu_1233_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_230_fu_1248_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_232_fu_1260_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_234_fu_1275_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_233_fu_1268_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_236_fu_1289_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_237_fu_1299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_239_fu_1302_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_240_fu_1308_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_241_fu_1313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_243_fu_1317_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_244_fu_1320_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_246_fu_1327_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_247_fu_1333_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_249_fu_1349_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_248_fu_1341_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_250_fu_1357_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_245_fu_1323_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_251_fu_1363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_254_fu_1375_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_255_fu_1381_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_252_fu_1367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_253_fu_1371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_257_fu_1399_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_258_fu_1405_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan1_fu_1411_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_259_fu_1417_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_256_fu_1391_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_260_fu_1423_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_261_fu_1429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_108_fu_1459_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_109_fu_1467_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_371_fu_1479_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_372_fu_1483_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_370_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_374_fu_1497_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_376_fu_1509_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_373_fu_1487_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_375_fu_1503_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_377_fu_1515_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_379_fu_1531_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_378_fu_1523_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_381_fu_1545_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_382_fu_1579_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_384_fu_1582_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_385_fu_1588_p2 : STD_LOGIC_VECTOR (127 downto 0);

    component encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        snr_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encoder_decoder_mibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component encoder_decoder_mjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component encoder_decoder_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        SNR_REG_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWGN_EN_REG : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    encoder_decoder_ctrl_s_axi_U : component encoder_decoder_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        SNR_REG_V => SNR_REG_V,
        AWGN_EN_REG => AWGN_EN_REG);

    grp_encoder_fu_339 : component encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoder_fu_339_ap_start,
        ap_done => grp_encoder_fu_339_ap_done,
        ap_idle => grp_encoder_fu_339_ap_idle,
        ap_ready => grp_encoder_fu_339_ap_ready,
        data_V_read => enc_data_in_V_s_reg_193,
        ap_return => grp_encoder_fu_339_ap_return);

    grp_decoder_fu_345 : component decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decoder_fu_345_ap_start,
        ap_done => grp_decoder_fu_345_ap_done,
        ap_idle => grp_decoder_fu_345_ap_idle,
        ap_ready => grp_decoder_fu_345_ap_ready,
        data_V_read => grp_decoder_fu_345_data_V_read,
        ap_return => grp_decoder_fu_345_ap_return,
        ap_ce => ap_const_logic_1);

    grp_operator_s_fu_358 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_s_fu_358_ap_start,
        ap_done => grp_operator_s_fu_358_ap_done,
        ap_idle => grp_operator_s_fu_358_ap_idle,
        ap_ready => grp_operator_s_fu_358_ap_ready,
        snr_V_read => SNR_REG_V_read_reg_1682,
        ap_return => grp_operator_s_fu_358_ap_return);

    encoder_decoder_mibs_U42 : component encoder_decoder_mibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => tmp_keep_V_fu_126,
        din1 => tmp_keep_V_1_fu_130,
        din2 => tmp_keep_V_2_fu_134,
        din3 => tmp_keep_V_3_fu_138,
        din4 => tmp_369_reg_1851,
        dout => axis_dec_data_out_it_1_fu_1598_p6);

    encoder_decoder_mjbC_U43 : component encoder_decoder_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_last_V_fu_142,
        din1 => tmp_last_V_1_fu_146,
        din2 => tmp_last_V_2_fu_150,
        din3 => tmp_last_V_3_fu_154,
        din4 => tmp_369_reg_1851,
        dout => axis_dec_data_out_it_2_fu_1612_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_rd <= not(axis_dec_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_wr <= not(axis_dec_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_rd <= not(axis_dec_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_wr <= not(axis_dec_data_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_rd <= not(axis_dec_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_wr <= not(axis_dec_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_rd <= not(axis_enc_data_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_wr <= not(axis_enc_data_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_rd <= not(axis_enc_data_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_wr <= not(axis_enc_data_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_rd <= not(axis_enc_data_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_wr <= not(axis_enc_data_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_decoder_fu_345_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decoder_fu_345_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state119) and (ap_const_logic_1 = ap_CS_fsm_state117)) or ((ap_const_logic_1 = ap_NS_fsm_state105) and (ap_const_logic_1 = ap_CS_fsm_state101)))) then 
                    grp_decoder_fu_345_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoder_fu_345_ap_ready = ap_const_logic_1)) then 
                    grp_decoder_fu_345_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encoder_fu_339_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoder_fu_339_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_encoder_fu_339_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoder_fu_339_ap_ready = ap_const_logic_1)) then 
                    grp_encoder_fu_339_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_358_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_s_fu_358_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state101) and (exitcond4_fu_944_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state98) and (exitcond5_fu_783_p2 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond_fu_616_p2 = ap_const_lv1_0)))) then 
                    grp_operator_s_fu_358_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_358_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_358_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dec_data_out_V_5_reg_285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (exitcond5_fu_783_p2 = ap_const_lv1_1))) then 
                dec_data_out_V_5_reg_285 <= dec_data_out_V3_reg_239;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond_fu_616_p2 = ap_const_lv1_1))) then 
                dec_data_out_V_5_reg_285 <= dec_data_out_V_1_reg_216;
            elsif ((((ap_const_logic_1 = ap_CS_fsm_state116) and (tmp_s_reg_1717 = ap_const_lv1_1) and (tmp_reg_1713 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state116) and (tmp_reg_1713 = ap_const_lv1_1)))) then 
                dec_data_out_V_5_reg_285 <= grp_decoder_fu_345_ap_return;
            end if; 
        end if;
    end process;

    i5_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_fu_596_p2 = ap_const_lv1_1))) then 
                i5_reg_317 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
                i5_reg_317 <= i_3_reg_1810;
            end if; 
        end if;
    end process;

    i6_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_s_fu_601_p2 = ap_const_lv1_1) and (tmp_fu_596_p2 = ap_const_lv1_0))) then 
                i6_reg_274 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                i6_reg_274 <= i_4_reg_1766;
            end if; 
        end if;
    end process;

    i7_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_85_fu_606_p2 = ap_const_lv1_1) and (tmp_s_fu_601_p2 = ap_const_lv1_0) and (tmp_fu_596_p2 = ap_const_lv1_0))) then 
                i7_reg_251 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                i7_reg_251 <= i_5_reg_1748;
            end if; 
        end if;
    end process;

    i8_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_86_fu_611_p2 = ap_const_lv1_1) and (tmp_85_fu_606_p2 = ap_const_lv1_0) and (tmp_s_fu_601_p2 = ap_const_lv1_0) and (tmp_fu_596_p2 = ap_const_lv1_0))) then 
                i8_reg_228 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
                i8_reg_228 <= i_6_reg_1730;
            end if; 
        end if;
    end process;

    i9_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state132_io))) and (ap_const_logic_1 = ap_CS_fsm_state132) and (axis_dec_data_out_it_2_reg_1877 = ap_const_lv1_0) and (tmp_368_reg_1842 = ap_const_lv1_0))) then 
                i9_reg_328 <= i_7_reg_1846;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
                i9_reg_328 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_205 <= i_2_reg_1690;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_205 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                AWGN_EN_REG_read_reg_1674 <= AWGN_EN_REG;
                SNR_REG_V_read_reg_1682 <= SNR_REG_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_1593_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_1593_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_A <= axis_dec_data_out_it_1_fu_1598_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_B <= axis_dec_data_out_it_1_fu_1598_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_A <= axis_dec_data_out_it_2_fu_1612_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_B <= axis_dec_data_out_it_2_fu_1612_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then
                axis_dec_data_out_it_2_reg_1877 <= axis_dec_data_out_it_2_fu_1612_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_A <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_B <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                dec_data_in_V_1_reg_262 <= dec_data_in_V_3_fu_1187_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                dec_data_in_V_reg_305 <= dec_data_in_V_2_fu_1435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                dec_data_out_V3_reg_239 <= dec_data_out_V_3_fu_938_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                dec_data_out_V_1_reg_216 <= dec_data_out_V_4_fu_777_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                enc_data_in_V_s_reg_193 <= enc_data_in_V_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                enc_data_out_V_reg_1705 <= grp_encoder_fu_339_ap_return;
                tmp_reg_1713 <= tmp_fu_596_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_1690 <= i_2_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                i_3_reg_1810 <= i_3_fu_1199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                i_4_reg_1766 <= i_4_fu_950_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state98)) then
                i_5_reg_1748 <= i_5_fu_789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                i_6_reg_1730 <= i_6_fu_622_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state130)) then
                i_7_reg_1846 <= i_7_fu_1449_p2;
                tmp_368_reg_1842 <= i9_reg_328(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                p_Val2_s_61_reg_1797 <= p_Val2_s_61_fu_1064_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((grp_operator_s_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state102)) or ((grp_operator_s_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99)) or ((grp_operator_s_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96)))) then
                reg_379 <= grp_operator_s_fu_358_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    tmp_100_reg_1776(5) <= tmp_100_fu_960_p3(5);
                    tmp_101_reg_1783(5) <= tmp_101_fu_968_p2(5);
                tmp_264_reg_1790 <= grp_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_383_p2 = ap_const_lv1_0))) then
                tmp_223_reg_1695 <= tmp_223_fu_395_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state117) and (exitcond3_fu_1193_p2 = ap_const_lv1_0))) then
                    tmp_235_reg_1827(6 downto 1) <= tmp_235_fu_1283_p2(6 downto 1);
                tmp_238_reg_1832 <= tmp_238_fu_1293_p2;
                    tmp_98_reg_1815(5) <= tmp_98_fu_1209_p3(5);
                    tmp_99_reg_1821(5) <= tmp_99_fu_1218_p2(5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) and (exitcond4_fu_944_p2 = ap_const_lv1_0))) then
                tmp_263_reg_1771 <= tmp_263_fu_956_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state98) and (exitcond5_fu_783_p2 = ap_const_lv1_0))) then
                tmp_323_reg_1753 <= tmp_323_fu_795_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond_fu_616_p2 = ap_const_lv1_0))) then
                tmp_346_reg_1735 <= tmp_346_fu_628_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state130) and (tmp_368_fu_1441_p3 = ap_const_lv1_0))) then
                tmp_369_reg_1851 <= tmp_369_fu_1455_p1;
                    tmp_380_reg_1857(7 downto 1) <= tmp_380_fu_1539_p2(7 downto 1);
                tmp_383_reg_1862 <= tmp_383_fu_1549_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1695 = ap_const_lv2_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_1_fu_130 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_1_fu_146 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1695 = ap_const_lv2_2) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_2_fu_134 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_2_fu_150 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1695 = ap_const_lv2_3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_3_fu_138 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_3_fu_154 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1695 = ap_const_lv2_0) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_fu_126 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_fu_142 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_fu_596_p2 = ap_const_lv1_0))) then
                tmp_s_reg_1717 <= tmp_s_fu_601_p2;
            end if;
        end if;
    end process;
    tmp_100_reg_1776(4 downto 0) <= "00000";
    tmp_101_reg_1783(4 downto 0) <= "11111";
    tmp_98_reg_1815(4 downto 0) <= "00000";
    tmp_99_reg_1821(4 downto 0) <= "11111";
    tmp_235_reg_1827(0) <= '0';
    tmp_380_reg_1857(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, axis_enc_data_in_V_data_V_0_vld_out, axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state131, ap_CS_fsm_state132, tmp_368_reg_1842, ap_CS_fsm_state96, grp_operator_s_fu_358_ap_done, ap_CS_fsm_state99, ap_CS_fsm_state102, ap_CS_fsm_state2, exitcond2_fu_383_p2, ap_CS_fsm_state94, tmp_fu_596_p2, tmp_s_fu_601_p2, ap_CS_fsm_state95, exitcond_fu_616_p2, ap_CS_fsm_state98, exitcond5_fu_783_p2, ap_CS_fsm_state101, exitcond4_fu_944_p2, ap_CS_fsm_state117, exitcond3_fu_1193_p2, tmp_368_fu_1441_p3, ap_CS_fsm_state130, axis_dec_data_out_it_2_reg_1877, tmp_85_fu_606_p2, tmp_86_fu_611_p2, ap_block_state132_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_383_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_fu_596_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state117;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_s_fu_601_p2 = ap_const_lv1_1) and (tmp_fu_596_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_85_fu_606_p2 = ap_const_lv1_1) and (tmp_s_fu_601_p2 = ap_const_lv1_0) and (tmp_fu_596_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state94) and (tmp_86_fu_611_p2 = ap_const_lv1_1) and (tmp_85_fu_606_p2 = ap_const_lv1_0) and (tmp_s_fu_601_p2 = ap_const_lv1_0) and (tmp_fu_596_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_state116;
                end if;
            when ap_ST_fsm_state95 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond_fu_616_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                if (((grp_operator_s_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state98 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state98) and (exitcond5_fu_783_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state116;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state99 => 
                if (((grp_operator_s_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state101 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state101) and (exitcond4_fu_944_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state102 => 
                if (((grp_operator_s_fu_358_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state102))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state117 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state117) and (exitcond3_fu_1193_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state119;
                else
                    ap_NS_fsm <= ap_ST_fsm_state118;
                end if;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state130 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state130) and (tmp_368_fu_1441_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state132;
                else
                    ap_NS_fsm <= ap_ST_fsm_state131;
                end if;
            when ap_ST_fsm_state131 => 
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then
                    ap_NS_fsm <= ap_ST_fsm_state132;
                else
                    ap_NS_fsm <= ap_ST_fsm_state131;
                end if;
            when ap_ST_fsm_state132 => 
                if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state132_io))) and (ap_const_logic_1 = ap_CS_fsm_state132) and ((axis_dec_data_out_it_2_reg_1877 = ap_const_lv1_1) or (tmp_368_reg_1842 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state132_io))) and (ap_const_logic_1 = ap_CS_fsm_state132) and (axis_dec_data_out_it_2_reg_1877 = ap_const_lv1_0) and (tmp_368_reg_1842 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state130;
                else
                    ap_NS_fsm <= ap_ST_fsm_state132;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_NS_fsm_state105 <= ap_NS_fsm(104);
    ap_NS_fsm_state119 <= ap_NS_fsm(118);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_block_state132_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state132 <= ((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state132_io_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, tmp_368_reg_1842)
    begin
                ap_block_state132_io <= ((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_368_reg_1842 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state132, tmp_368_reg_1842, axis_dec_data_out_it_2_reg_1877, ap_block_state132_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state132_io))) and (ap_const_logic_1 = ap_CS_fsm_state132) and ((axis_dec_data_out_it_2_reg_1877 = ap_const_lv1_1) or (tmp_368_reg_1842 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state132, tmp_368_reg_1842, axis_dec_data_out_it_2_reg_1877, ap_block_state132_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state132_io))) and (ap_const_logic_1 = ap_CS_fsm_state132) and ((axis_dec_data_out_it_2_reg_1877 = ap_const_lv1_1) or (tmp_368_reg_1842 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axis_dec_data_out_TDATA <= axis_dec_data_out_V_data_V_1_data_out;

    axis_dec_data_out_TDATA_blk_n_assign_proc : process(axis_dec_data_out_V_data_V_1_state, ap_CS_fsm_state131, ap_CS_fsm_state132, tmp_368_reg_1842)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or ((ap_const_logic_1 = ap_CS_fsm_state132) and (tmp_368_reg_1842 = ap_const_lv1_0)))) then 
            axis_dec_data_out_TDATA_blk_n <= axis_dec_data_out_V_data_V_1_state(1);
        else 
            axis_dec_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_dec_data_out_TKEEP <= axis_dec_data_out_V_keep_V_1_data_out;
    axis_dec_data_out_TLAST <= axis_dec_data_out_V_last_V_1_data_out;
    axis_dec_data_out_TVALID <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_V_data_V_1_ack_in <= axis_dec_data_out_V_data_V_1_state(1);
    axis_dec_data_out_V_data_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_data_V_1_data_out_assign_proc : process(axis_dec_data_out_V_data_V_1_payload_A, axis_dec_data_out_V_data_V_1_payload_B, axis_dec_data_out_V_data_V_1_sel)
    begin
        if ((axis_dec_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_B;
        else 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_load_A <= (not(axis_dec_data_out_V_data_V_1_sel_wr) and axis_dec_data_out_V_data_V_1_state_cmp_full);
    axis_dec_data_out_V_data_V_1_load_B <= (axis_dec_data_out_V_data_V_1_state_cmp_full and axis_dec_data_out_V_data_V_1_sel_wr);
    axis_dec_data_out_V_data_V_1_sel <= axis_dec_data_out_V_data_V_1_sel_rd;
    axis_dec_data_out_V_data_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_data_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state131)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_vld_out <= axis_dec_data_out_V_data_V_1_state(0);
    axis_dec_data_out_V_keep_V_1_ack_in <= axis_dec_data_out_V_keep_V_1_state(1);
    axis_dec_data_out_V_keep_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_keep_V_1_data_out_assign_proc : process(axis_dec_data_out_V_keep_V_1_payload_A, axis_dec_data_out_V_keep_V_1_payload_B, axis_dec_data_out_V_keep_V_1_sel)
    begin
        if ((axis_dec_data_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_B;
        else 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_load_A <= (not(axis_dec_data_out_V_keep_V_1_sel_wr) and axis_dec_data_out_V_keep_V_1_state_cmp_full);
    axis_dec_data_out_V_keep_V_1_load_B <= (axis_dec_data_out_V_keep_V_1_state_cmp_full and axis_dec_data_out_V_keep_V_1_sel_wr);
    axis_dec_data_out_V_keep_V_1_sel <= axis_dec_data_out_V_keep_V_1_sel_rd;
    axis_dec_data_out_V_keep_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_keep_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state131)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_vld_out <= axis_dec_data_out_V_keep_V_1_state(0);
    axis_dec_data_out_V_last_V_1_ack_in <= axis_dec_data_out_V_last_V_1_state(1);
    axis_dec_data_out_V_last_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_last_V_1_data_out_assign_proc : process(axis_dec_data_out_V_last_V_1_payload_A, axis_dec_data_out_V_last_V_1_payload_B, axis_dec_data_out_V_last_V_1_sel)
    begin
        if ((axis_dec_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_B;
        else 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_load_A <= (not(axis_dec_data_out_V_last_V_1_sel_wr) and axis_dec_data_out_V_last_V_1_state_cmp_full);
    axis_dec_data_out_V_last_V_1_load_B <= (axis_dec_data_out_V_last_V_1_state_cmp_full and axis_dec_data_out_V_last_V_1_sel_wr);
    axis_dec_data_out_V_last_V_1_sel <= axis_dec_data_out_V_last_V_1_sel_rd;
    axis_dec_data_out_V_last_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_last_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state131)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_vld_out <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_it_fu_1593_p1 <= tmp_385_fu_1588_p2(32 - 1 downto 0);

    axis_enc_data_in_TDATA_blk_n_assign_proc : process(axis_enc_data_in_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis_enc_data_in_TDATA_blk_n <= axis_enc_data_in_V_data_V_0_state(0);
        else 
            axis_enc_data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_enc_data_in_TREADY <= axis_enc_data_in_V_last_V_0_state(1);
    axis_enc_data_in_V_data_V_0_ack_in <= axis_enc_data_in_V_data_V_0_state(1);

    axis_enc_data_in_V_data_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_data_V_0_data_out_assign_proc : process(axis_enc_data_in_V_data_V_0_payload_A, axis_enc_data_in_V_data_V_0_payload_B, axis_enc_data_in_V_data_V_0_sel)
    begin
        if ((axis_enc_data_in_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_B;
        else 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_data_V_0_load_A <= (not(axis_enc_data_in_V_data_V_0_sel_wr) and axis_enc_data_in_V_data_V_0_state_cmp_full);
    axis_enc_data_in_V_data_V_0_load_B <= (axis_enc_data_in_V_data_V_0_state_cmp_full and axis_enc_data_in_V_data_V_0_sel_wr);
    axis_enc_data_in_V_data_V_0_sel <= axis_enc_data_in_V_data_V_0_sel_rd;
    axis_enc_data_in_V_data_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_data_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_data_V_0_vld_out <= axis_enc_data_in_V_data_V_0_state(0);
    axis_enc_data_in_V_keep_V_0_ack_in <= axis_enc_data_in_V_keep_V_0_state(1);

    axis_enc_data_in_V_keep_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_keep_V_0_data_out_assign_proc : process(axis_enc_data_in_V_keep_V_0_payload_A, axis_enc_data_in_V_keep_V_0_payload_B, axis_enc_data_in_V_keep_V_0_sel)
    begin
        if ((axis_enc_data_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_B;
        else 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_keep_V_0_load_A <= (not(axis_enc_data_in_V_keep_V_0_sel_wr) and axis_enc_data_in_V_keep_V_0_state_cmp_full);
    axis_enc_data_in_V_keep_V_0_load_B <= (axis_enc_data_in_V_keep_V_0_state_cmp_full and axis_enc_data_in_V_keep_V_0_sel_wr);
    axis_enc_data_in_V_keep_V_0_sel <= axis_enc_data_in_V_keep_V_0_sel_rd;
    axis_enc_data_in_V_keep_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_keep_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_keep_V_0_vld_out <= axis_enc_data_in_V_keep_V_0_state(0);
    axis_enc_data_in_V_last_V_0_ack_in <= axis_enc_data_in_V_last_V_0_state(1);

    axis_enc_data_in_V_last_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_last_V_0_data_out_assign_proc : process(axis_enc_data_in_V_last_V_0_payload_A, axis_enc_data_in_V_last_V_0_payload_B, axis_enc_data_in_V_last_V_0_sel)
    begin
        if ((axis_enc_data_in_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_B;
        else 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_last_V_0_load_A <= (not(axis_enc_data_in_V_last_V_0_sel_wr) and axis_enc_data_in_V_last_V_0_state_cmp_full);
    axis_enc_data_in_V_last_V_0_load_B <= (axis_enc_data_in_V_last_V_0_state_cmp_full and axis_enc_data_in_V_last_V_0_sel_wr);
    axis_enc_data_in_V_last_V_0_sel <= axis_enc_data_in_V_last_V_0_sel_rd;
    axis_enc_data_in_V_last_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_last_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_last_V_0_vld_out <= axis_enc_data_in_V_last_V_0_state(0);
    dec_data_in_V_2_fu_1435_p2 <= (tmp_261_fu_1429_p2 or tmp_260_fu_1423_p2);
    dec_data_in_V_3_fu_1187_p2 <= (tmp_300_fu_1181_p2 or tmp_299_fu_1175_p2);
    dec_data_out_V_3_fu_938_p2 <= (tmp_343_fu_932_p2 or tmp_342_fu_926_p2);
    dec_data_out_V_4_fu_777_p2 <= (tmp_366_fu_771_p2 or tmp_365_fu_765_p2);
    enc_data_in_V_fu_590_p2 <= (tmp_321_fu_584_p2 or tmp_320_fu_578_p2);
    exitcond2_fu_383_p2 <= "1" when (i_reg_205 = ap_const_lv3_4) else "0";
    exitcond3_fu_1193_p2 <= "1" when (i5_reg_317 = ap_const_lv2_2) else "0";
    exitcond4_fu_944_p2 <= "1" when (i6_reg_274 = ap_const_lv2_2) else "0";
    exitcond5_fu_783_p2 <= "1" when (i7_reg_251 = ap_const_lv3_4) else "0";
    exitcond_fu_616_p2 <= "1" when (i8_reg_228 = ap_const_lv3_4) else "0";
    grp_decoder_fu_345_ap_start <= grp_decoder_fu_345_ap_start_reg;

    grp_decoder_fu_345_data_V_read_assign_proc : process(dec_data_in_V_1_reg_262, dec_data_in_V_reg_305, ap_CS_fsm_state105, ap_CS_fsm_state119)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            grp_decoder_fu_345_data_V_read <= dec_data_in_V_reg_305;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            grp_decoder_fu_345_data_V_read <= dec_data_in_V_1_reg_262;
        else 
            grp_decoder_fu_345_data_V_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_encoder_fu_339_ap_start <= grp_encoder_fu_339_ap_start_reg;

    grp_fu_371_p0_assign_proc : process(ap_CS_fsm_state102, tmp_100_fu_960_p3, tmp_100_reg_1776, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_371_p0 <= tmp_100_reg_1776;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_371_p0 <= tmp_100_fu_960_p3;
        else 
            grp_fu_371_p0 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_371_p1_assign_proc : process(ap_CS_fsm_state102, tmp_101_fu_968_p2, tmp_101_reg_1783, ap_CS_fsm_state104)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            grp_fu_371_p1 <= tmp_101_reg_1783;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_371_p1 <= tmp_101_fu_968_p2;
        else 
            grp_fu_371_p1 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_371_p2 <= "1" when (unsigned(grp_fu_371_p0) > unsigned(grp_fu_371_p1)) else "0";

    grp_fu_375_p0_assign_proc : process(ap_CS_fsm_state117, tmp_98_fu_1209_p3, tmp_98_reg_1815, ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            grp_fu_375_p0 <= tmp_98_reg_1815;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_375_p0 <= tmp_98_fu_1209_p3;
        else 
            grp_fu_375_p0 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_375_p1_assign_proc : process(ap_CS_fsm_state117, tmp_99_fu_1218_p2, tmp_99_reg_1821, ap_CS_fsm_state118)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            grp_fu_375_p1 <= tmp_99_reg_1821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            grp_fu_375_p1 <= tmp_99_fu_1218_p2;
        else 
            grp_fu_375_p1 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_375_p2 <= "1" when (unsigned(grp_fu_375_p0) > unsigned(grp_fu_375_p1)) else "0";
    grp_operator_s_fu_358_ap_start <= grp_operator_s_fu_358_ap_start_reg;
    i_2_fu_389_p2 <= std_logic_vector(unsigned(i_reg_205) + unsigned(ap_const_lv3_1));
    i_3_fu_1199_p2 <= std_logic_vector(unsigned(i5_reg_317) + unsigned(ap_const_lv2_1));
    i_4_fu_950_p2 <= std_logic_vector(unsigned(i6_reg_274) + unsigned(ap_const_lv2_1));
    i_5_fu_789_p2 <= std_logic_vector(unsigned(i7_reg_251) + unsigned(ap_const_lv3_1));
    i_6_fu_622_p2 <= std_logic_vector(unsigned(i8_reg_228) + unsigned(ap_const_lv3_1));
    i_7_fu_1449_p2 <= std_logic_vector(unsigned(i9_reg_328) + unsigned(ap_const_lv3_1));
    p_Val2_s_61_fu_1064_p2 <= std_logic_vector(unsigned(p_Val2_s_fu_1060_p1) + unsigned(reg_379));
    p_Val2_s_fu_1060_p1 <= tmp_279_fu_1054_p2(32 - 1 downto 0);
    p_demorgan1_fu_1411_p2 <= (tmp_258_fu_1405_p2 and tmp_257_fu_1399_p2);
    p_demorgan7_fu_753_p2 <= (tmp_363_fu_747_p2 and tmp_362_fu_741_p2);
    p_demorgan8_fu_914_p2 <= (tmp_340_fu_908_p2 and tmp_339_fu_902_p2);
    p_demorgan9_fu_1163_p2 <= (tmp_297_fu_1157_p2 and tmp_296_fu_1151_p2);
    p_demorgan_fu_566_p2 <= (tmp_318_fu_560_p2 and tmp_317_fu_554_p2);
    tmp_100_fu_960_p3 <= (tmp_263_reg_1771 & ap_const_lv5_0);
    tmp_101_fu_968_p2 <= (tmp_100_fu_960_p3 or ap_const_lv6_1F);
    tmp_102_fu_451_p3 <= (tmp_223_reg_1695 & ap_const_lv5_0);
    tmp_103_fu_458_p2 <= (tmp_102_fu_451_p3 or ap_const_lv7_1F);
    tmp_104_fu_799_p3 <= (tmp_323_reg_1753 & ap_const_lv5_0);
    tmp_105_fu_806_p2 <= (tmp_104_fu_799_p3 or ap_const_lv7_1F);
    tmp_106_fu_638_p3 <= (tmp_346_reg_1735 & ap_const_lv5_0);
    tmp_107_fu_645_p2 <= (tmp_106_fu_638_p3 or ap_const_lv7_1F);
    tmp_108_fu_1459_p3 <= (tmp_369_fu_1455_p1 & ap_const_lv5_0);
    tmp_109_fu_1467_p2 <= (tmp_108_fu_1459_p3 or ap_const_lv7_1F);
    tmp_223_fu_395_p1 <= i_reg_205(2 - 1 downto 0);
    tmp_224_fu_1205_p1 <= i5_reg_317(1 - 1 downto 0);
    tmp_226_fu_1225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_1209_p3),7));
    tmp_227_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_1218_p2),7));
    
    tmp_228_fu_1233_p4_proc : process(enc_data_out_V_reg_1705)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_228_fu_1233_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := enc_data_out_V_reg_1705;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_228_fu_1233_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_228_fu_1233_p4_i) := enc_data_out_V_reg_1705(64-1-tmp_228_fu_1233_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_228_fu_1233_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_229_fu_1242_p2 <= std_logic_vector(unsigned(tmp_226_fu_1225_p1) - unsigned(tmp_227_fu_1229_p1));
    tmp_230_fu_1248_p2 <= (tmp_226_fu_1225_p1 xor ap_const_lv7_3F);
    tmp_231_fu_1254_p2 <= std_logic_vector(unsigned(tmp_227_fu_1229_p1) - unsigned(tmp_226_fu_1225_p1));
    tmp_232_fu_1260_p3 <= 
        tmp_229_fu_1242_p2 when (grp_fu_375_p2(0) = '1') else 
        tmp_231_fu_1254_p2;
    tmp_233_fu_1268_p3 <= 
        tmp_228_fu_1233_p4 when (grp_fu_375_p2(0) = '1') else 
        enc_data_out_V_reg_1705;
    tmp_234_fu_1275_p3 <= 
        tmp_230_fu_1248_p2 when (grp_fu_375_p2(0) = '1') else 
        tmp_226_fu_1225_p1;
    tmp_235_fu_1283_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_232_fu_1260_p3));
    tmp_236_fu_1289_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_234_fu_1275_p3),64));
    tmp_237_fu_1299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_235_reg_1827),64));
    tmp_238_fu_1293_p2 <= std_logic_vector(shift_right(unsigned(tmp_233_fu_1268_p3),to_integer(unsigned('0' & tmp_236_fu_1289_p1(31-1 downto 0)))));
    tmp_239_fu_1302_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_237_fu_1299_p1(31-1 downto 0)))));
    tmp_240_fu_1308_p2 <= (tmp_239_fu_1302_p2 and tmp_238_reg_1832);
    tmp_241_fu_1313_p1 <= tmp_240_fu_1308_p2(32 - 1 downto 0);
    tmp_243_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_reg_1815),7));
    tmp_244_fu_1320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_reg_1821),7));
    tmp_245_fu_1323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_241_fu_1313_p1),64));
    tmp_246_fu_1327_p2 <= (tmp_243_fu_1317_p1 xor ap_const_lv7_3F);
    tmp_247_fu_1333_p3 <= 
        tmp_243_fu_1317_p1 when (grp_fu_375_p2(0) = '1') else 
        tmp_244_fu_1320_p1;
    tmp_248_fu_1341_p3 <= 
        tmp_244_fu_1320_p1 when (grp_fu_375_p2(0) = '1') else 
        tmp_243_fu_1317_p1;
    tmp_249_fu_1349_p3 <= 
        tmp_246_fu_1327_p2 when (grp_fu_375_p2(0) = '1') else 
        tmp_243_fu_1317_p1;
    tmp_250_fu_1357_p2 <= (tmp_247_fu_1333_p3 xor ap_const_lv7_3F);
    tmp_251_fu_1363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_249_fu_1349_p3),64));
    tmp_252_fu_1367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_248_fu_1341_p3),64));
    tmp_253_fu_1371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_250_fu_1357_p2),64));
    tmp_254_fu_1375_p2 <= std_logic_vector(shift_left(unsigned(tmp_245_fu_1323_p1),to_integer(unsigned('0' & tmp_251_fu_1363_p1(31-1 downto 0)))));
    
    tmp_255_fu_1381_p4_proc : process(tmp_254_fu_1375_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_255_fu_1381_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_254_fu_1375_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_255_fu_1381_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_255_fu_1381_p4_i) := tmp_254_fu_1375_p2(64-1-tmp_255_fu_1381_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_255_fu_1381_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_256_fu_1391_p3 <= 
        tmp_255_fu_1381_p4 when (grp_fu_375_p2(0) = '1') else 
        tmp_254_fu_1375_p2;
    tmp_257_fu_1399_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_252_fu_1367_p1(31-1 downto 0)))));
    tmp_258_fu_1405_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_253_fu_1371_p1(31-1 downto 0)))));
    tmp_259_fu_1417_p2 <= (p_demorgan1_fu_1411_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_260_fu_1423_p2 <= (tmp_259_fu_1417_p2 and dec_data_in_V_reg_305);
    tmp_261_fu_1429_p2 <= (tmp_256_fu_1391_p3 and p_demorgan1_fu_1411_p2);
    tmp_263_fu_956_p1 <= i6_reg_274(1 - 1 downto 0);
    tmp_265_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_reg_1776),7));
    tmp_266_fu_978_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_reg_1783),7));
    
    tmp_267_fu_981_p4_proc : process(enc_data_out_V_reg_1705)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_267_fu_981_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := enc_data_out_V_reg_1705;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_267_fu_981_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_267_fu_981_p4_i) := enc_data_out_V_reg_1705(64-1-tmp_267_fu_981_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_267_fu_981_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_268_fu_990_p2 <= std_logic_vector(unsigned(tmp_265_fu_975_p1) - unsigned(tmp_266_fu_978_p1));
    tmp_269_fu_996_p2 <= (tmp_265_fu_975_p1 xor ap_const_lv7_3F);
    tmp_270_fu_1002_p2 <= std_logic_vector(unsigned(tmp_266_fu_978_p1) - unsigned(tmp_265_fu_975_p1));
    tmp_271_fu_1008_p3 <= 
        tmp_268_fu_990_p2 when (tmp_264_reg_1790(0) = '1') else 
        tmp_270_fu_1002_p2;
    tmp_272_fu_1015_p3 <= 
        tmp_267_fu_981_p4 when (tmp_264_reg_1790(0) = '1') else 
        enc_data_out_V_reg_1705;
    tmp_273_fu_1021_p3 <= 
        tmp_269_fu_996_p2 when (tmp_264_reg_1790(0) = '1') else 
        tmp_265_fu_975_p1;
    tmp_274_fu_1028_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_271_fu_1008_p3));
    tmp_275_fu_1034_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_273_fu_1021_p3),64));
    tmp_276_fu_1038_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_274_fu_1028_p2),64));
    tmp_277_fu_1042_p2 <= std_logic_vector(shift_right(unsigned(tmp_272_fu_1015_p3),to_integer(unsigned('0' & tmp_275_fu_1034_p1(31-1 downto 0)))));
    tmp_278_fu_1048_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_276_fu_1038_p1(31-1 downto 0)))));
    tmp_279_fu_1054_p2 <= (tmp_278_fu_1048_p2 and tmp_277_fu_1042_p2);
    tmp_282_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_reg_1776),7));
    tmp_283_fu_1073_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_reg_1783),7));
    tmp_284_fu_1076_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_61_reg_1797),64));
    tmp_285_fu_1079_p2 <= (tmp_282_fu_1070_p1 xor ap_const_lv7_3F);
    tmp_286_fu_1085_p3 <= 
        tmp_282_fu_1070_p1 when (grp_fu_371_p2(0) = '1') else 
        tmp_283_fu_1073_p1;
    tmp_287_fu_1093_p3 <= 
        tmp_283_fu_1073_p1 when (grp_fu_371_p2(0) = '1') else 
        tmp_282_fu_1070_p1;
    tmp_288_fu_1101_p3 <= 
        tmp_285_fu_1079_p2 when (grp_fu_371_p2(0) = '1') else 
        tmp_282_fu_1070_p1;
    tmp_289_fu_1109_p2 <= (tmp_286_fu_1085_p3 xor ap_const_lv7_3F);
    tmp_290_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_288_fu_1101_p3),64));
    tmp_291_fu_1119_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_287_fu_1093_p3),64));
    tmp_292_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_289_fu_1109_p2),64));
    tmp_293_fu_1127_p2 <= std_logic_vector(shift_left(unsigned(tmp_284_fu_1076_p1),to_integer(unsigned('0' & tmp_290_fu_1115_p1(31-1 downto 0)))));
    
    tmp_294_fu_1133_p4_proc : process(tmp_293_fu_1127_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_294_fu_1133_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_293_fu_1127_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_294_fu_1133_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_294_fu_1133_p4_i) := tmp_293_fu_1127_p2(64-1-tmp_294_fu_1133_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_294_fu_1133_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_295_fu_1143_p3 <= 
        tmp_294_fu_1133_p4 when (grp_fu_371_p2(0) = '1') else 
        tmp_293_fu_1127_p2;
    tmp_296_fu_1151_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_291_fu_1119_p1(31-1 downto 0)))));
    tmp_297_fu_1157_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_292_fu_1123_p1(31-1 downto 0)))));
    tmp_298_fu_1169_p2 <= (p_demorgan9_fu_1163_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_299_fu_1175_p2 <= (tmp_298_fu_1169_p2 and dec_data_in_V_1_reg_262);
    tmp_300_fu_1181_p2 <= (tmp_295_fu_1143_p3 and p_demorgan9_fu_1163_p2);
    tmp_302_fu_464_p2 <= "1" when (unsigned(tmp_102_fu_451_p3) > unsigned(tmp_103_fu_458_p2)) else "0";
    tmp_303_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_451_p3),8));
    tmp_304_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_458_p2),8));
    tmp_305_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(axis_enc_data_in_V_data_V_0_data_out),128));
    tmp_306_fu_482_p2 <= (tmp_303_fu_470_p1 xor ap_const_lv8_7F);
    tmp_307_fu_488_p3 <= 
        tmp_303_fu_470_p1 when (tmp_302_fu_464_p2(0) = '1') else 
        tmp_304_fu_474_p1;
    tmp_308_fu_496_p3 <= 
        tmp_304_fu_474_p1 when (tmp_302_fu_464_p2(0) = '1') else 
        tmp_303_fu_470_p1;
    tmp_309_fu_504_p3 <= 
        tmp_306_fu_482_p2 when (tmp_302_fu_464_p2(0) = '1') else 
        tmp_303_fu_470_p1;
    tmp_310_fu_512_p2 <= (tmp_307_fu_488_p3 xor ap_const_lv8_7F);
    tmp_311_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_309_fu_504_p3),128));
    tmp_312_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_308_fu_496_p3),128));
    tmp_313_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_310_fu_512_p2),128));
    tmp_314_fu_530_p2 <= std_logic_vector(shift_left(unsigned(tmp_305_fu_478_p1),to_integer(unsigned('0' & tmp_311_fu_518_p1(31-1 downto 0)))));
    
    tmp_315_fu_536_p4_proc : process(tmp_314_fu_530_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_315_fu_536_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_314_fu_530_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_315_fu_536_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_315_fu_536_p4_i) := tmp_314_fu_530_p2(128-1-tmp_315_fu_536_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_315_fu_536_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_316_fu_546_p3 <= 
        tmp_315_fu_536_p4 when (tmp_302_fu_464_p2(0) = '1') else 
        tmp_314_fu_530_p2;
    tmp_317_fu_554_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_312_fu_522_p1(31-1 downto 0)))));
    tmp_318_fu_560_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_313_fu_526_p1(31-1 downto 0)))));
    tmp_319_fu_572_p2 <= (p_demorgan_fu_566_p2 xor ap_const_lv128_lc_3);
    tmp_320_fu_578_p2 <= (tmp_319_fu_572_p2 and enc_data_in_V_s_reg_193);
    tmp_321_fu_584_p2 <= (tmp_316_fu_546_p3 and p_demorgan_fu_566_p2);
    tmp_323_fu_795_p1 <= i7_reg_251(2 - 1 downto 0);
    tmp_324_fu_812_p2 <= "1" when (unsigned(tmp_104_fu_799_p3) > unsigned(tmp_105_fu_806_p2)) else "0";
    tmp_325_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_799_p3),8));
    tmp_326_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_fu_806_p2),8));
    tmp_327_fu_826_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(reg_379),128));
    tmp_328_fu_830_p2 <= (tmp_325_fu_818_p1 xor ap_const_lv8_7F);
    tmp_329_fu_836_p3 <= 
        tmp_325_fu_818_p1 when (tmp_324_fu_812_p2(0) = '1') else 
        tmp_326_fu_822_p1;
    tmp_330_fu_844_p3 <= 
        tmp_326_fu_822_p1 when (tmp_324_fu_812_p2(0) = '1') else 
        tmp_325_fu_818_p1;
    tmp_331_fu_852_p3 <= 
        tmp_328_fu_830_p2 when (tmp_324_fu_812_p2(0) = '1') else 
        tmp_325_fu_818_p1;
    tmp_332_fu_860_p2 <= (tmp_329_fu_836_p3 xor ap_const_lv8_7F);
    tmp_333_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_331_fu_852_p3),128));
    tmp_334_fu_870_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_330_fu_844_p3),128));
    tmp_335_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_332_fu_860_p2),128));
    tmp_336_fu_878_p2 <= std_logic_vector(shift_left(unsigned(tmp_327_fu_826_p1),to_integer(unsigned('0' & tmp_333_fu_866_p1(31-1 downto 0)))));
    
    tmp_337_fu_884_p4_proc : process(tmp_336_fu_878_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_337_fu_884_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_336_fu_878_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_337_fu_884_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_337_fu_884_p4_i) := tmp_336_fu_878_p2(128-1-tmp_337_fu_884_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_337_fu_884_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_338_fu_894_p3 <= 
        tmp_337_fu_884_p4 when (tmp_324_fu_812_p2(0) = '1') else 
        tmp_336_fu_878_p2;
    tmp_339_fu_902_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_334_fu_870_p1(31-1 downto 0)))));
    tmp_340_fu_908_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_335_fu_874_p1(31-1 downto 0)))));
    tmp_341_fu_920_p2 <= (p_demorgan8_fu_914_p2 xor ap_const_lv128_lc_3);
    tmp_342_fu_926_p2 <= (tmp_341_fu_920_p2 and dec_data_out_V3_reg_239);
    tmp_343_fu_932_p2 <= (tmp_338_fu_894_p3 and p_demorgan8_fu_914_p2);
    tmp_345_fu_632_p2 <= std_logic_vector(shift_left(unsigned(reg_379),to_integer(unsigned('0' & ap_const_lv32_18(31-1 downto 0)))));
    tmp_346_fu_628_p1 <= i8_reg_228(2 - 1 downto 0);
    tmp_347_fu_651_p2 <= "1" when (unsigned(tmp_106_fu_638_p3) > unsigned(tmp_107_fu_645_p2)) else "0";
    tmp_348_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_fu_638_p3),8));
    tmp_349_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_fu_645_p2),8));
    tmp_350_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_345_fu_632_p2),128));
    tmp_351_fu_669_p2 <= (tmp_348_fu_657_p1 xor ap_const_lv8_7F);
    tmp_352_fu_675_p3 <= 
        tmp_348_fu_657_p1 when (tmp_347_fu_651_p2(0) = '1') else 
        tmp_349_fu_661_p1;
    tmp_353_fu_683_p3 <= 
        tmp_349_fu_661_p1 when (tmp_347_fu_651_p2(0) = '1') else 
        tmp_348_fu_657_p1;
    tmp_354_fu_691_p3 <= 
        tmp_351_fu_669_p2 when (tmp_347_fu_651_p2(0) = '1') else 
        tmp_348_fu_657_p1;
    tmp_355_fu_699_p2 <= (tmp_352_fu_675_p3 xor ap_const_lv8_7F);
    tmp_356_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_354_fu_691_p3),128));
    tmp_357_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_353_fu_683_p3),128));
    tmp_358_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_355_fu_699_p2),128));
    tmp_359_fu_717_p2 <= std_logic_vector(shift_left(unsigned(tmp_350_fu_665_p1),to_integer(unsigned('0' & tmp_356_fu_705_p1(31-1 downto 0)))));
    
    tmp_360_fu_723_p4_proc : process(tmp_359_fu_717_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_360_fu_723_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_359_fu_717_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_360_fu_723_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_360_fu_723_p4_i) := tmp_359_fu_717_p2(128-1-tmp_360_fu_723_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_360_fu_723_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_361_fu_733_p3 <= 
        tmp_360_fu_723_p4 when (tmp_347_fu_651_p2(0) = '1') else 
        tmp_359_fu_717_p2;
    tmp_362_fu_741_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_357_fu_709_p1(31-1 downto 0)))));
    tmp_363_fu_747_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_358_fu_713_p1(31-1 downto 0)))));
    tmp_364_fu_759_p2 <= (p_demorgan7_fu_753_p2 xor ap_const_lv128_lc_3);
    tmp_365_fu_765_p2 <= (tmp_364_fu_759_p2 and dec_data_out_V_1_reg_216);
    tmp_366_fu_771_p2 <= (tmp_361_fu_733_p3 and p_demorgan7_fu_753_p2);
    tmp_368_fu_1441_p3 <= i9_reg_328(2 downto 2);
    tmp_369_fu_1455_p1 <= i9_reg_328(2 - 1 downto 0);
    tmp_370_fu_1473_p2 <= "1" when (unsigned(tmp_108_fu_1459_p3) > unsigned(tmp_109_fu_1467_p2)) else "0";
    tmp_371_fu_1479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_fu_1459_p3),8));
    tmp_372_fu_1483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_1467_p2),8));
    
    tmp_373_fu_1487_p4_proc : process(dec_data_out_V_5_reg_285)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_373_fu_1487_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := dec_data_out_V_5_reg_285;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_373_fu_1487_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_373_fu_1487_p4_i) := dec_data_out_V_5_reg_285(128-1-tmp_373_fu_1487_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_373_fu_1487_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_374_fu_1497_p2 <= std_logic_vector(unsigned(tmp_371_fu_1479_p1) - unsigned(tmp_372_fu_1483_p1));
    tmp_375_fu_1503_p2 <= (tmp_371_fu_1479_p1 xor ap_const_lv8_7F);
    tmp_376_fu_1509_p2 <= std_logic_vector(unsigned(tmp_372_fu_1483_p1) - unsigned(tmp_371_fu_1479_p1));
    tmp_377_fu_1515_p3 <= 
        tmp_374_fu_1497_p2 when (tmp_370_fu_1473_p2(0) = '1') else 
        tmp_376_fu_1509_p2;
    tmp_378_fu_1523_p3 <= 
        tmp_373_fu_1487_p4 when (tmp_370_fu_1473_p2(0) = '1') else 
        dec_data_out_V_5_reg_285;
    tmp_379_fu_1531_p3 <= 
        tmp_375_fu_1503_p2 when (tmp_370_fu_1473_p2(0) = '1') else 
        tmp_371_fu_1479_p1;
    tmp_380_fu_1539_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_377_fu_1515_p3));
    tmp_381_fu_1545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_379_fu_1531_p3),128));
    tmp_382_fu_1579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_380_reg_1857),128));
    tmp_383_fu_1549_p2 <= std_logic_vector(shift_right(unsigned(tmp_378_fu_1523_p3),to_integer(unsigned('0' & tmp_381_fu_1545_p1(31-1 downto 0)))));
    tmp_384_fu_1582_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_382_fu_1579_p1(31-1 downto 0)))));
    tmp_385_fu_1588_p2 <= (tmp_384_fu_1582_p2 and tmp_383_reg_1862);
    tmp_85_fu_606_p2 <= "1" when (AWGN_EN_REG_read_reg_1674 = ap_const_lv32_2) else "0";
    tmp_86_fu_611_p2 <= "1" when (AWGN_EN_REG_read_reg_1674 = ap_const_lv32_3) else "0";
    tmp_98_fu_1209_p3 <= (tmp_224_fu_1205_p1 & ap_const_lv5_0);
    tmp_99_fu_1218_p2 <= (tmp_98_fu_1209_p3 or ap_const_lv6_1F);
    tmp_fu_596_p2 <= "1" when (AWGN_EN_REG_read_reg_1674 = ap_const_lv32_0) else "0";
    tmp_s_fu_601_p2 <= "1" when (AWGN_EN_REG_read_reg_1674 = ap_const_lv32_1) else "0";
end behav;
