-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder_decoder is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis_enc_data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_in_TVALID : IN STD_LOGIC;
    axis_enc_data_in_TREADY : OUT STD_LOGIC;
    axis_enc_data_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axis_enc_data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_dec_data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_out_TVALID : OUT STD_LOGIC;
    axis_dec_data_out_TREADY : IN STD_LOGIC;
    axis_dec_data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axis_dec_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of encoder_decoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_decoder,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=244,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=169,HLS_SYN_FF=21071,HLS_SYN_LUT=35303,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (119 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (119 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (119 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (119 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (119 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (119 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (119 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (119 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (119 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (119 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (119 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (119 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (119 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv102_B5051167F8C6E : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000001011010100000101000100010110011111111000110001101110";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv102_0 : STD_LOGIC_VECTOR (101 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (119 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal SNR_REG_V : STD_LOGIC_VECTOR (7 downto 0);
    signal AWGN_EN_REG : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axis_dec_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal tmp_224_reg_1942 : STD_LOGIC_VECTOR (0 downto 0);
    signal AWGN_EN_REG_read_reg_1707 : STD_LOGIC_VECTOR (31 downto 0);
    signal SNR_REG_V_read_reg_1714 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_305_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1722 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_223_fu_311_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_223_reg_1727 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1741 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1745 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_85_reg_1749 : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_in_V_fu_521_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_encoder_fu_259_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_data_out_V_reg_1758 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal i_4_fu_533_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_1771 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal tmp_98_fu_539_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_98_reg_1776 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_operator_s_fu_274_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_274_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_274_ap_done : STD_LOGIC;
    signal r_V_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_reg_1781 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_107_fu_557_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_107_reg_1786 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_108_fu_566_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_108_reg_1793 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_335_fu_631_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_335_reg_1800 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_338_fu_641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_338_reg_1805 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_282_reg_1810 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_fu_655_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_reg_1816 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_663_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_99_reg_1821 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_fu_671_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_reg_1826 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_236_fu_741_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_236_reg_1831 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_239_fu_751_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_239_reg_1836 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_243_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_243_reg_1841 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_8_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_8_reg_1849 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal dec_data_in_V_load_2_reg_1854 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_384_reg_1860 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_2_fu_781_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_2_reg_1868 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_363_reg_1873 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_fu_1043_p2 : STD_LOGIC_VECTOR (101 downto 0);
    signal mul_reg_1886 : STD_LOGIC_VECTOR (101 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal tmp_284_reg_1891 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_v_v_fu_1074_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_v_v_reg_1896 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal tmp_105_fu_1080_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_105_reg_1902 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_106_fu_1088_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_106_reg_1909 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_286_reg_1916 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_1203_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_reg_1923 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal tmp_303_reg_1928 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decoder_fu_265_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal dec_data_out_V_reg_1936 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal tmp_224_fu_1476_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal i_3_fu_1484_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1946 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_264_fu_1490_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_264_reg_1951 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_275_fu_1572_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_275_reg_1957 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_278_fu_1582_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_278_reg_1962 : STD_LOGIC_VECTOR (127 downto 0);
    signal axis_dec_data_out_it_fu_1626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_it_1_fu_1631_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_it_2_fu_1645_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_it_2_reg_1977 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder_fu_259_ap_start : STD_LOGIC;
    signal grp_encoder_fu_259_ap_done : STD_LOGIC;
    signal grp_encoder_fu_259_ap_idle : STD_LOGIC;
    signal grp_encoder_fu_259_ap_ready : STD_LOGIC;
    signal grp_decoder_fu_265_ap_start : STD_LOGIC;
    signal grp_decoder_fu_265_ap_done : STD_LOGIC;
    signal grp_decoder_fu_265_ap_idle : STD_LOGIC;
    signal grp_decoder_fu_265_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_274_ap_start : STD_LOGIC;
    signal grp_operator_s_fu_274_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal enc_data_in_V_s_reg_213 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_225 : STD_LOGIC_VECTOR (2 downto 0);
    signal i5_reg_236 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal i6_reg_248 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state120 : BOOLEAN;
    signal ap_block_state120_io : BOOLEAN;
    signal grp_encoder_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_decoder_fu_265_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state106 : STD_LOGIC;
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal grp_operator_s_fu_274_ap_start_reg : STD_LOGIC := '0';
    signal exitcond_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_keep_V_fu_142 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_fu_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_2_fu_150 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_3_fu_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_fu_158 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_162 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_fu_166 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_fu_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal dec_data_in_V_s_fu_174 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_404_fu_898_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal tmp_383_fu_1021_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal tmp_323_fu_1322_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_263_fu_1465_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_109_fu_382_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_110_fu_389_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_343_fu_401_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_342_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_344_fu_405_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_346_fu_413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_347_fu_419_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_349_fu_435_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_348_fu_427_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_350_fu_443_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_345_fu_409_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_351_fu_449_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_354_fu_461_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_355_fu_467_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_352_fu_453_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_353_fu_457_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_357_fu_485_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_358_fu_491_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_497_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_359_fu_503_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_356_fu_477_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_360_fu_509_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_361_fu_515_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_324_fu_553_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_326_fu_573_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_327_fu_577_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_329_fu_590_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_331_fu_602_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_328_fu_581_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_330_fu_596_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_332_fu_608_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_334_fu_623_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_333_fu_616_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_336_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_225_fu_659_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_227_fu_683_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_228_fu_687_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_226_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_230_fu_700_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_232_fu_712_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_229_fu_691_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_231_fu_706_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_233_fu_718_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_235_fu_733_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_234_fu_726_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_237_fu_747_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_337_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_339_fu_766_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_340_fu_772_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_385_fu_786_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_386_fu_789_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_388_fu_795_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_389_fu_801_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_391_fu_815_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_390_fu_808_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_392_fu_822_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_387_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_393_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_396_fu_840_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_397_fu_846_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_394_fu_832_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_395_fu_836_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_399_fu_863_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_400_fu_869_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan6_fu_875_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_401_fu_881_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_398_fu_856_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_402_fu_887_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_403_fu_892_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_364_fu_909_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_365_fu_912_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_367_fu_918_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_368_fu_924_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_370_fu_938_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_369_fu_931_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_371_fu_945_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_366_fu_915_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_372_fu_951_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_375_fu_963_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_376_fu_969_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_373_fu_955_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_374_fu_959_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_378_fu_986_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_379_fu_992_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan7_fu_998_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_380_fu_1004_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_377_fu_979_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_381_fu_1010_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_382_fu_1015_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_96_fu_1032_p3 : STD_LOGIC_VECTOR (49 downto 0);
    signal grp_fu_1043_p1 : STD_LOGIC_VECTOR (52 downto 0);
    signal neg_mul_fu_1059_p2 : STD_LOGIC_VECTOR (101 downto 0);
    signal tmp_283_fu_1064_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal trunc_fu_1095_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_287_fu_1104_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_288_fu_1107_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_290_fu_1119_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_292_fu_1131_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_289_fu_1110_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_291_fu_1125_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_293_fu_1137_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_295_fu_1150_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_296_fu_1157_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_294_fu_1144_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_297_fu_1163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_298_fu_1167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_299_fu_1171_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_300_fu_1177_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_301_fu_1183_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal neg_ti_fu_1098_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_102_fu_1193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_1189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_103_fu_1196_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_304_fu_1209_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_305_fu_1212_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_307_fu_1218_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_308_fu_1224_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_310_fu_1238_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_309_fu_1231_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_311_fu_1245_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_306_fu_1215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_312_fu_1251_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_315_fu_1263_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_316_fu_1269_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_313_fu_1255_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_314_fu_1259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_318_fu_1286_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_319_fu_1292_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan8_fu_1298_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_320_fu_1304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_317_fu_1279_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_321_fu_1310_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_322_fu_1316_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_238_fu_1333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_240_fu_1336_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_241_fu_1342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_242_fu_1347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_244_fu_1351_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_245_fu_1354_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_247_fu_1361_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_248_fu_1367_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_250_fu_1381_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_249_fu_1374_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_251_fu_1388_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_246_fu_1357_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_252_fu_1394_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_255_fu_1406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_256_fu_1412_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_253_fu_1398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_254_fu_1402_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_258_fu_1429_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_259_fu_1435_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan9_fu_1441_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_260_fu_1447_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_257_fu_1422_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_261_fu_1453_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_262_fu_1459_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_fu_1494_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_104_fu_1502_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_266_fu_1514_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_267_fu_1518_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_265_fu_1508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_269_fu_1531_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_271_fu_1543_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_268_fu_1522_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_270_fu_1537_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_272_fu_1549_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_274_fu_1564_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_273_fu_1557_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_276_fu_1578_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_277_fu_1612_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_279_fu_1615_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_280_fu_1621_p2 : STD_LOGIC_VECTOR (127 downto 0);

    component encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        snr_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encoder_decoder_mibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (52 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (101 downto 0) );
    end component;


    component encoder_decoder_mjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component encoder_decoder_mkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component encoder_decoder_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        SNR_REG_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWGN_EN_REG : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    encoder_decoder_ctrl_s_axi_U : component encoder_decoder_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        SNR_REG_V => SNR_REG_V,
        AWGN_EN_REG => AWGN_EN_REG);

    grp_encoder_fu_259 : component encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoder_fu_259_ap_start,
        ap_done => grp_encoder_fu_259_ap_done,
        ap_idle => grp_encoder_fu_259_ap_idle,
        ap_ready => grp_encoder_fu_259_ap_ready,
        data_V_read => enc_data_in_V_s_reg_213,
        ap_return => grp_encoder_fu_259_ap_return);

    grp_decoder_fu_265 : component decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decoder_fu_265_ap_start,
        ap_done => grp_decoder_fu_265_ap_done,
        ap_idle => grp_decoder_fu_265_ap_idle,
        ap_ready => grp_decoder_fu_265_ap_ready,
        data_V_read => dec_data_in_V_s_fu_174,
        ap_return => grp_decoder_fu_265_ap_return);

    grp_operator_s_fu_274 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_s_fu_274_ap_start,
        ap_done => grp_operator_s_fu_274_ap_done,
        ap_idle => grp_operator_s_fu_274_ap_idle,
        ap_ready => grp_operator_s_fu_274_ap_ready,
        snr_V_read => SNR_REG_V_read_reg_1714,
        ap_return => grp_operator_s_fu_274_ap_return);

    encoder_decoder_mibs_U42 : component encoder_decoder_mibs
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 50,
        din1_WIDTH => 53,
        dout_WIDTH => 102)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_96_fu_1032_p3,
        din1 => grp_fu_1043_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1043_p2);

    encoder_decoder_mjbC_U43 : component encoder_decoder_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => tmp_keep_V_fu_142,
        din1 => tmp_keep_V_1_fu_146,
        din2 => tmp_keep_V_2_fu_150,
        din3 => tmp_keep_V_3_fu_154,
        din4 => tmp_264_reg_1951,
        dout => axis_dec_data_out_it_1_fu_1631_p6);

    encoder_decoder_mkbM_U44 : component encoder_decoder_mkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_last_V_fu_158,
        din1 => tmp_last_V_1_fu_162,
        din2 => tmp_last_V_2_fu_166,
        din3 => tmp_last_V_3_fu_170,
        din4 => tmp_264_reg_1951,
        dout => axis_dec_data_out_it_2_fu_1645_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_rd <= not(axis_dec_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_wr <= not(axis_dec_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_rd <= not(axis_dec_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_wr <= not(axis_dec_data_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_rd <= not(axis_dec_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_wr <= not(axis_dec_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_rd <= not(axis_enc_data_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_wr <= not(axis_enc_data_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_rd <= not(axis_enc_data_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_wr <= not(axis_enc_data_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_rd <= not(axis_enc_data_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_wr <= not(axis_enc_data_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_decoder_fu_265_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decoder_fu_265_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state106) and (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                    grp_decoder_fu_265_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoder_fu_265_ap_ready = ap_const_logic_1)) then 
                    grp_decoder_fu_265_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encoder_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoder_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_encoder_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoder_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_encoder_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_274_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_s_fu_274_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond_fu_527_p2 = ap_const_lv1_0))) then 
                    grp_operator_s_fu_274_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_274_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_274_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dec_data_in_V_s_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
                dec_data_in_V_s_fu_174 <= tmp_263_fu_1465_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state104) and (tmp_s_reg_1745 = ap_const_lv1_1) and (tmp_reg_1741 = ap_const_lv1_0))) then 
                dec_data_in_V_s_fu_174 <= tmp_323_fu_1322_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
                dec_data_in_V_s_fu_174 <= tmp_383_fu_1021_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
                dec_data_in_V_s_fu_174 <= tmp_404_fu_898_p2;
            end if; 
        end if;
    end process;

    i5_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
                i5_reg_236 <= i_4_reg_1771;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
                i5_reg_236 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i6_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state120_io))) and (ap_const_logic_1 = ap_CS_fsm_state120) and (axis_dec_data_out_it_2_reg_1977 = ap_const_lv1_0) and (tmp_224_reg_1942 = ap_const_lv1_0))) then 
                i6_reg_248 <= i_3_reg_1946;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
                i6_reg_248 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_225 <= i_2_reg_1722;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_225 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                AWGN_EN_REG_read_reg_1707 <= AWGN_EN_REG;
                SNR_REG_V_read_reg_1714 <= SNR_REG_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_1626_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_1626_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_A <= axis_dec_data_out_it_1_fu_1631_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_B <= axis_dec_data_out_it_1_fu_1631_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_A <= axis_dec_data_out_it_2_fu_1645_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_B <= axis_dec_data_out_it_2_fu_1645_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                axis_dec_data_out_it_2_reg_1977 <= axis_dec_data_out_it_2_fu_1645_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_A <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_B <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                dec_data_in_V_load_2_reg_1854 <= dec_data_in_V_s_fu_174;
                p_Val2_8_reg_1849 <= p_Val2_8_fu_777_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state117)) then
                dec_data_out_V_reg_1936 <= grp_decoder_fu_265_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                enc_data_in_V_s_reg_213 <= enc_data_in_V_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                enc_data_out_V_reg_1758 <= grp_encoder_fu_259_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_1722 <= i_2_fu_305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state118)) then
                i_3_reg_1946 <= i_3_fu_1484_p2;
                tmp_224_reg_1942 <= i6_reg_248(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                i_4_reg_1771 <= i_4_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state101)) then
                mul_reg_1886 <= grp_fu_1043_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_85_reg_1749 = ap_const_lv1_1))) then
                p_Val2_2_reg_1868 <= p_Val2_2_fu_781_p2;
                tmp_363_reg_1873 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state103)) then
                p_Val2_s_reg_1923 <= p_Val2_s_fu_1203_p2;
                tmp_303_reg_1928 <= grp_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then
                p_v_v_reg_1896 <= p_v_v_fu_1074_p3;
                    tmp_105_reg_1902(5) <= tmp_105_fu_1080_p3(5);
                    tmp_106_reg_1909(5) <= tmp_106_fu_1088_p2(5);
                tmp_286_reg_1916 <= grp_fu_295_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                r_V_reg_1781 <= r_V_fu_549_p1;
                tmp_98_reg_1776 <= grp_operator_s_fu_274_ap_return(31 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96) and (tmp_reg_1741 = ap_const_lv1_1))) then
                    tmp_100_reg_1826(5) <= tmp_100_fu_671_p2(5);
                    tmp_236_reg_1831(6 downto 1) <= tmp_236_fu_741_p2(6 downto 1);
                tmp_239_reg_1836 <= tmp_239_fu_751_p2;
                tmp_243_reg_1841 <= tmp_243_fu_757_p2;
                    tmp_99_reg_1821(5) <= tmp_99_fu_663_p3(5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96) and (tmp_s_reg_1745 = ap_const_lv1_0) and (tmp_reg_1741 = ap_const_lv1_0))) then
                    tmp_107_reg_1786(5) <= tmp_107_fu_557_p3(5);
                    tmp_108_reg_1793(5) <= tmp_108_fu_566_p2(5);
                    tmp_335_reg_1800(6 downto 1) <= tmp_335_fu_631_p2(6 downto 1);
                tmp_338_reg_1805 <= tmp_338_fu_641_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_299_p2 = ap_const_lv1_0))) then
                tmp_223_reg_1727 <= tmp_223_fu_311_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state118) and (tmp_224_fu_1476_p3 = ap_const_lv1_0))) then
                tmp_264_reg_1951 <= tmp_264_fu_1490_p1;
                    tmp_275_reg_1957(7 downto 1) <= tmp_275_fu_1572_p2(7 downto 1);
                tmp_278_reg_1962 <= tmp_278_fu_1582_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96) and (tmp_s_reg_1745 = ap_const_lv1_1) and (tmp_reg_1741 = ap_const_lv1_0))) then
                tmp_282_reg_1810 <= grp_operator_s_fu_274_ap_return(31 downto 31);
                tmp_285_reg_1816 <= tmp_285_fu_655_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state101) and (tmp_282_reg_1810 = ap_const_lv1_0))) then
                tmp_284_reg_1891 <= grp_fu_1043_p2(101 downto 76);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_85_reg_1749 = ap_const_lv1_0))) then
                tmp_384_reg_1860 <= grp_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_299_p2 = ap_const_lv1_1))) then
                tmp_85_reg_1749 <= tmp_85_fu_325_p2;
                tmp_reg_1741 <= tmp_fu_315_p2;
                tmp_s_reg_1745 <= tmp_s_fu_320_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1727 = ap_const_lv2_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_1_fu_146 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_1_fu_162 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1727 = ap_const_lv2_2) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_2_fu_150 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_2_fu_166 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1727 = ap_const_lv2_3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_3_fu_154 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_3_fu_170 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1727 = ap_const_lv2_0) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_fu_142 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_fu_158 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    tmp_107_reg_1786(4 downto 0) <= "00000";
    tmp_108_reg_1793(4 downto 0) <= "11111";
    tmp_335_reg_1800(0) <= '0';
    tmp_99_reg_1821(4 downto 0) <= "00000";
    tmp_100_reg_1826(4 downto 0) <= "11111";
    tmp_236_reg_1831(0) <= '0';
    tmp_105_reg_1902(4 downto 0) <= "00000";
    tmp_106_reg_1909(4 downto 0) <= "11111";
    tmp_275_reg_1957(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, axis_enc_data_in_V_data_V_0_vld_out, axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state119, ap_CS_fsm_state120, tmp_224_reg_1942, ap_CS_fsm_state2, exitcond2_fu_299_p2, tmp_reg_1741, tmp_s_reg_1745, tmp_85_reg_1749, ap_CS_fsm_state95, ap_CS_fsm_state96, grp_operator_s_fu_274_ap_done, ap_CS_fsm_state97, tmp_224_fu_1476_p3, ap_CS_fsm_state118, axis_dec_data_out_it_2_reg_1977, ap_block_state120_io, exitcond_fu_527_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_299_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (exitcond_fu_527_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state106;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state96 => 
                if (((grp_operator_s_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96) and (tmp_s_reg_1745 = ap_const_lv1_1) and (tmp_reg_1741 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                elsif (((grp_operator_s_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96) and (tmp_s_reg_1745 = ap_const_lv1_0) and (tmp_reg_1741 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                elsif (((grp_operator_s_fu_274_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96) and (tmp_reg_1741 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state105;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_85_reg_1749 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state118) and (tmp_224_fu_1476_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_state119 => 
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then
                    ap_NS_fsm <= ap_ST_fsm_state120;
                else
                    ap_NS_fsm <= ap_ST_fsm_state119;
                end if;
            when ap_ST_fsm_state120 => 
                if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state120_io))) and (ap_const_logic_1 = ap_CS_fsm_state120) and ((axis_dec_data_out_it_2_reg_1977 = ap_const_lv1_1) or (tmp_224_reg_1942 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state120_io))) and (ap_const_logic_1 = ap_CS_fsm_state120) and (axis_dec_data_out_it_2_reg_1977 = ap_const_lv1_0) and (tmp_224_reg_1942 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state118;
                else
                    ap_NS_fsm <= ap_ST_fsm_state120;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_NS_fsm_state106 <= ap_NS_fsm(105);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_block_state120_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state120 <= ((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state120_io_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, tmp_224_reg_1942)
    begin
                ap_block_state120_io <= ((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_224_reg_1942 = ap_const_lv1_0));
    end process;


    ap_done_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state120, tmp_224_reg_1942, axis_dec_data_out_it_2_reg_1977, ap_block_state120_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state120_io))) and (ap_const_logic_1 = ap_CS_fsm_state120) and ((axis_dec_data_out_it_2_reg_1977 = ap_const_lv1_1) or (tmp_224_reg_1942 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state120, tmp_224_reg_1942, axis_dec_data_out_it_2_reg_1977, ap_block_state120_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state120_io))) and (ap_const_logic_1 = ap_CS_fsm_state120) and ((axis_dec_data_out_it_2_reg_1977 = ap_const_lv1_1) or (tmp_224_reg_1942 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axis_dec_data_out_TDATA <= axis_dec_data_out_V_data_V_1_data_out;

    axis_dec_data_out_TDATA_blk_n_assign_proc : process(axis_dec_data_out_V_data_V_1_state, ap_CS_fsm_state119, ap_CS_fsm_state120, tmp_224_reg_1942)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state119) or ((ap_const_logic_1 = ap_CS_fsm_state120) and (tmp_224_reg_1942 = ap_const_lv1_0)))) then 
            axis_dec_data_out_TDATA_blk_n <= axis_dec_data_out_V_data_V_1_state(1);
        else 
            axis_dec_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_dec_data_out_TKEEP <= axis_dec_data_out_V_keep_V_1_data_out;
    axis_dec_data_out_TLAST <= axis_dec_data_out_V_last_V_1_data_out;
    axis_dec_data_out_TVALID <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_V_data_V_1_ack_in <= axis_dec_data_out_V_data_V_1_state(1);
    axis_dec_data_out_V_data_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_data_V_1_data_out_assign_proc : process(axis_dec_data_out_V_data_V_1_payload_A, axis_dec_data_out_V_data_V_1_payload_B, axis_dec_data_out_V_data_V_1_sel)
    begin
        if ((axis_dec_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_B;
        else 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_load_A <= (not(axis_dec_data_out_V_data_V_1_sel_wr) and axis_dec_data_out_V_data_V_1_state_cmp_full);
    axis_dec_data_out_V_data_V_1_load_B <= (axis_dec_data_out_V_data_V_1_state_cmp_full and axis_dec_data_out_V_data_V_1_sel_wr);
    axis_dec_data_out_V_data_V_1_sel <= axis_dec_data_out_V_data_V_1_sel_rd;
    axis_dec_data_out_V_data_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_data_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state119)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_vld_out <= axis_dec_data_out_V_data_V_1_state(0);
    axis_dec_data_out_V_keep_V_1_ack_in <= axis_dec_data_out_V_keep_V_1_state(1);
    axis_dec_data_out_V_keep_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_keep_V_1_data_out_assign_proc : process(axis_dec_data_out_V_keep_V_1_payload_A, axis_dec_data_out_V_keep_V_1_payload_B, axis_dec_data_out_V_keep_V_1_sel)
    begin
        if ((axis_dec_data_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_B;
        else 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_load_A <= (not(axis_dec_data_out_V_keep_V_1_sel_wr) and axis_dec_data_out_V_keep_V_1_state_cmp_full);
    axis_dec_data_out_V_keep_V_1_load_B <= (axis_dec_data_out_V_keep_V_1_state_cmp_full and axis_dec_data_out_V_keep_V_1_sel_wr);
    axis_dec_data_out_V_keep_V_1_sel <= axis_dec_data_out_V_keep_V_1_sel_rd;
    axis_dec_data_out_V_keep_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_keep_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state119)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_vld_out <= axis_dec_data_out_V_keep_V_1_state(0);
    axis_dec_data_out_V_last_V_1_ack_in <= axis_dec_data_out_V_last_V_1_state(1);
    axis_dec_data_out_V_last_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_last_V_1_data_out_assign_proc : process(axis_dec_data_out_V_last_V_1_payload_A, axis_dec_data_out_V_last_V_1_payload_B, axis_dec_data_out_V_last_V_1_sel)
    begin
        if ((axis_dec_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_B;
        else 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_load_A <= (not(axis_dec_data_out_V_last_V_1_sel_wr) and axis_dec_data_out_V_last_V_1_state_cmp_full);
    axis_dec_data_out_V_last_V_1_load_B <= (axis_dec_data_out_V_last_V_1_state_cmp_full and axis_dec_data_out_V_last_V_1_sel_wr);
    axis_dec_data_out_V_last_V_1_sel <= axis_dec_data_out_V_last_V_1_sel_rd;
    axis_dec_data_out_V_last_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_last_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state119)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state119))) then 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_vld_out <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_it_fu_1626_p1 <= tmp_280_fu_1621_p2(32 - 1 downto 0);

    axis_enc_data_in_TDATA_blk_n_assign_proc : process(axis_enc_data_in_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis_enc_data_in_TDATA_blk_n <= axis_enc_data_in_V_data_V_0_state(0);
        else 
            axis_enc_data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_enc_data_in_TREADY <= axis_enc_data_in_V_last_V_0_state(1);
    axis_enc_data_in_V_data_V_0_ack_in <= axis_enc_data_in_V_data_V_0_state(1);

    axis_enc_data_in_V_data_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_data_V_0_data_out_assign_proc : process(axis_enc_data_in_V_data_V_0_payload_A, axis_enc_data_in_V_data_V_0_payload_B, axis_enc_data_in_V_data_V_0_sel)
    begin
        if ((axis_enc_data_in_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_B;
        else 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_data_V_0_load_A <= (not(axis_enc_data_in_V_data_V_0_sel_wr) and axis_enc_data_in_V_data_V_0_state_cmp_full);
    axis_enc_data_in_V_data_V_0_load_B <= (axis_enc_data_in_V_data_V_0_state_cmp_full and axis_enc_data_in_V_data_V_0_sel_wr);
    axis_enc_data_in_V_data_V_0_sel <= axis_enc_data_in_V_data_V_0_sel_rd;
    axis_enc_data_in_V_data_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_data_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_data_V_0_vld_out <= axis_enc_data_in_V_data_V_0_state(0);
    axis_enc_data_in_V_keep_V_0_ack_in <= axis_enc_data_in_V_keep_V_0_state(1);

    axis_enc_data_in_V_keep_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_keep_V_0_data_out_assign_proc : process(axis_enc_data_in_V_keep_V_0_payload_A, axis_enc_data_in_V_keep_V_0_payload_B, axis_enc_data_in_V_keep_V_0_sel)
    begin
        if ((axis_enc_data_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_B;
        else 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_keep_V_0_load_A <= (not(axis_enc_data_in_V_keep_V_0_sel_wr) and axis_enc_data_in_V_keep_V_0_state_cmp_full);
    axis_enc_data_in_V_keep_V_0_load_B <= (axis_enc_data_in_V_keep_V_0_state_cmp_full and axis_enc_data_in_V_keep_V_0_sel_wr);
    axis_enc_data_in_V_keep_V_0_sel <= axis_enc_data_in_V_keep_V_0_sel_rd;
    axis_enc_data_in_V_keep_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_keep_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_keep_V_0_vld_out <= axis_enc_data_in_V_keep_V_0_state(0);
    axis_enc_data_in_V_last_V_0_ack_in <= axis_enc_data_in_V_last_V_0_state(1);

    axis_enc_data_in_V_last_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_last_V_0_data_out_assign_proc : process(axis_enc_data_in_V_last_V_0_payload_A, axis_enc_data_in_V_last_V_0_payload_B, axis_enc_data_in_V_last_V_0_sel)
    begin
        if ((axis_enc_data_in_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_B;
        else 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_last_V_0_load_A <= (not(axis_enc_data_in_V_last_V_0_sel_wr) and axis_enc_data_in_V_last_V_0_state_cmp_full);
    axis_enc_data_in_V_last_V_0_load_B <= (axis_enc_data_in_V_last_V_0_state_cmp_full and axis_enc_data_in_V_last_V_0_sel_wr);
    axis_enc_data_in_V_last_V_0_sel <= axis_enc_data_in_V_last_V_0_sel_rd;
    axis_enc_data_in_V_last_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_last_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_last_V_0_vld_out <= axis_enc_data_in_V_last_V_0_state(0);
    enc_data_in_V_fu_521_p2 <= (tmp_361_fu_515_p2 or tmp_360_fu_509_p2);
    exitcond2_fu_299_p2 <= "1" when (i_reg_225 = ap_const_lv3_4) else "0";
    exitcond_fu_527_p2 <= "1" when (i5_reg_236 = ap_const_lv2_2) else "0";
    grp_decoder_fu_265_ap_start <= grp_decoder_fu_265_ap_start_reg;
    grp_encoder_fu_259_ap_start <= grp_encoder_fu_259_ap_start_reg;
    grp_fu_1043_p1 <= ap_const_lv102_B5051167F8C6E(53 - 1 downto 0);

    grp_fu_287_p0_assign_proc : process(tmp_85_reg_1749, ap_CS_fsm_state96, tmp_107_fu_557_p3, tmp_107_reg_1786, ap_CS_fsm_state97)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_85_reg_1749 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_85_reg_1749 = ap_const_lv1_0)))) then 
            grp_fu_287_p0 <= tmp_107_reg_1786;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_287_p0 <= tmp_107_fu_557_p3;
        else 
            grp_fu_287_p0 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_287_p1_assign_proc : process(tmp_85_reg_1749, ap_CS_fsm_state96, tmp_108_fu_566_p2, tmp_108_reg_1793, ap_CS_fsm_state97)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_85_reg_1749 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_85_reg_1749 = ap_const_lv1_0)))) then 
            grp_fu_287_p1 <= tmp_108_reg_1793;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_fu_287_p1 <= tmp_108_fu_566_p2;
        else 
            grp_fu_287_p1 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_287_p2 <= "1" when (unsigned(grp_fu_287_p0) > unsigned(grp_fu_287_p1)) else "0";

    grp_fu_295_p0_assign_proc : process(ap_CS_fsm_state102, tmp_105_fu_1080_p3, tmp_105_reg_1902, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_295_p0 <= tmp_105_reg_1902;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_295_p0 <= tmp_105_fu_1080_p3;
        else 
            grp_fu_295_p0 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_295_p1_assign_proc : process(ap_CS_fsm_state102, tmp_106_fu_1088_p2, tmp_106_reg_1909, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            grp_fu_295_p1 <= tmp_106_reg_1909;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            grp_fu_295_p1 <= tmp_106_fu_1088_p2;
        else 
            grp_fu_295_p1 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_295_p2 <= "1" when (unsigned(grp_fu_295_p0) > unsigned(grp_fu_295_p1)) else "0";
    grp_operator_s_fu_274_ap_start <= grp_operator_s_fu_274_ap_start_reg;
    i_2_fu_305_p2 <= std_logic_vector(unsigned(i_reg_225) + unsigned(ap_const_lv3_1));
    i_3_fu_1484_p2 <= std_logic_vector(unsigned(i6_reg_248) + unsigned(ap_const_lv3_1));
    i_4_fu_533_p2 <= std_logic_vector(unsigned(i5_reg_236) + unsigned(ap_const_lv2_1));
    neg_mul_fu_1059_p2 <= std_logic_vector(unsigned(ap_const_lv102_0) - unsigned(mul_reg_1886));
    neg_ti_fu_1098_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(trunc_fu_1095_p1));
    p_Val2_2_fu_781_p2 <= std_logic_vector(unsigned(p_Val2_8_fu_777_p1) + unsigned(r_V_reg_1781));
    p_Val2_7_fu_1189_p1 <= tmp_301_fu_1183_p2(32 - 1 downto 0);
    p_Val2_8_fu_777_p1 <= tmp_340_fu_772_p2(32 - 1 downto 0);
    p_Val2_s_fu_1203_p2 <= std_logic_vector(unsigned(p_Val2_7_fu_1189_p1) + unsigned(tmp_103_fu_1196_p3));
    p_demorgan6_fu_875_p2 <= (tmp_400_fu_869_p2 and tmp_399_fu_863_p2);
    p_demorgan7_fu_998_p2 <= (tmp_379_fu_992_p2 and tmp_378_fu_986_p2);
    p_demorgan8_fu_1298_p2 <= (tmp_319_fu_1292_p2 and tmp_318_fu_1286_p2);
    p_demorgan9_fu_1441_p2 <= (tmp_259_fu_1435_p2 and tmp_258_fu_1429_p2);
    p_demorgan_fu_497_p2 <= (tmp_358_fu_491_p2 and tmp_357_fu_485_p2);
    p_v_v_fu_1074_p3 <= 
        tmp_283_fu_1064_p4 when (tmp_282_reg_1810(0) = '1') else 
        tmp_284_reg_1891;
        r_V_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_98_fu_539_p4),32));

    tmp_100_fu_671_p2 <= (tmp_99_fu_663_p3 or ap_const_lv6_1F);
    tmp_101_fu_1494_p3 <= (tmp_264_fu_1490_p1 & ap_const_lv5_0);
        tmp_102_fu_1193_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v_v_reg_1896),32));

    tmp_103_fu_1196_p3 <= 
        neg_ti_fu_1098_p2 when (tmp_282_reg_1810(0) = '1') else 
        tmp_102_fu_1193_p1;
    tmp_104_fu_1502_p2 <= (tmp_101_fu_1494_p3 or ap_const_lv7_1F);
    tmp_105_fu_1080_p3 <= (tmp_285_reg_1816 & ap_const_lv5_0);
    tmp_106_fu_1088_p2 <= (tmp_105_fu_1080_p3 or ap_const_lv6_1F);
    tmp_107_fu_557_p3 <= (tmp_324_fu_553_p1 & ap_const_lv5_0);
    tmp_108_fu_566_p2 <= (tmp_107_fu_557_p3 or ap_const_lv6_1F);
    tmp_109_fu_382_p3 <= (tmp_223_reg_1727 & ap_const_lv5_0);
    tmp_110_fu_389_p2 <= (tmp_109_fu_382_p3 or ap_const_lv7_1F);
    tmp_223_fu_311_p1 <= i_reg_225(2 - 1 downto 0);
    tmp_224_fu_1476_p3 <= i6_reg_248(2 downto 2);
    tmp_225_fu_659_p1 <= i5_reg_236(1 - 1 downto 0);
    tmp_226_fu_677_p2 <= "1" when (unsigned(tmp_99_fu_663_p3) > unsigned(tmp_100_fu_671_p2)) else "0";
    tmp_227_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_663_p3),7));
    tmp_228_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_671_p2),7));
    
    tmp_229_fu_691_p4_proc : process(enc_data_out_V_reg_1758)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_229_fu_691_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := enc_data_out_V_reg_1758;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_229_fu_691_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_229_fu_691_p4_i) := enc_data_out_V_reg_1758(64-1-tmp_229_fu_691_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_229_fu_691_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_230_fu_700_p2 <= std_logic_vector(unsigned(tmp_227_fu_683_p1) - unsigned(tmp_228_fu_687_p1));
    tmp_231_fu_706_p2 <= (tmp_227_fu_683_p1 xor ap_const_lv7_3F);
    tmp_232_fu_712_p2 <= std_logic_vector(unsigned(tmp_228_fu_687_p1) - unsigned(tmp_227_fu_683_p1));
    tmp_233_fu_718_p3 <= 
        tmp_230_fu_700_p2 when (tmp_226_fu_677_p2(0) = '1') else 
        tmp_232_fu_712_p2;
    tmp_234_fu_726_p3 <= 
        tmp_229_fu_691_p4 when (tmp_226_fu_677_p2(0) = '1') else 
        enc_data_out_V_reg_1758;
    tmp_235_fu_733_p3 <= 
        tmp_231_fu_706_p2 when (tmp_226_fu_677_p2(0) = '1') else 
        tmp_227_fu_683_p1;
    tmp_236_fu_741_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_233_fu_718_p3));
    tmp_237_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_235_fu_733_p3),64));
    tmp_238_fu_1333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_236_reg_1831),64));
    tmp_239_fu_751_p2 <= std_logic_vector(shift_right(unsigned(tmp_234_fu_726_p3),to_integer(unsigned('0' & tmp_237_fu_747_p1(31-1 downto 0)))));
    tmp_240_fu_1336_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_238_fu_1333_p1(31-1 downto 0)))));
    tmp_241_fu_1342_p2 <= (tmp_240_fu_1336_p2 and tmp_239_reg_1836);
    tmp_242_fu_1347_p1 <= tmp_241_fu_1342_p2(32 - 1 downto 0);
    tmp_243_fu_757_p2 <= "1" when (unsigned(tmp_99_fu_663_p3) > unsigned(tmp_100_fu_671_p2)) else "0";
    tmp_244_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_reg_1821),7));
    tmp_245_fu_1354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_reg_1826),7));
    tmp_246_fu_1357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_242_fu_1347_p1),64));
    tmp_247_fu_1361_p2 <= (tmp_244_fu_1351_p1 xor ap_const_lv7_3F);
    tmp_248_fu_1367_p3 <= 
        tmp_244_fu_1351_p1 when (tmp_243_reg_1841(0) = '1') else 
        tmp_245_fu_1354_p1;
    tmp_249_fu_1374_p3 <= 
        tmp_245_fu_1354_p1 when (tmp_243_reg_1841(0) = '1') else 
        tmp_244_fu_1351_p1;
    tmp_250_fu_1381_p3 <= 
        tmp_247_fu_1361_p2 when (tmp_243_reg_1841(0) = '1') else 
        tmp_244_fu_1351_p1;
    tmp_251_fu_1388_p2 <= (tmp_248_fu_1367_p3 xor ap_const_lv7_3F);
    tmp_252_fu_1394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_250_fu_1381_p3),64));
    tmp_253_fu_1398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_249_fu_1374_p3),64));
    tmp_254_fu_1402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_251_fu_1388_p2),64));
    tmp_255_fu_1406_p2 <= std_logic_vector(shift_left(unsigned(tmp_246_fu_1357_p1),to_integer(unsigned('0' & tmp_252_fu_1394_p1(31-1 downto 0)))));
    
    tmp_256_fu_1412_p4_proc : process(tmp_255_fu_1406_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_256_fu_1412_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_255_fu_1406_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_256_fu_1412_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_256_fu_1412_p4_i) := tmp_255_fu_1406_p2(64-1-tmp_256_fu_1412_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_256_fu_1412_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_257_fu_1422_p3 <= 
        tmp_256_fu_1412_p4 when (tmp_243_reg_1841(0) = '1') else 
        tmp_255_fu_1406_p2;
    tmp_258_fu_1429_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_253_fu_1398_p1(31-1 downto 0)))));
    tmp_259_fu_1435_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_254_fu_1402_p1(31-1 downto 0)))));
    tmp_260_fu_1447_p2 <= (p_demorgan9_fu_1441_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_261_fu_1453_p2 <= (tmp_260_fu_1447_p2 and dec_data_in_V_s_fu_174);
    tmp_262_fu_1459_p2 <= (tmp_257_fu_1422_p3 and p_demorgan9_fu_1441_p2);
    tmp_263_fu_1465_p2 <= (tmp_262_fu_1459_p2 or tmp_261_fu_1453_p2);
    tmp_264_fu_1490_p1 <= i6_reg_248(2 - 1 downto 0);
    tmp_265_fu_1508_p2 <= "1" when (unsigned(tmp_101_fu_1494_p3) > unsigned(tmp_104_fu_1502_p2)) else "0";
    tmp_266_fu_1514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_1494_p3),8));
    tmp_267_fu_1518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_1502_p2),8));
    
    tmp_268_fu_1522_p4_proc : process(dec_data_out_V_reg_1936)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_268_fu_1522_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := dec_data_out_V_reg_1936;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_268_fu_1522_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_268_fu_1522_p4_i) := dec_data_out_V_reg_1936(128-1-tmp_268_fu_1522_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_268_fu_1522_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_269_fu_1531_p2 <= std_logic_vector(unsigned(tmp_266_fu_1514_p1) - unsigned(tmp_267_fu_1518_p1));
    tmp_270_fu_1537_p2 <= (tmp_266_fu_1514_p1 xor ap_const_lv8_7F);
    tmp_271_fu_1543_p2 <= std_logic_vector(unsigned(tmp_267_fu_1518_p1) - unsigned(tmp_266_fu_1514_p1));
    tmp_272_fu_1549_p3 <= 
        tmp_269_fu_1531_p2 when (tmp_265_fu_1508_p2(0) = '1') else 
        tmp_271_fu_1543_p2;
    tmp_273_fu_1557_p3 <= 
        tmp_268_fu_1522_p4 when (tmp_265_fu_1508_p2(0) = '1') else 
        dec_data_out_V_reg_1936;
    tmp_274_fu_1564_p3 <= 
        tmp_270_fu_1537_p2 when (tmp_265_fu_1508_p2(0) = '1') else 
        tmp_266_fu_1514_p1;
    tmp_275_fu_1572_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_272_fu_1549_p3));
    tmp_276_fu_1578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_274_fu_1564_p3),128));
    tmp_277_fu_1612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_275_reg_1957),128));
    tmp_278_fu_1582_p2 <= std_logic_vector(shift_right(unsigned(tmp_273_fu_1557_p3),to_integer(unsigned('0' & tmp_276_fu_1578_p1(31-1 downto 0)))));
    tmp_279_fu_1615_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_277_fu_1612_p1(31-1 downto 0)))));
    tmp_280_fu_1621_p2 <= (tmp_279_fu_1615_p2 and tmp_278_reg_1962);
    tmp_283_fu_1064_p4 <= neg_mul_fu_1059_p2(101 downto 76);
    tmp_285_fu_655_p1 <= i5_reg_236(1 - 1 downto 0);
    tmp_287_fu_1104_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_reg_1902),7));
    tmp_288_fu_1107_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_reg_1909),7));
    
    tmp_289_fu_1110_p4_proc : process(enc_data_out_V_reg_1758)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_289_fu_1110_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := enc_data_out_V_reg_1758;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_289_fu_1110_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_289_fu_1110_p4_i) := enc_data_out_V_reg_1758(64-1-tmp_289_fu_1110_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_289_fu_1110_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_290_fu_1119_p2 <= std_logic_vector(unsigned(tmp_287_fu_1104_p1) - unsigned(tmp_288_fu_1107_p1));
    tmp_291_fu_1125_p2 <= (tmp_287_fu_1104_p1 xor ap_const_lv7_3F);
    tmp_292_fu_1131_p2 <= std_logic_vector(unsigned(tmp_288_fu_1107_p1) - unsigned(tmp_287_fu_1104_p1));
    tmp_293_fu_1137_p3 <= 
        tmp_290_fu_1119_p2 when (tmp_286_reg_1916(0) = '1') else 
        tmp_292_fu_1131_p2;
    tmp_294_fu_1144_p3 <= 
        tmp_289_fu_1110_p4 when (tmp_286_reg_1916(0) = '1') else 
        enc_data_out_V_reg_1758;
    tmp_295_fu_1150_p3 <= 
        tmp_291_fu_1125_p2 when (tmp_286_reg_1916(0) = '1') else 
        tmp_287_fu_1104_p1;
    tmp_296_fu_1157_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_293_fu_1137_p3));
    tmp_297_fu_1163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_295_fu_1150_p3),64));
    tmp_298_fu_1167_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_296_fu_1157_p2),64));
    tmp_299_fu_1171_p2 <= std_logic_vector(shift_right(unsigned(tmp_294_fu_1144_p3),to_integer(unsigned('0' & tmp_297_fu_1163_p1(31-1 downto 0)))));
    tmp_300_fu_1177_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_298_fu_1167_p1(31-1 downto 0)))));
    tmp_301_fu_1183_p2 <= (tmp_300_fu_1177_p2 and tmp_299_fu_1171_p2);
    tmp_304_fu_1209_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_105_reg_1902),7));
    tmp_305_fu_1212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_106_reg_1909),7));
    tmp_306_fu_1215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_s_reg_1923),64));
    tmp_307_fu_1218_p2 <= (tmp_304_fu_1209_p1 xor ap_const_lv7_3F);
    tmp_308_fu_1224_p3 <= 
        tmp_304_fu_1209_p1 when (tmp_303_reg_1928(0) = '1') else 
        tmp_305_fu_1212_p1;
    tmp_309_fu_1231_p3 <= 
        tmp_305_fu_1212_p1 when (tmp_303_reg_1928(0) = '1') else 
        tmp_304_fu_1209_p1;
    tmp_310_fu_1238_p3 <= 
        tmp_307_fu_1218_p2 when (tmp_303_reg_1928(0) = '1') else 
        tmp_304_fu_1209_p1;
    tmp_311_fu_1245_p2 <= (tmp_308_fu_1224_p3 xor ap_const_lv7_3F);
    tmp_312_fu_1251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_310_fu_1238_p3),64));
    tmp_313_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_309_fu_1231_p3),64));
    tmp_314_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_311_fu_1245_p2),64));
    tmp_315_fu_1263_p2 <= std_logic_vector(shift_left(unsigned(tmp_306_fu_1215_p1),to_integer(unsigned('0' & tmp_312_fu_1251_p1(31-1 downto 0)))));
    
    tmp_316_fu_1269_p4_proc : process(tmp_315_fu_1263_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_316_fu_1269_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_315_fu_1263_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_316_fu_1269_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_316_fu_1269_p4_i) := tmp_315_fu_1263_p2(64-1-tmp_316_fu_1269_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_316_fu_1269_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_317_fu_1279_p3 <= 
        tmp_316_fu_1269_p4 when (tmp_303_reg_1928(0) = '1') else 
        tmp_315_fu_1263_p2;
    tmp_318_fu_1286_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_313_fu_1255_p1(31-1 downto 0)))));
    tmp_319_fu_1292_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_314_fu_1259_p1(31-1 downto 0)))));
    tmp_320_fu_1304_p2 <= (p_demorgan8_fu_1298_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_321_fu_1310_p2 <= (tmp_320_fu_1304_p2 and dec_data_in_V_s_fu_174);
    tmp_322_fu_1316_p2 <= (tmp_317_fu_1279_p3 and p_demorgan8_fu_1298_p2);
    tmp_323_fu_1322_p2 <= (tmp_322_fu_1316_p2 or tmp_321_fu_1310_p2);
    tmp_324_fu_553_p1 <= i5_reg_236(1 - 1 downto 0);
    tmp_326_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_fu_557_p3),7));
    tmp_327_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_fu_566_p2),7));
    
    tmp_328_fu_581_p4_proc : process(enc_data_out_V_reg_1758)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_328_fu_581_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := enc_data_out_V_reg_1758;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_328_fu_581_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_328_fu_581_p4_i) := enc_data_out_V_reg_1758(64-1-tmp_328_fu_581_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_328_fu_581_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_329_fu_590_p2 <= std_logic_vector(unsigned(tmp_326_fu_573_p1) - unsigned(tmp_327_fu_577_p1));
    tmp_330_fu_596_p2 <= (tmp_326_fu_573_p1 xor ap_const_lv7_3F);
    tmp_331_fu_602_p2 <= std_logic_vector(unsigned(tmp_327_fu_577_p1) - unsigned(tmp_326_fu_573_p1));
    tmp_332_fu_608_p3 <= 
        tmp_329_fu_590_p2 when (grp_fu_287_p2(0) = '1') else 
        tmp_331_fu_602_p2;
    tmp_333_fu_616_p3 <= 
        tmp_328_fu_581_p4 when (grp_fu_287_p2(0) = '1') else 
        enc_data_out_V_reg_1758;
    tmp_334_fu_623_p3 <= 
        tmp_330_fu_596_p2 when (grp_fu_287_p2(0) = '1') else 
        tmp_326_fu_573_p1;
    tmp_335_fu_631_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_332_fu_608_p3));
    tmp_336_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_334_fu_623_p3),64));
    tmp_337_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_335_reg_1800),64));
    tmp_338_fu_641_p2 <= std_logic_vector(shift_right(unsigned(tmp_333_fu_616_p3),to_integer(unsigned('0' & tmp_336_fu_637_p1(31-1 downto 0)))));
    tmp_339_fu_766_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_337_fu_763_p1(31-1 downto 0)))));
    tmp_340_fu_772_p2 <= (tmp_339_fu_766_p2 and tmp_338_reg_1805);
    tmp_342_fu_395_p2 <= "1" when (unsigned(tmp_109_fu_382_p3) > unsigned(tmp_110_fu_389_p2)) else "0";
    tmp_343_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_109_fu_382_p3),8));
    tmp_344_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_110_fu_389_p2),8));
    tmp_345_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(axis_enc_data_in_V_data_V_0_data_out),128));
    tmp_346_fu_413_p2 <= (tmp_343_fu_401_p1 xor ap_const_lv8_7F);
    tmp_347_fu_419_p3 <= 
        tmp_343_fu_401_p1 when (tmp_342_fu_395_p2(0) = '1') else 
        tmp_344_fu_405_p1;
    tmp_348_fu_427_p3 <= 
        tmp_344_fu_405_p1 when (tmp_342_fu_395_p2(0) = '1') else 
        tmp_343_fu_401_p1;
    tmp_349_fu_435_p3 <= 
        tmp_346_fu_413_p2 when (tmp_342_fu_395_p2(0) = '1') else 
        tmp_343_fu_401_p1;
    tmp_350_fu_443_p2 <= (tmp_347_fu_419_p3 xor ap_const_lv8_7F);
    tmp_351_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_349_fu_435_p3),128));
    tmp_352_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_348_fu_427_p3),128));
    tmp_353_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_350_fu_443_p2),128));
    tmp_354_fu_461_p2 <= std_logic_vector(shift_left(unsigned(tmp_345_fu_409_p1),to_integer(unsigned('0' & tmp_351_fu_449_p1(31-1 downto 0)))));
    
    tmp_355_fu_467_p4_proc : process(tmp_354_fu_461_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_355_fu_467_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_354_fu_461_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_355_fu_467_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_355_fu_467_p4_i) := tmp_354_fu_461_p2(128-1-tmp_355_fu_467_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_355_fu_467_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_356_fu_477_p3 <= 
        tmp_355_fu_467_p4 when (tmp_342_fu_395_p2(0) = '1') else 
        tmp_354_fu_461_p2;
    tmp_357_fu_485_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_352_fu_453_p1(31-1 downto 0)))));
    tmp_358_fu_491_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_353_fu_457_p1(31-1 downto 0)))));
    tmp_359_fu_503_p2 <= (p_demorgan_fu_497_p2 xor ap_const_lv128_lc_3);
    tmp_360_fu_509_p2 <= (tmp_359_fu_503_p2 and enc_data_in_V_s_reg_213);
    tmp_361_fu_515_p2 <= (tmp_356_fu_477_p3 and p_demorgan_fu_497_p2);
    tmp_364_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_reg_1786),7));
    tmp_365_fu_912_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_reg_1793),7));
    tmp_366_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_2_reg_1868),64));
    tmp_367_fu_918_p2 <= (tmp_364_fu_909_p1 xor ap_const_lv7_3F);
    tmp_368_fu_924_p3 <= 
        tmp_364_fu_909_p1 when (tmp_363_reg_1873(0) = '1') else 
        tmp_365_fu_912_p1;
    tmp_369_fu_931_p3 <= 
        tmp_365_fu_912_p1 when (tmp_363_reg_1873(0) = '1') else 
        tmp_364_fu_909_p1;
    tmp_370_fu_938_p3 <= 
        tmp_367_fu_918_p2 when (tmp_363_reg_1873(0) = '1') else 
        tmp_364_fu_909_p1;
    tmp_371_fu_945_p2 <= (tmp_368_fu_924_p3 xor ap_const_lv7_3F);
    tmp_372_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_370_fu_938_p3),64));
    tmp_373_fu_955_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_369_fu_931_p3),64));
    tmp_374_fu_959_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_371_fu_945_p2),64));
    tmp_375_fu_963_p2 <= std_logic_vector(shift_left(unsigned(tmp_366_fu_915_p1),to_integer(unsigned('0' & tmp_372_fu_951_p1(31-1 downto 0)))));
    
    tmp_376_fu_969_p4_proc : process(tmp_375_fu_963_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_376_fu_969_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_375_fu_963_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_376_fu_969_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_376_fu_969_p4_i) := tmp_375_fu_963_p2(64-1-tmp_376_fu_969_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_376_fu_969_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_377_fu_979_p3 <= 
        tmp_376_fu_969_p4 when (tmp_363_reg_1873(0) = '1') else 
        tmp_375_fu_963_p2;
    tmp_378_fu_986_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_373_fu_955_p1(31-1 downto 0)))));
    tmp_379_fu_992_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_374_fu_959_p1(31-1 downto 0)))));
    tmp_380_fu_1004_p2 <= (p_demorgan7_fu_998_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_381_fu_1010_p2 <= (tmp_380_fu_1004_p2 and dec_data_in_V_load_2_reg_1854);
    tmp_382_fu_1015_p2 <= (tmp_377_fu_979_p3 and p_demorgan7_fu_998_p2);
    tmp_383_fu_1021_p2 <= (tmp_382_fu_1015_p2 or tmp_381_fu_1010_p2);
    tmp_385_fu_786_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_107_reg_1786),7));
    tmp_386_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_108_reg_1793),7));
    tmp_387_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_8_reg_1849),64));
    tmp_388_fu_795_p2 <= (tmp_385_fu_786_p1 xor ap_const_lv7_3F);
    tmp_389_fu_801_p3 <= 
        tmp_385_fu_786_p1 when (tmp_384_reg_1860(0) = '1') else 
        tmp_386_fu_789_p1;
    tmp_390_fu_808_p3 <= 
        tmp_386_fu_789_p1 when (tmp_384_reg_1860(0) = '1') else 
        tmp_385_fu_786_p1;
    tmp_391_fu_815_p3 <= 
        tmp_388_fu_795_p2 when (tmp_384_reg_1860(0) = '1') else 
        tmp_385_fu_786_p1;
    tmp_392_fu_822_p2 <= (tmp_389_fu_801_p3 xor ap_const_lv7_3F);
    tmp_393_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_391_fu_815_p3),64));
    tmp_394_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_390_fu_808_p3),64));
    tmp_395_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_392_fu_822_p2),64));
    tmp_396_fu_840_p2 <= std_logic_vector(shift_left(unsigned(tmp_387_fu_792_p1),to_integer(unsigned('0' & tmp_393_fu_828_p1(31-1 downto 0)))));
    
    tmp_397_fu_846_p4_proc : process(tmp_396_fu_840_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_397_fu_846_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_396_fu_840_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_397_fu_846_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_397_fu_846_p4_i) := tmp_396_fu_840_p2(64-1-tmp_397_fu_846_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_397_fu_846_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_398_fu_856_p3 <= 
        tmp_397_fu_846_p4 when (tmp_384_reg_1860(0) = '1') else 
        tmp_396_fu_840_p2;
    tmp_399_fu_863_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_394_fu_832_p1(31-1 downto 0)))));
    tmp_400_fu_869_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_395_fu_836_p1(31-1 downto 0)))));
    tmp_401_fu_881_p2 <= (p_demorgan6_fu_875_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_402_fu_887_p2 <= (tmp_401_fu_881_p2 and dec_data_in_V_load_2_reg_1854);
    tmp_403_fu_892_p2 <= (tmp_398_fu_856_p3 and p_demorgan6_fu_875_p2);
    tmp_404_fu_898_p2 <= (tmp_403_fu_892_p2 or tmp_402_fu_887_p2);
    tmp_85_fu_325_p2 <= "1" when (AWGN_EN_REG_read_reg_1707 = ap_const_lv32_2) else "0";
    tmp_96_fu_1032_p3 <= (tmp_98_reg_1776 & ap_const_lv24_0);
    tmp_98_fu_539_p4 <= grp_operator_s_fu_274_ap_return(31 downto 6);
    tmp_99_fu_663_p3 <= (tmp_225_fu_659_p1 & ap_const_lv5_0);
    tmp_fu_315_p2 <= "1" when (AWGN_EN_REG_read_reg_1707 = ap_const_lv32_0) else "0";
    tmp_s_fu_320_p2 <= "1" when (AWGN_EN_REG_read_reg_1707 = ap_const_lv32_1) else "0";
        trunc_fu_1095_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_v_v_reg_1896),32));

end behav;
