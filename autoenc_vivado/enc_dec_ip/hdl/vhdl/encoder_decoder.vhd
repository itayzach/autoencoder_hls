-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder_decoder is
generic (
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis_enc_data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_in_TVALID : IN STD_LOGIC;
    axis_enc_data_in_TREADY : OUT STD_LOGIC;
    axis_enc_data_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axis_enc_data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_dec_data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_out_TVALID : OUT STD_LOGIC;
    axis_dec_data_out_TREADY : IN STD_LOGIC;
    axis_dec_data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axis_dec_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of encoder_decoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_decoder,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=183,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=160,HLS_SYN_FF=20516,HLS_SYN_LUT=30852,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (114 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (114 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (114 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (114 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (114 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (114 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (114 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (114 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (114 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (114 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (114 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_3 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (114 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal SNR_REG_V : STD_LOGIC_VECTOR (7 downto 0);
    signal AWGN_EN_REG : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axis_dec_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal tmp_245_reg_1274 : STD_LOGIC_VECTOR (0 downto 0);
    signal AWGN_EN_REG_read_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal SNR_REG_V_read_reg_1161 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_2_fu_391_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_1185 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_223_fu_397_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_223_reg_1190 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond2_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1195 : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_in_V_fu_597_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_encoder_fu_356_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal dec_data_in_V_4_reg_1204 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal i_4_fu_609_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_4_reg_1226 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal grp_operator_s_fu_372_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal noiseSample_V_reg_1231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal grp_operator_s_fu_372_ap_idle : STD_LOGIC;
    signal grp_operator_s_fu_372_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_372_ap_done : STD_LOGIC;
    signal tmp_257_fu_697_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_257_reg_1242 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_1_nbwritereq_fu_224_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_nbwritereq_fu_231_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_260_fu_707_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_260_reg_1247 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_282_fu_742_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_282_reg_1258 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal noise_sample_stream_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal noise_sample_stream_s_empty_n : STD_LOGIC;
    signal noise_sample_stream_s_read : STD_LOGIC;
    signal tmp_3_nbreadreq_fu_250_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_nbreadreq_fu_257_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op338_read_state99 : BOOLEAN;
    signal enc_data_out_stream_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal enc_data_out_stream_s_empty_n : STD_LOGIC;
    signal enc_data_out_stream_s_read : STD_LOGIC;
    signal ap_block_state99 : BOOLEAN;
    signal dec_data_in_V_3_fu_919_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal grp_decoder_fu_362_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal dec_data_out_V_reg_1268 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal tmp_245_fu_925_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal i_3_fu_933_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1278 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_264_fu_939_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_264_reg_1283 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_275_fu_1021_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_275_reg_1289 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_278_fu_1031_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_278_reg_1294 : STD_LOGIC_VECTOR (127 downto 0);
    signal axis_dec_data_out_it_fu_1075_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_it_1_fu_1080_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_it_2_fu_1094_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_it_2_reg_1309 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder_fu_356_ap_start : STD_LOGIC;
    signal grp_encoder_fu_356_ap_done : STD_LOGIC;
    signal grp_encoder_fu_356_ap_idle : STD_LOGIC;
    signal grp_encoder_fu_356_ap_ready : STD_LOGIC;
    signal grp_decoder_fu_362_ap_start : STD_LOGIC;
    signal grp_decoder_fu_362_ap_done : STD_LOGIC;
    signal grp_decoder_fu_362_ap_idle : STD_LOGIC;
    signal grp_decoder_fu_362_ap_ready : STD_LOGIC;
    signal grp_operator_s_fu_372_ap_start : STD_LOGIC;
    signal enc_data_in_V_s_reg_287 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_299 : STD_LOGIC_VECTOR (2 downto 0);
    signal dec_data_in_V_reg_310 : STD_LOGIC_VECTOR (63 downto 0);
    signal i5_reg_322 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal dec_data_in_V_1_reg_334 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i6_reg_345 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state115 : BOOLEAN;
    signal ap_block_state115_io : BOOLEAN;
    signal grp_encoder_fu_356_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (114 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_decoder_fu_362_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state101 : STD_LOGIC;
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal grp_operator_s_fu_372_ap_start_reg : STD_LOGIC := '0';
    signal noise_sample_stream_s_full_n : STD_LOGIC;
    signal noise_sample_stream_s_write : STD_LOGIC;
    signal enc_data_out_stream_s_din : STD_LOGIC_VECTOR (31 downto 0);
    signal enc_data_out_stream_s_full_n : STD_LOGIC;
    signal enc_data_out_stream_s_write : STD_LOGIC;
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_block_state98 : BOOLEAN;
    signal tmp_keep_V_fu_154 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_fu_158 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_2_fu_162 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_3_fu_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_fu_170 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_174 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_fu_178 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_fu_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_194 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_7_fu_198 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_458_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_98_fu_465_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_225_fu_477_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_224_fu_471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_226_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_228_fu_489_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_229_fu_495_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_231_fu_511_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_230_fu_503_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_232_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_227_fu_485_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_233_fu_525_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_236_fu_537_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_237_fu_543_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_234_fu_529_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_235_fu_533_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_239_fu_561_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_240_fu_567_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_573_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_241_fu_579_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_238_fu_553_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_242_fu_585_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_243_fu_591_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_246_fu_615_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_99_fu_619_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_100_fu_627_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_248_fu_639_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_249_fu_643_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_247_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_251_fu_656_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_253_fu_668_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_250_fu_647_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_252_fu_662_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_254_fu_674_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_256_fu_689_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_255_fu_682_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_258_fu_703_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_259_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_261_fu_716_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_262_fu_722_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_86_fu_752_p3 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_87_cast_fu_760_p1 : STD_LOGIC_VECTOR (37 downto 0);
    signal p_Val2_8_fu_764_p2 : STD_LOGIC_VECTOR (37 downto 0);
    signal tmp_103_fu_780_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_104_fu_787_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_89_fu_770_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_284_fu_799_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_283_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_285_fu_803_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_287_fu_811_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_288_fu_817_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_290_fu_833_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_289_fu_825_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_291_fu_841_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_286_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_292_fu_847_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_295_fu_859_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_296_fu_865_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_293_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_294_fu_855_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_298_fu_883_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_299_fu_889_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan4_fu_895_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_300_fu_901_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_297_fu_875_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_301_fu_907_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_302_fu_913_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_101_fu_943_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_102_fu_951_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_266_fu_963_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_267_fu_967_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_265_fu_957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_269_fu_980_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_271_fu_992_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_268_fu_971_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_270_fu_986_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_272_fu_998_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_274_fu_1013_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_273_fu_1006_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_276_fu_1027_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_277_fu_1061_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_279_fu_1064_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_280_fu_1070_p2 : STD_LOGIC_VECTOR (127 downto 0);

    component encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component operator_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        snr_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component encoder_decoder_mibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component encoder_decoder_mjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component encoder_decoder_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        SNR_REG_V : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWGN_EN_REG : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    encoder_decoder_ctrl_s_axi_U : component encoder_decoder_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        SNR_REG_V => SNR_REG_V,
        AWGN_EN_REG => AWGN_EN_REG);

    grp_encoder_fu_356 : component encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoder_fu_356_ap_start,
        ap_done => grp_encoder_fu_356_ap_done,
        ap_idle => grp_encoder_fu_356_ap_idle,
        ap_ready => grp_encoder_fu_356_ap_ready,
        data_V_read => enc_data_in_V_s_reg_287,
        ap_return => grp_encoder_fu_356_ap_return);

    grp_decoder_fu_362 : component decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decoder_fu_362_ap_start,
        ap_done => grp_decoder_fu_362_ap_done,
        ap_idle => grp_decoder_fu_362_ap_idle,
        ap_ready => grp_decoder_fu_362_ap_ready,
        data_V_read => dec_data_in_V_1_reg_334,
        ap_return => grp_decoder_fu_362_ap_return);

    grp_operator_s_fu_372 : component operator_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_operator_s_fu_372_ap_start,
        ap_done => grp_operator_s_fu_372_ap_done,
        ap_idle => grp_operator_s_fu_372_ap_idle,
        ap_ready => grp_operator_s_fu_372_ap_ready,
        snr_V_read => SNR_REG_V_read_reg_1161,
        ap_return => grp_operator_s_fu_372_ap_return);

    encoder_decoder_mibs_U42 : component encoder_decoder_mibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => tmp_keep_V_fu_154,
        din1 => tmp_keep_V_1_fu_158,
        din2 => tmp_keep_V_2_fu_162,
        din3 => tmp_keep_V_3_fu_166,
        din4 => tmp_264_reg_1283,
        dout => axis_dec_data_out_it_1_fu_1080_p6);

    encoder_decoder_mjbC_U43 : component encoder_decoder_mjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_last_V_fu_170,
        din1 => tmp_last_V_1_fu_174,
        din2 => tmp_last_V_2_fu_178,
        din3 => tmp_last_V_3_fu_182,
        din4 => tmp_264_reg_1283,
        dout => axis_dec_data_out_it_2_fu_1094_p6);

    noise_sample_stream_s_fifo_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => noiseSample_V_reg_1231,
        if_full_n => noise_sample_stream_s_full_n,
        if_write => noise_sample_stream_s_write,
        if_dout => noise_sample_stream_s_dout,
        if_empty_n => noise_sample_stream_s_empty_n,
        if_read => noise_sample_stream_s_read);

    enc_data_out_stream_s_fifo_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => enc_data_out_stream_s_din,
        if_full_n => enc_data_out_stream_s_full_n,
        if_write => enc_data_out_stream_s_write,
        if_dout => enc_data_out_stream_s_dout,
        if_empty_n => enc_data_out_stream_s_empty_n,
        if_read => enc_data_out_stream_s_read);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_rd <= not(axis_dec_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_wr <= not(axis_dec_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_rd <= not(axis_dec_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_wr <= not(axis_dec_data_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_rd <= not(axis_dec_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_wr <= not(axis_dec_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_rd <= not(axis_enc_data_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_wr <= not(axis_enc_data_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_rd <= not(axis_enc_data_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_wr <= not(axis_enc_data_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_rd <= not(axis_enc_data_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_wr <= not(axis_enc_data_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_decoder_fu_362_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decoder_fu_362_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state101) and ((ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state96)))) then 
                    grp_decoder_fu_362_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoder_fu_362_ap_ready = ap_const_logic_1)) then 
                    grp_decoder_fu_362_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encoder_fu_356_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoder_fu_356_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_encoder_fu_356_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoder_fu_356_ap_ready = ap_const_logic_1)) then 
                    grp_encoder_fu_356_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_operator_s_fu_372_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_operator_s_fu_372_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state96) and (exitcond_fu_603_p2 = ap_const_lv1_0))) then 
                    grp_operator_s_fu_372_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_operator_s_fu_372_ap_ready = ap_const_logic_1)) then 
                    grp_operator_s_fu_372_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dec_data_in_V_1_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state96) and (exitcond_fu_603_p2 = ap_const_lv1_1))) then 
                dec_data_in_V_1_reg_334 <= dec_data_in_V_reg_310;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state95) and (tmp_reg_1195 = ap_const_lv1_0))) then 
                dec_data_in_V_1_reg_334 <= dec_data_in_V_4_reg_1204;
            end if; 
        end if;
    end process;

    i5_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state95) and (tmp_reg_1195 = ap_const_lv1_1))) then 
                i5_reg_322 <= ap_const_lv2_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
                i5_reg_322 <= i_4_reg_1226;
            end if; 
        end if;
    end process;

    i6_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state115_io))) and (ap_const_logic_1 = ap_CS_fsm_state115) and (axis_dec_data_out_it_2_reg_1309 = ap_const_lv1_0) and (tmp_245_reg_1274 = ap_const_lv1_0))) then 
                i6_reg_345 <= i_3_reg_1278;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
                i6_reg_345 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_299 <= i_2_reg_1185;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_299 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                AWGN_EN_REG_read_reg_1156 <= AWGN_EN_REG;
                SNR_REG_V_read_reg_1161 <= SNR_REG_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_1075_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_1075_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_A <= axis_dec_data_out_it_1_fu_1080_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_B <= axis_dec_data_out_it_1_fu_1080_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_A <= axis_dec_data_out_it_2_fu_1094_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_B <= axis_dec_data_out_it_2_fu_1094_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                axis_dec_data_out_it_2_reg_1309 <= axis_dec_data_out_it_2_fu_1094_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_A <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_B <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                dec_data_in_V_4_reg_1204 <= grp_encoder_fu_356_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state100)) then
                dec_data_in_V_reg_310 <= dec_data_in_V_3_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state112)) then
                dec_data_out_V_reg_1268 <= grp_decoder_fu_362_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                enc_data_in_V_s_reg_287 <= enc_data_in_V_fu_597_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_2_reg_1185 <= i_2_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then
                i_3_reg_1278 <= i_3_fu_933_p2;
                tmp_245_reg_1274 <= i6_reg_345(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state96)) then
                i_4_reg_1226 <= i_4_fu_609_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                noiseSample_V_reg_1231 <= grp_operator_s_fu_372_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((enc_data_out_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)) or ((noise_sample_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state99) and (ap_predicate_op338_read_state99 = ap_const_boolean_1))) then
                p_Val2_7_fu_198 <= enc_data_out_stream_s_dout;
                p_Val2_s_fu_194 <= noise_sample_stream_s_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_385_p2 = ap_const_lv1_0))) then
                tmp_223_reg_1190 <= tmp_223_fu_397_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_operator_s_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_2_nbwritereq_fu_231_p3 = ap_const_lv1_1) and (tmp_1_nbwritereq_fu_224_p3 = ap_const_lv1_1))) then
                    tmp_257_reg_1242(6 downto 1) <= tmp_257_fu_697_p2(6 downto 1);
                tmp_260_reg_1247 <= tmp_260_fu_707_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state113) and (tmp_245_fu_925_p3 = ap_const_lv1_0))) then
                tmp_264_reg_1283 <= tmp_264_fu_939_p1;
                    tmp_275_reg_1289(7 downto 1) <= tmp_275_fu_1021_p2(7 downto 1);
                tmp_278_reg_1294 <= tmp_278_fu_1031_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((((enc_data_out_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)) or ((noise_sample_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                tmp_282_reg_1258 <= tmp_282_fu_742_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1190 = ap_const_lv2_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_1_fu_158 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_1_fu_174 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1190 = ap_const_lv2_2) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_2_fu_162 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_2_fu_178 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1190 = ap_const_lv2_3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_3_fu_166 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_3_fu_182 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_223_reg_1190 = ap_const_lv2_0) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_fu_154 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_fu_170 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_385_p2 = ap_const_lv1_1))) then
                tmp_reg_1195 <= tmp_fu_401_p2;
            end if;
        end if;
    end process;
    tmp_257_reg_1242(0) <= '0';
    tmp_275_reg_1289(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, axis_enc_data_in_V_data_V_0_vld_out, axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state3, ap_CS_fsm_state114, ap_CS_fsm_state115, tmp_245_reg_1274, ap_CS_fsm_state2, exitcond2_fu_385_p2, tmp_reg_1195, ap_CS_fsm_state96, ap_CS_fsm_state97, grp_operator_s_fu_372_ap_done, tmp_1_nbwritereq_fu_224_p3, tmp_2_nbwritereq_fu_231_p3, ap_CS_fsm_state99, noise_sample_stream_s_empty_n, ap_predicate_op338_read_state99, enc_data_out_stream_s_empty_n, tmp_245_fu_925_p3, ap_CS_fsm_state113, axis_dec_data_out_it_2_reg_1309, ap_CS_fsm_state95, exitcond_fu_603_p2, ap_block_state115_io, noise_sample_stream_s_full_n, enc_data_out_stream_s_full_n, ap_CS_fsm_state98)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_385_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state95) and (tmp_reg_1195 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state101;
                end if;
            when ap_ST_fsm_state96 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state96) and (exitcond_fu_603_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state101;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state97 => 
                if (((grp_operator_s_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97) and (tmp_2_nbwritereq_fu_231_p3 = ap_const_lv1_1) and (tmp_1_nbwritereq_fu_224_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state98;
                elsif (((grp_operator_s_fu_372_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state97) and ((tmp_2_nbwritereq_fu_231_p3 = ap_const_lv1_0) or (tmp_1_nbwritereq_fu_224_p3 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state97;
                end if;
            when ap_ST_fsm_state98 => 
                if ((not(((enc_data_out_stream_s_full_n = ap_const_logic_0) or (noise_sample_stream_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state99 => 
                if ((not((((enc_data_out_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)) or ((noise_sample_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state100;
                else
                    ap_NS_fsm <= ap_ST_fsm_state99;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state113) and (tmp_245_fu_925_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state114 => 
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then
                    ap_NS_fsm <= ap_ST_fsm_state115;
                else
                    ap_NS_fsm <= ap_ST_fsm_state114;
                end if;
            when ap_ST_fsm_state115 => 
                if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state115_io))) and (ap_const_logic_1 = ap_CS_fsm_state115) and ((axis_dec_data_out_it_2_reg_1309 = ap_const_lv1_1) or (tmp_245_reg_1274 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state115_io))) and (ap_const_logic_1 = ap_CS_fsm_state115) and (axis_dec_data_out_it_2_reg_1309 = ap_const_lv1_0) and (tmp_245_reg_1274 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_state115;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
    ap_NS_fsm_state101 <= ap_NS_fsm(100);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);

    ap_block_state115_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state115 <= ((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state115_io_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, tmp_245_reg_1274)
    begin
                ap_block_state115_io <= ((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_245_reg_1274 = ap_const_lv1_0));
    end process;


    ap_block_state98_assign_proc : process(noise_sample_stream_s_full_n, enc_data_out_stream_s_full_n)
    begin
                ap_block_state98 <= ((enc_data_out_stream_s_full_n = ap_const_logic_0) or (noise_sample_stream_s_full_n = ap_const_logic_0));
    end process;


    ap_block_state99_assign_proc : process(noise_sample_stream_s_empty_n, ap_predicate_op338_read_state99, enc_data_out_stream_s_empty_n)
    begin
                ap_block_state99 <= (((enc_data_out_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)) or ((noise_sample_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)));
    end process;


    ap_done_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state115, tmp_245_reg_1274, axis_dec_data_out_it_2_reg_1309, ap_block_state115_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state115_io))) and (ap_const_logic_1 = ap_CS_fsm_state115) and ((axis_dec_data_out_it_2_reg_1309 = ap_const_lv1_1) or (tmp_245_reg_1274 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op338_read_state99_assign_proc : process(tmp_3_nbreadreq_fu_250_p3, tmp_4_nbreadreq_fu_257_p3)
    begin
                ap_predicate_op338_read_state99 <= ((tmp_4_nbreadreq_fu_257_p3 = ap_const_lv1_1) and (tmp_3_nbreadreq_fu_250_p3 = ap_const_lv1_1));
    end process;


    ap_ready_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm_state115, tmp_245_reg_1274, axis_dec_data_out_it_2_reg_1309, ap_block_state115_io)
    begin
        if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state115_io))) and (ap_const_logic_1 = ap_CS_fsm_state115) and ((axis_dec_data_out_it_2_reg_1309 = ap_const_lv1_1) or (tmp_245_reg_1274 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axis_dec_data_out_TDATA <= axis_dec_data_out_V_data_V_1_data_out;

    axis_dec_data_out_TDATA_blk_n_assign_proc : process(axis_dec_data_out_V_data_V_1_state, ap_CS_fsm_state114, ap_CS_fsm_state115, tmp_245_reg_1274)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state114) or ((ap_const_logic_1 = ap_CS_fsm_state115) and (tmp_245_reg_1274 = ap_const_lv1_0)))) then 
            axis_dec_data_out_TDATA_blk_n <= axis_dec_data_out_V_data_V_1_state(1);
        else 
            axis_dec_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_dec_data_out_TKEEP <= axis_dec_data_out_V_keep_V_1_data_out;
    axis_dec_data_out_TLAST <= axis_dec_data_out_V_last_V_1_data_out;
    axis_dec_data_out_TVALID <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_V_data_V_1_ack_in <= axis_dec_data_out_V_data_V_1_state(1);
    axis_dec_data_out_V_data_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_data_V_1_data_out_assign_proc : process(axis_dec_data_out_V_data_V_1_payload_A, axis_dec_data_out_V_data_V_1_payload_B, axis_dec_data_out_V_data_V_1_sel)
    begin
        if ((axis_dec_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_B;
        else 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_load_A <= (not(axis_dec_data_out_V_data_V_1_sel_wr) and axis_dec_data_out_V_data_V_1_state_cmp_full);
    axis_dec_data_out_V_data_V_1_load_B <= (axis_dec_data_out_V_data_V_1_state_cmp_full and axis_dec_data_out_V_data_V_1_sel_wr);
    axis_dec_data_out_V_data_V_1_sel <= axis_dec_data_out_V_data_V_1_sel_rd;
    axis_dec_data_out_V_data_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_data_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state114)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_vld_out <= axis_dec_data_out_V_data_V_1_state(0);
    axis_dec_data_out_V_keep_V_1_ack_in <= axis_dec_data_out_V_keep_V_1_state(1);
    axis_dec_data_out_V_keep_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_keep_V_1_data_out_assign_proc : process(axis_dec_data_out_V_keep_V_1_payload_A, axis_dec_data_out_V_keep_V_1_payload_B, axis_dec_data_out_V_keep_V_1_sel)
    begin
        if ((axis_dec_data_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_B;
        else 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_load_A <= (not(axis_dec_data_out_V_keep_V_1_sel_wr) and axis_dec_data_out_V_keep_V_1_state_cmp_full);
    axis_dec_data_out_V_keep_V_1_load_B <= (axis_dec_data_out_V_keep_V_1_state_cmp_full and axis_dec_data_out_V_keep_V_1_sel_wr);
    axis_dec_data_out_V_keep_V_1_sel <= axis_dec_data_out_V_keep_V_1_sel_rd;
    axis_dec_data_out_V_keep_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_keep_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state114)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_vld_out <= axis_dec_data_out_V_keep_V_1_state(0);
    axis_dec_data_out_V_last_V_1_ack_in <= axis_dec_data_out_V_last_V_1_state(1);
    axis_dec_data_out_V_last_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_last_V_1_data_out_assign_proc : process(axis_dec_data_out_V_last_V_1_payload_A, axis_dec_data_out_V_last_V_1_payload_B, axis_dec_data_out_V_last_V_1_sel)
    begin
        if ((axis_dec_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_B;
        else 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_load_A <= (not(axis_dec_data_out_V_last_V_1_sel_wr) and axis_dec_data_out_V_last_V_1_state_cmp_full);
    axis_dec_data_out_V_last_V_1_load_B <= (axis_dec_data_out_V_last_V_1_state_cmp_full and axis_dec_data_out_V_last_V_1_sel_wr);
    axis_dec_data_out_V_last_V_1_sel <= axis_dec_data_out_V_last_V_1_sel_rd;
    axis_dec_data_out_V_last_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_last_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state114)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state114))) then 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_vld_out <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_it_fu_1075_p1 <= tmp_280_fu_1070_p2(32 - 1 downto 0);

    axis_enc_data_in_TDATA_blk_n_assign_proc : process(axis_enc_data_in_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis_enc_data_in_TDATA_blk_n <= axis_enc_data_in_V_data_V_0_state(0);
        else 
            axis_enc_data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_enc_data_in_TREADY <= axis_enc_data_in_V_last_V_0_state(1);
    axis_enc_data_in_V_data_V_0_ack_in <= axis_enc_data_in_V_data_V_0_state(1);

    axis_enc_data_in_V_data_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_data_V_0_data_out_assign_proc : process(axis_enc_data_in_V_data_V_0_payload_A, axis_enc_data_in_V_data_V_0_payload_B, axis_enc_data_in_V_data_V_0_sel)
    begin
        if ((axis_enc_data_in_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_B;
        else 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_data_V_0_load_A <= (not(axis_enc_data_in_V_data_V_0_sel_wr) and axis_enc_data_in_V_data_V_0_state_cmp_full);
    axis_enc_data_in_V_data_V_0_load_B <= (axis_enc_data_in_V_data_V_0_state_cmp_full and axis_enc_data_in_V_data_V_0_sel_wr);
    axis_enc_data_in_V_data_V_0_sel <= axis_enc_data_in_V_data_V_0_sel_rd;
    axis_enc_data_in_V_data_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_data_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_data_V_0_vld_out <= axis_enc_data_in_V_data_V_0_state(0);
    axis_enc_data_in_V_keep_V_0_ack_in <= axis_enc_data_in_V_keep_V_0_state(1);

    axis_enc_data_in_V_keep_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_keep_V_0_data_out_assign_proc : process(axis_enc_data_in_V_keep_V_0_payload_A, axis_enc_data_in_V_keep_V_0_payload_B, axis_enc_data_in_V_keep_V_0_sel)
    begin
        if ((axis_enc_data_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_B;
        else 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_keep_V_0_load_A <= (not(axis_enc_data_in_V_keep_V_0_sel_wr) and axis_enc_data_in_V_keep_V_0_state_cmp_full);
    axis_enc_data_in_V_keep_V_0_load_B <= (axis_enc_data_in_V_keep_V_0_state_cmp_full and axis_enc_data_in_V_keep_V_0_sel_wr);
    axis_enc_data_in_V_keep_V_0_sel <= axis_enc_data_in_V_keep_V_0_sel_rd;
    axis_enc_data_in_V_keep_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_keep_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_keep_V_0_vld_out <= axis_enc_data_in_V_keep_V_0_state(0);
    axis_enc_data_in_V_last_V_0_ack_in <= axis_enc_data_in_V_last_V_0_state(1);

    axis_enc_data_in_V_last_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_last_V_0_data_out_assign_proc : process(axis_enc_data_in_V_last_V_0_payload_A, axis_enc_data_in_V_last_V_0_payload_B, axis_enc_data_in_V_last_V_0_sel)
    begin
        if ((axis_enc_data_in_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_B;
        else 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_last_V_0_load_A <= (not(axis_enc_data_in_V_last_V_0_sel_wr) and axis_enc_data_in_V_last_V_0_state_cmp_full);
    axis_enc_data_in_V_last_V_0_load_B <= (axis_enc_data_in_V_last_V_0_state_cmp_full and axis_enc_data_in_V_last_V_0_sel_wr);
    axis_enc_data_in_V_last_V_0_sel <= axis_enc_data_in_V_last_V_0_sel_rd;
    axis_enc_data_in_V_last_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_last_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_last_V_0_vld_out <= axis_enc_data_in_V_last_V_0_state(0);
    dec_data_in_V_3_fu_919_p2 <= (tmp_302_fu_913_p2 or tmp_301_fu_907_p2);
    enc_data_in_V_fu_597_p2 <= (tmp_243_fu_591_p2 or tmp_242_fu_585_p2);
    enc_data_out_stream_s_din <= tmp_262_fu_722_p2(32 - 1 downto 0);

    enc_data_out_stream_s_read_assign_proc : process(ap_CS_fsm_state99, noise_sample_stream_s_empty_n, ap_predicate_op338_read_state99, enc_data_out_stream_s_empty_n)
    begin
        if ((not((((enc_data_out_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)) or ((noise_sample_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state99) and (ap_predicate_op338_read_state99 = ap_const_boolean_1))) then 
            enc_data_out_stream_s_read <= ap_const_logic_1;
        else 
            enc_data_out_stream_s_read <= ap_const_logic_0;
        end if; 
    end process;


    enc_data_out_stream_s_write_assign_proc : process(noise_sample_stream_s_full_n, enc_data_out_stream_s_full_n, ap_CS_fsm_state98)
    begin
        if ((not(((enc_data_out_stream_s_full_n = ap_const_logic_0) or (noise_sample_stream_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            enc_data_out_stream_s_write <= ap_const_logic_1;
        else 
            enc_data_out_stream_s_write <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_385_p2 <= "1" when (i_reg_299 = ap_const_lv3_4) else "0";
    exitcond_fu_603_p2 <= "1" when (i5_reg_322 = ap_const_lv2_2) else "0";
    grp_decoder_fu_362_ap_start <= grp_decoder_fu_362_ap_start_reg;
    grp_encoder_fu_356_ap_start <= grp_encoder_fu_356_ap_start_reg;
    grp_operator_s_fu_372_ap_start <= grp_operator_s_fu_372_ap_start_reg;
    i_2_fu_391_p2 <= std_logic_vector(unsigned(i_reg_299) + unsigned(ap_const_lv3_1));
    i_3_fu_933_p2 <= std_logic_vector(unsigned(i6_reg_345) + unsigned(ap_const_lv3_1));
    i_4_fu_609_p2 <= std_logic_vector(unsigned(i5_reg_322) + unsigned(ap_const_lv2_1));

    noise_sample_stream_s_read_assign_proc : process(ap_CS_fsm_state99, noise_sample_stream_s_empty_n, ap_predicate_op338_read_state99, enc_data_out_stream_s_empty_n)
    begin
        if ((not((((enc_data_out_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)) or ((noise_sample_stream_s_empty_n = ap_const_logic_0) and (ap_predicate_op338_read_state99 = ap_const_boolean_1)))) and (ap_const_logic_1 = ap_CS_fsm_state99) and (ap_predicate_op338_read_state99 = ap_const_boolean_1))) then 
            noise_sample_stream_s_read <= ap_const_logic_1;
        else 
            noise_sample_stream_s_read <= ap_const_logic_0;
        end if; 
    end process;


    noise_sample_stream_s_write_assign_proc : process(noise_sample_stream_s_full_n, enc_data_out_stream_s_full_n, ap_CS_fsm_state98)
    begin
        if ((not(((enc_data_out_stream_s_full_n = ap_const_logic_0) or (noise_sample_stream_s_full_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
            noise_sample_stream_s_write <= ap_const_logic_1;
        else 
            noise_sample_stream_s_write <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_8_fu_764_p2 <= std_logic_vector(unsigned(tmp_86_fu_752_p3) + unsigned(tmp_87_cast_fu_760_p1));
    p_demorgan4_fu_895_p2 <= (tmp_299_fu_889_p2 and tmp_298_fu_883_p2);
    p_demorgan_fu_573_p2 <= (tmp_240_fu_567_p2 and tmp_239_fu_561_p2);
    tmp_100_fu_627_p2 <= (tmp_99_fu_619_p3 or ap_const_lv6_1F);
    tmp_101_fu_943_p3 <= (tmp_264_fu_939_p1 & ap_const_lv5_0);
    tmp_102_fu_951_p2 <= (tmp_101_fu_943_p3 or ap_const_lv7_1F);
    tmp_103_fu_780_p3 <= (tmp_282_reg_1258 & ap_const_lv5_0);
    tmp_104_fu_787_p2 <= (tmp_103_fu_780_p3 or ap_const_lv6_1F);
    tmp_1_nbwritereq_fu_224_p3 <= (0=>noise_sample_stream_s_full_n, others=>'-');
    tmp_223_fu_397_p1 <= i_reg_299(2 - 1 downto 0);
    tmp_224_fu_471_p2 <= "1" when (unsigned(tmp_s_fu_458_p3) > unsigned(tmp_98_fu_465_p2)) else "0";
    tmp_225_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_458_p3),8));
    tmp_226_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_465_p2),8));
    tmp_227_fu_485_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(axis_enc_data_in_V_data_V_0_data_out),128));
    tmp_228_fu_489_p2 <= (tmp_225_fu_477_p1 xor ap_const_lv8_7F);
    tmp_229_fu_495_p3 <= 
        tmp_225_fu_477_p1 when (tmp_224_fu_471_p2(0) = '1') else 
        tmp_226_fu_481_p1;
    tmp_230_fu_503_p3 <= 
        tmp_226_fu_481_p1 when (tmp_224_fu_471_p2(0) = '1') else 
        tmp_225_fu_477_p1;
    tmp_231_fu_511_p3 <= 
        tmp_228_fu_489_p2 when (tmp_224_fu_471_p2(0) = '1') else 
        tmp_225_fu_477_p1;
    tmp_232_fu_519_p2 <= (tmp_229_fu_495_p3 xor ap_const_lv8_7F);
    tmp_233_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_231_fu_511_p3),128));
    tmp_234_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_230_fu_503_p3),128));
    tmp_235_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_232_fu_519_p2),128));
    tmp_236_fu_537_p2 <= std_logic_vector(shift_left(unsigned(tmp_227_fu_485_p1),to_integer(unsigned('0' & tmp_233_fu_525_p1(31-1 downto 0)))));
    
    tmp_237_fu_543_p4_proc : process(tmp_236_fu_537_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_237_fu_543_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_236_fu_537_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_237_fu_543_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_237_fu_543_p4_i) := tmp_236_fu_537_p2(128-1-tmp_237_fu_543_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_237_fu_543_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_238_fu_553_p3 <= 
        tmp_237_fu_543_p4 when (tmp_224_fu_471_p2(0) = '1') else 
        tmp_236_fu_537_p2;
    tmp_239_fu_561_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_234_fu_529_p1(31-1 downto 0)))));
    tmp_240_fu_567_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_235_fu_533_p1(31-1 downto 0)))));
    tmp_241_fu_579_p2 <= (p_demorgan_fu_573_p2 xor ap_const_lv128_lc_3);
    tmp_242_fu_585_p2 <= (tmp_241_fu_579_p2 and enc_data_in_V_s_reg_287);
    tmp_243_fu_591_p2 <= (tmp_238_fu_553_p3 and p_demorgan_fu_573_p2);
    tmp_245_fu_925_p3 <= i6_reg_345(2 downto 2);
    tmp_246_fu_615_p1 <= i5_reg_322(1 - 1 downto 0);
    tmp_247_fu_633_p2 <= "1" when (unsigned(tmp_99_fu_619_p3) > unsigned(tmp_100_fu_627_p2)) else "0";
    tmp_248_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_619_p3),7));
    tmp_249_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_627_p2),7));
    
    tmp_250_fu_647_p4_proc : process(dec_data_in_V_4_reg_1204)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_250_fu_647_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := dec_data_in_V_4_reg_1204;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_250_fu_647_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_250_fu_647_p4_i) := dec_data_in_V_4_reg_1204(64-1-tmp_250_fu_647_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_250_fu_647_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_251_fu_656_p2 <= std_logic_vector(unsigned(tmp_248_fu_639_p1) - unsigned(tmp_249_fu_643_p1));
    tmp_252_fu_662_p2 <= (tmp_248_fu_639_p1 xor ap_const_lv7_3F);
    tmp_253_fu_668_p2 <= std_logic_vector(unsigned(tmp_249_fu_643_p1) - unsigned(tmp_248_fu_639_p1));
    tmp_254_fu_674_p3 <= 
        tmp_251_fu_656_p2 when (tmp_247_fu_633_p2(0) = '1') else 
        tmp_253_fu_668_p2;
    tmp_255_fu_682_p3 <= 
        tmp_250_fu_647_p4 when (tmp_247_fu_633_p2(0) = '1') else 
        dec_data_in_V_4_reg_1204;
    tmp_256_fu_689_p3 <= 
        tmp_252_fu_662_p2 when (tmp_247_fu_633_p2(0) = '1') else 
        tmp_248_fu_639_p1;
    tmp_257_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_254_fu_674_p3));
    tmp_258_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_256_fu_689_p3),64));
    tmp_259_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_257_reg_1242),64));
    tmp_260_fu_707_p2 <= std_logic_vector(shift_right(unsigned(tmp_255_fu_682_p3),to_integer(unsigned('0' & tmp_258_fu_703_p1(31-1 downto 0)))));
    tmp_261_fu_716_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_259_fu_713_p1(31-1 downto 0)))));
    tmp_262_fu_722_p2 <= (tmp_261_fu_716_p2 and tmp_260_reg_1247);
    tmp_264_fu_939_p1 <= i6_reg_345(2 - 1 downto 0);
    tmp_265_fu_957_p2 <= "1" when (unsigned(tmp_101_fu_943_p3) > unsigned(tmp_102_fu_951_p2)) else "0";
    tmp_266_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_101_fu_943_p3),8));
    tmp_267_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_102_fu_951_p2),8));
    
    tmp_268_fu_971_p4_proc : process(dec_data_out_V_reg_1268)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_268_fu_971_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := dec_data_out_V_reg_1268;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_268_fu_971_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_268_fu_971_p4_i) := dec_data_out_V_reg_1268(128-1-tmp_268_fu_971_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_268_fu_971_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_269_fu_980_p2 <= std_logic_vector(unsigned(tmp_266_fu_963_p1) - unsigned(tmp_267_fu_967_p1));
    tmp_270_fu_986_p2 <= (tmp_266_fu_963_p1 xor ap_const_lv8_7F);
    tmp_271_fu_992_p2 <= std_logic_vector(unsigned(tmp_267_fu_967_p1) - unsigned(tmp_266_fu_963_p1));
    tmp_272_fu_998_p3 <= 
        tmp_269_fu_980_p2 when (tmp_265_fu_957_p2(0) = '1') else 
        tmp_271_fu_992_p2;
    tmp_273_fu_1006_p3 <= 
        tmp_268_fu_971_p4 when (tmp_265_fu_957_p2(0) = '1') else 
        dec_data_out_V_reg_1268;
    tmp_274_fu_1013_p3 <= 
        tmp_270_fu_986_p2 when (tmp_265_fu_957_p2(0) = '1') else 
        tmp_266_fu_963_p1;
    tmp_275_fu_1021_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_272_fu_998_p3));
    tmp_276_fu_1027_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_274_fu_1013_p3),128));
    tmp_277_fu_1061_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_275_reg_1289),128));
    tmp_278_fu_1031_p2 <= std_logic_vector(shift_right(unsigned(tmp_273_fu_1006_p3),to_integer(unsigned('0' & tmp_276_fu_1027_p1(31-1 downto 0)))));
    tmp_279_fu_1064_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_3),to_integer(unsigned('0' & tmp_277_fu_1061_p1(31-1 downto 0)))));
    tmp_280_fu_1070_p2 <= (tmp_279_fu_1064_p2 and tmp_278_reg_1294);
    tmp_282_fu_742_p1 <= i5_reg_322(1 - 1 downto 0);
    tmp_283_fu_793_p2 <= "1" when (unsigned(tmp_103_fu_780_p3) > unsigned(tmp_104_fu_787_p2)) else "0";
    tmp_284_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_103_fu_780_p3),7));
    tmp_285_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_104_fu_787_p2),7));
    tmp_286_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_89_fu_770_p4),64));
    tmp_287_fu_811_p2 <= (tmp_284_fu_799_p1 xor ap_const_lv7_3F);
    tmp_288_fu_817_p3 <= 
        tmp_284_fu_799_p1 when (tmp_283_fu_793_p2(0) = '1') else 
        tmp_285_fu_803_p1;
    tmp_289_fu_825_p3 <= 
        tmp_285_fu_803_p1 when (tmp_283_fu_793_p2(0) = '1') else 
        tmp_284_fu_799_p1;
    tmp_290_fu_833_p3 <= 
        tmp_287_fu_811_p2 when (tmp_283_fu_793_p2(0) = '1') else 
        tmp_284_fu_799_p1;
    tmp_291_fu_841_p2 <= (tmp_288_fu_817_p3 xor ap_const_lv7_3F);
    tmp_292_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_290_fu_833_p3),64));
    tmp_293_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_289_fu_825_p3),64));
    tmp_294_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_291_fu_841_p2),64));
    tmp_295_fu_859_p2 <= std_logic_vector(shift_left(unsigned(tmp_286_fu_807_p1),to_integer(unsigned('0' & tmp_292_fu_847_p1(31-1 downto 0)))));
    
    tmp_296_fu_865_p4_proc : process(tmp_295_fu_859_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_296_fu_865_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_295_fu_859_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_296_fu_865_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_296_fu_865_p4_i) := tmp_295_fu_859_p2(64-1-tmp_296_fu_865_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_296_fu_865_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_297_fu_875_p3 <= 
        tmp_296_fu_865_p4 when (tmp_283_fu_793_p2(0) = '1') else 
        tmp_295_fu_859_p2;
    tmp_298_fu_883_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_293_fu_851_p1(31-1 downto 0)))));
    tmp_299_fu_889_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_294_fu_855_p1(31-1 downto 0)))));
    tmp_2_nbwritereq_fu_231_p3 <= (0=>enc_data_out_stream_s_full_n, others=>'-');
    tmp_300_fu_901_p2 <= (p_demorgan4_fu_895_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_301_fu_907_p2 <= (tmp_300_fu_901_p2 and dec_data_in_V_reg_310);
    tmp_302_fu_913_p2 <= (tmp_297_fu_875_p3 and p_demorgan4_fu_895_p2);
    tmp_3_nbreadreq_fu_250_p3 <= (0=>enc_data_out_stream_s_empty_n, others=>'-');
    tmp_4_nbreadreq_fu_257_p3 <= (0=>noise_sample_stream_s_empty_n, others=>'-');
    tmp_86_fu_752_p3 <= (p_Val2_7_fu_198 & ap_const_lv6_0);
        tmp_87_cast_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_s_fu_194),38));

    tmp_89_fu_770_p4 <= p_Val2_8_fu_764_p2(37 downto 6);
    tmp_98_fu_465_p2 <= (tmp_s_fu_458_p3 or ap_const_lv7_1F);
    tmp_99_fu_619_p3 <= (tmp_246_fu_615_p1 & ap_const_lv5_0);
    tmp_fu_401_p2 <= "1" when (AWGN_EN_REG_read_reg_1156 = ap_const_lv32_0) else "0";
    tmp_s_fu_458_p3 <= (tmp_223_reg_1190 & ap_const_lv5_0);
end behav;
