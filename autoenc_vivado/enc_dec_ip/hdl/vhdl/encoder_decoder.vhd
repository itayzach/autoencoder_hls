-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder_decoder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    axis_enc_data_in_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    axis_enc_data_in_TVALID : IN STD_LOGIC;
    axis_enc_data_in_TREADY : OUT STD_LOGIC;
    axis_enc_data_in_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    axis_enc_data_in_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    axis_dec_data_out_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    axis_dec_data_out_TVALID : OUT STD_LOGIC;
    axis_dec_data_out_TREADY : IN STD_LOGIC;
    axis_dec_data_out_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    axis_dec_data_out_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of encoder_decoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_decoder,hls_ip_2018_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.742000,HLS_SYN_LAT=125,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=150,HLS_SYN_FF=19380,HLS_SYN_LUT=28233,HLS_VERSION=2018_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (109 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (109 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (109 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (109 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (109 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (109 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (109 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (109 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (109 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (109 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (109 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (109 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_1F : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv7_3F : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_enc_data_in_V_data_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_data_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_data_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_data_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_enc_data_in_V_keep_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_keep_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_keep_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_keep_V_0_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_vld_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_vld_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_in : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_ack_out : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_enc_data_in_V_last_V_0_sel_rd : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel_wr : STD_LOGIC := '0';
    signal axis_enc_data_in_V_last_V_0_sel : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_A : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_load_B : STD_LOGIC;
    signal axis_enc_data_in_V_last_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_enc_data_in_V_last_V_0_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_V_data_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_data_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_data_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_data_out : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_payload_A : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_payload_B : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_V_keep_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_keep_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_keep_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_keep_V_1_state_cmp_full : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_vld_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_vld_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_in : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_ack_out : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_V_last_V_1_sel_rd : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel_wr : STD_LOGIC := '0';
    signal axis_dec_data_out_V_last_V_1_sel : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_A : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_load_B : STD_LOGIC;
    signal axis_dec_data_out_V_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal axis_dec_data_out_V_last_V_1_state_cmp_full : STD_LOGIC;
    signal axis_enc_data_in_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (109 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal axis_dec_data_out_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal tmp_253_reg_991 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_240_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_929 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_246_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_934 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond1_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal enc_data_in_V_fu_441_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal grp_encoder_fu_214_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal enc_data_out_V_reg_944 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal i_2_fu_453_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_953 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal tmp_s_fu_463_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_958 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_91_fu_472_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_reg_964 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_225_fu_537_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_225_reg_970 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_228_fu_547_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_228_reg_975 : STD_LOGIC_VECTOR (63 downto 0);
    signal dec_data_in_V_fu_689_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal grp_decoder_fu_220_ap_return : STD_LOGIC_VECTOR (127 downto 0);
    signal dec_data_out_V_reg_985 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal tmp_253_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal i_3_fu_703_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_995 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_254_fu_709_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_254_reg_1000 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_265_fu_791_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_265_reg_1006 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_268_fu_801_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_268_reg_1011 : STD_LOGIC_VECTOR (127 downto 0);
    signal axis_dec_data_out_it_fu_845_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal axis_dec_data_out_it_1_fu_850_p6 : STD_LOGIC_VECTOR (3 downto 0);
    signal axis_dec_data_out_it_2_fu_864_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal axis_dec_data_out_it_2_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoder_fu_214_ap_start : STD_LOGIC;
    signal grp_encoder_fu_214_ap_done : STD_LOGIC;
    signal grp_encoder_fu_214_ap_idle : STD_LOGIC;
    signal grp_encoder_fu_214_ap_ready : STD_LOGIC;
    signal grp_decoder_fu_220_ap_start : STD_LOGIC;
    signal grp_decoder_fu_220_ap_done : STD_LOGIC;
    signal grp_decoder_fu_220_ap_idle : STD_LOGIC;
    signal grp_decoder_fu_220_ap_ready : STD_LOGIC;
    signal enc_data_in_V_s_reg_157 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_169 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dec_data_in_V_s_reg_180 : STD_LOGIC_VECTOR (63 downto 0);
    signal i5_reg_192 : STD_LOGIC_VECTOR (1 downto 0);
    signal i6_reg_203 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state110 : BOOLEAN;
    signal ap_block_state110_io : BOOLEAN;
    signal grp_encoder_fu_214_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_decoder_fu_220_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm_state96 : STD_LOGIC;
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal tmp_keep_V_fu_102 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_1_fu_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_2_fu_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_keep_V_3_fu_114 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_last_V_fu_118 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_1_fu_122 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_2_fu_126 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_last_V_3_fu_130 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_230_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_230_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_94_fu_302_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_95_fu_309_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_273_fu_321_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_272_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_274_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_276_fu_333_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_277_fu_339_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_279_fu_355_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_278_fu_347_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_280_fu_363_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_275_fu_329_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_281_fu_369_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_284_fu_381_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_285_fu_387_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_282_fu_373_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_283_fu_377_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_287_fu_405_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_288_fu_411_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal p_demorgan_fu_417_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_289_fu_423_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_286_fu_397_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_290_fu_429_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_291_fu_435_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_214_fu_459_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_216_fu_479_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_217_fu_483_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_219_fu_496_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_221_fu_508_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_218_fu_487_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_220_fu_502_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_222_fu_514_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_224_fu_529_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_223_fu_522_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_226_fu_543_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_227_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_229_fu_556_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_230_fu_562_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_231_fu_567_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_233_fu_571_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_234_fu_574_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_236_fu_581_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_237_fu_587_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_239_fu_603_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_238_fu_595_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_240_fu_611_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_235_fu_577_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_241_fu_617_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_244_fu_629_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_245_fu_635_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_242_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_243_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_247_fu_653_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_248_fu_659_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_demorgan2_fu_665_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_249_fu_671_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_246_fu_645_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_250_fu_677_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_251_fu_683_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_fu_713_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_93_fu_721_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_256_fu_733_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_257_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_255_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_259_fu_750_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_261_fu_762_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_258_fu_741_p4 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_260_fu_756_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_262_fu_768_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_264_fu_783_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_263_fu_776_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_266_fu_797_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_267_fu_831_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_269_fu_834_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_270_fu_840_p2 : STD_LOGIC_VECTOR (127 downto 0);

    component encoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component decoder IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (127 downto 0) );
    end component;


    component encoder_decoder_mdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        din3 : IN STD_LOGIC_VECTOR (3 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component encoder_decoder_meOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (0 downto 0);
        din1 : IN STD_LOGIC_VECTOR (0 downto 0);
        din2 : IN STD_LOGIC_VECTOR (0 downto 0);
        din3 : IN STD_LOGIC_VECTOR (0 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_encoder_fu_214 : component encoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoder_fu_214_ap_start,
        ap_done => grp_encoder_fu_214_ap_done,
        ap_idle => grp_encoder_fu_214_ap_idle,
        ap_ready => grp_encoder_fu_214_ap_ready,
        data_V_read => enc_data_in_V_s_reg_157,
        ap_return => grp_encoder_fu_214_ap_return);

    grp_decoder_fu_220 : component decoder
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decoder_fu_220_ap_start,
        ap_done => grp_decoder_fu_220_ap_done,
        ap_idle => grp_decoder_fu_220_ap_idle,
        ap_ready => grp_decoder_fu_220_ap_ready,
        data_V_read => dec_data_in_V_s_reg_180,
        ap_return => grp_decoder_fu_220_ap_return);

    encoder_decoder_mdEe_U33 : component encoder_decoder_mdEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        din3_WIDTH => 4,
        din4_WIDTH => 2,
        dout_WIDTH => 4)
    port map (
        din0 => tmp_keep_V_fu_102,
        din1 => tmp_keep_V_1_fu_106,
        din2 => tmp_keep_V_2_fu_110,
        din3 => tmp_keep_V_3_fu_114,
        din4 => tmp_254_reg_1000,
        dout => axis_dec_data_out_it_1_fu_850_p6);

    encoder_decoder_meOg_U34 : component encoder_decoder_meOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 1,
        din1_WIDTH => 1,
        din2_WIDTH => 1,
        din3_WIDTH => 1,
        din4_WIDTH => 2,
        dout_WIDTH => 1)
    port map (
        din0 => tmp_last_V_fu_118,
        din1 => tmp_last_V_1_fu_122,
        din2 => tmp_last_V_2_fu_126,
        din3 => tmp_last_V_3_fu_130,
        din4 => tmp_254_reg_1000,
        dout => axis_dec_data_out_it_2_fu_864_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_rd <= not(axis_dec_data_out_V_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_data_V_1_sel_wr <= not(axis_dec_data_out_V_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_data_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_data_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_rd <= not(axis_dec_data_out_V_keep_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_keep_V_1_sel_wr <= not(axis_dec_data_out_V_keep_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_keep_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_keep_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_keep_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_keep_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_out = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_rd <= not(axis_dec_data_out_V_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) then 
                                        axis_dec_data_out_V_last_V_1_sel_wr <= not(axis_dec_data_out_V_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_dec_data_out_V_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                elsif ((((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1))) and not(((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_0) and (axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1))) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_3)) or ((axis_dec_data_out_V_last_V_1_ack_out = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1)) or ((axis_dec_data_out_V_last_V_1_vld_in = ap_const_logic_1) and (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_2)))) then 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_3;
                else 
                    axis_dec_data_out_V_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_rd <= not(axis_enc_data_in_V_data_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_data_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_data_V_0_sel_wr <= not(axis_enc_data_in_V_data_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_data_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_data_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_data_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_data_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_rd <= not(axis_enc_data_in_V_keep_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_keep_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_keep_V_0_sel_wr <= not(axis_enc_data_in_V_keep_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_keep_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_keep_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_keep_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_keep_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_out = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_rd <= not(axis_enc_data_in_V_last_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((axis_enc_data_in_V_last_V_0_ack_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) then 
                                        axis_enc_data_in_V_last_V_0_sel_wr <= not(axis_enc_data_in_V_last_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    axis_enc_data_in_V_last_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_0;
            else
                if ((((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                elsif ((((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_1;
                elsif (((not(((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1))) and not(((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_0) and (axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1))) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_3)) or ((axis_enc_data_in_V_last_V_0_ack_out = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1)) or ((axis_enc_data_in_V_last_V_0_vld_in = ap_const_logic_1) and (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_2)))) then 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_3;
                else 
                    axis_enc_data_in_V_last_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    grp_decoder_fu_220_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decoder_fu_220_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state96) and (ap_const_logic_1 = ap_CS_fsm_state94))) then 
                    grp_decoder_fu_220_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoder_fu_220_ap_ready = ap_const_logic_1)) then 
                    grp_decoder_fu_220_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encoder_fu_214_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoder_fu_214_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_encoder_fu_214_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoder_fu_214_ap_ready = ap_const_logic_1)) then 
                    grp_encoder_fu_214_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i5_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
                i5_reg_192 <= i_2_reg_953;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
                i5_reg_192 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i6_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state110_io))) and (ap_const_logic_1 = ap_CS_fsm_state110) and (axis_dec_data_out_it_2_reg_1026 = ap_const_lv1_0) and (tmp_253_reg_991 = ap_const_lv1_0))) then 
                i6_reg_203 <= i_3_reg_995;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
                i6_reg_203 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
                i_reg_169 <= i_1_reg_929;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_reg_169 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_A <= axis_dec_data_out_it_fu_845_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_data_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_data_V_1_payload_B <= axis_dec_data_out_it_fu_845_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_A <= axis_dec_data_out_it_1_fu_850_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_keep_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_keep_V_1_payload_B <= axis_dec_data_out_it_1_fu_850_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_A = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_A <= axis_dec_data_out_it_2_fu_864_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_dec_data_out_V_last_V_1_load_B = ap_const_logic_1)) then
                axis_dec_data_out_V_last_V_1_payload_B <= axis_dec_data_out_it_2_fu_864_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then
                axis_dec_data_out_it_2_reg_1026 <= axis_dec_data_out_it_2_fu_864_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_A <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_data_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_data_V_0_payload_B <= axis_enc_data_in_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_A <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_keep_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_keep_V_0_payload_B <= axis_enc_data_in_TKEEP;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_A = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_A <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((axis_enc_data_in_V_last_V_0_load_B = ap_const_logic_1)) then
                axis_enc_data_in_V_last_V_0_payload_B <= axis_enc_data_in_TLAST;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state95)) then
                dec_data_in_V_s_reg_180 <= dec_data_in_V_fu_689_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state107)) then
                dec_data_out_V_reg_985 <= grp_decoder_fu_220_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                enc_data_in_V_s_reg_157 <= enc_data_in_V_fu_441_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state93)) then
                enc_data_out_V_reg_944 <= grp_encoder_fu_214_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_929 <= i_1_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state94)) then
                i_2_reg_953 <= i_2_fu_453_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state108)) then
                i_3_reg_995 <= i_3_fu_703_p2;
                tmp_253_reg_991 <= i6_reg_203(2 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond_fu_447_p2 = ap_const_lv1_0))) then
                    tmp_225_reg_970(6 downto 1) <= tmp_225_fu_537_p2(6 downto 1);
                tmp_228_reg_975 <= tmp_228_fu_547_p2;
                    tmp_91_reg_964(5) <= tmp_91_fu_472_p2(5);
                    tmp_s_reg_958(5) <= tmp_s_fu_463_p3(5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state108) and (tmp_253_fu_695_p3 = ap_const_lv1_0))) then
                tmp_254_reg_1000 <= tmp_254_fu_709_p1;
                    tmp_265_reg_1006(7 downto 1) <= tmp_265_fu_791_p2(7 downto 1);
                tmp_268_reg_1011 <= tmp_268_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_934 = ap_const_lv2_1) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_1_fu_106 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_1_fu_122 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_934 = ap_const_lv2_2) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_2_fu_110 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_2_fu_126 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_934 = ap_const_lv2_3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_3_fu_114 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_3_fu_130 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_934 = ap_const_lv2_0) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                tmp_keep_V_fu_102 <= axis_enc_data_in_V_keep_V_0_data_out;
                tmp_last_V_fu_118 <= axis_enc_data_in_V_last_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_234_p2 = ap_const_lv1_0))) then
                tmp_reg_934 <= tmp_fu_246_p1;
            end if;
        end if;
    end process;
    tmp_s_reg_958(4 downto 0) <= "00000";
    tmp_91_reg_964(4 downto 0) <= "11111";
    tmp_225_reg_970(0) <= '0';
    tmp_265_reg_1006(0) <= '0';

    ap_NS_fsm_assign_proc : process (axis_enc_data_in_V_data_V_0_vld_out, axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in, ap_CS_fsm, ap_CS_fsm_state3, ap_CS_fsm_state109, ap_CS_fsm_state110, tmp_253_reg_991, ap_CS_fsm_state2, exitcond1_fu_234_p2, ap_CS_fsm_state94, exitcond_fu_447_p2, tmp_253_fu_695_p3, ap_CS_fsm_state108, axis_dec_data_out_it_2_reg_1026, ap_block_state110_io)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_234_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state94) and (exitcond_fu_447_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state96;
                else
                    ap_NS_fsm <= ap_ST_fsm_state95;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state108) and (tmp_253_fu_695_p3 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state109 => 
                if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then
                    ap_NS_fsm <= ap_ST_fsm_state110;
                else
                    ap_NS_fsm <= ap_ST_fsm_state109;
                end if;
            when ap_ST_fsm_state110 => 
                if ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state110_io))) and (ap_const_logic_1 = ap_CS_fsm_state110) and ((axis_dec_data_out_it_2_reg_1026 = ap_const_lv1_1) or (tmp_253_reg_991 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) or (ap_const_boolean_1 = ap_block_state110_io))) and (ap_const_logic_1 = ap_CS_fsm_state110) and (axis_dec_data_out_it_2_reg_1026 = ap_const_lv1_0) and (tmp_253_reg_991 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state108;
                else
                    ap_NS_fsm <= ap_ST_fsm_state110;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_NS_fsm_state96 <= ap_NS_fsm(95);

    ap_block_state110_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, axis_dec_data_out_V_keep_V_1_ack_in, axis_dec_data_out_V_last_V_1_ack_in)
    begin
                ap_block_state110 <= ((axis_dec_data_out_V_last_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_keep_V_1_ack_in = ap_const_logic_0) or (axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state110_io_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, tmp_253_reg_991)
    begin
                ap_block_state110_io <= ((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_0) and (tmp_253_reg_991 = ap_const_lv1_0));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    axis_dec_data_out_TDATA <= axis_dec_data_out_V_data_V_1_data_out;

    axis_dec_data_out_TDATA_blk_n_assign_proc : process(axis_dec_data_out_V_data_V_1_state, ap_CS_fsm_state109, ap_CS_fsm_state110, tmp_253_reg_991)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state109) or ((ap_const_logic_1 = ap_CS_fsm_state110) and (tmp_253_reg_991 = ap_const_lv1_0)))) then 
            axis_dec_data_out_TDATA_blk_n <= axis_dec_data_out_V_data_V_1_state(1);
        else 
            axis_dec_data_out_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_dec_data_out_TKEEP <= axis_dec_data_out_V_keep_V_1_data_out;
    axis_dec_data_out_TLAST <= axis_dec_data_out_V_last_V_1_data_out;
    axis_dec_data_out_TVALID <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_V_data_V_1_ack_in <= axis_dec_data_out_V_data_V_1_state(1);
    axis_dec_data_out_V_data_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_data_V_1_data_out_assign_proc : process(axis_dec_data_out_V_data_V_1_payload_A, axis_dec_data_out_V_data_V_1_payload_B, axis_dec_data_out_V_data_V_1_sel)
    begin
        if ((axis_dec_data_out_V_data_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_B;
        else 
            axis_dec_data_out_V_data_V_1_data_out <= axis_dec_data_out_V_data_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_load_A <= (not(axis_dec_data_out_V_data_V_1_sel_wr) and axis_dec_data_out_V_data_V_1_state_cmp_full);
    axis_dec_data_out_V_data_V_1_load_B <= (axis_dec_data_out_V_data_V_1_state_cmp_full and axis_dec_data_out_V_data_V_1_sel_wr);
    axis_dec_data_out_V_data_V_1_sel <= axis_dec_data_out_V_data_V_1_sel_rd;
    axis_dec_data_out_V_data_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_data_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_data_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state109)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_data_V_1_vld_out <= axis_dec_data_out_V_data_V_1_state(0);
    axis_dec_data_out_V_keep_V_1_ack_in <= axis_dec_data_out_V_keep_V_1_state(1);
    axis_dec_data_out_V_keep_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_keep_V_1_data_out_assign_proc : process(axis_dec_data_out_V_keep_V_1_payload_A, axis_dec_data_out_V_keep_V_1_payload_B, axis_dec_data_out_V_keep_V_1_sel)
    begin
        if ((axis_dec_data_out_V_keep_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_B;
        else 
            axis_dec_data_out_V_keep_V_1_data_out <= axis_dec_data_out_V_keep_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_load_A <= (not(axis_dec_data_out_V_keep_V_1_sel_wr) and axis_dec_data_out_V_keep_V_1_state_cmp_full);
    axis_dec_data_out_V_keep_V_1_load_B <= (axis_dec_data_out_V_keep_V_1_state_cmp_full and axis_dec_data_out_V_keep_V_1_sel_wr);
    axis_dec_data_out_V_keep_V_1_sel <= axis_dec_data_out_V_keep_V_1_sel_rd;
    axis_dec_data_out_V_keep_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_keep_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_keep_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state109)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_keep_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_keep_V_1_vld_out <= axis_dec_data_out_V_keep_V_1_state(0);
    axis_dec_data_out_V_last_V_1_ack_in <= axis_dec_data_out_V_last_V_1_state(1);
    axis_dec_data_out_V_last_V_1_ack_out <= axis_dec_data_out_TREADY;

    axis_dec_data_out_V_last_V_1_data_out_assign_proc : process(axis_dec_data_out_V_last_V_1_payload_A, axis_dec_data_out_V_last_V_1_payload_B, axis_dec_data_out_V_last_V_1_sel)
    begin
        if ((axis_dec_data_out_V_last_V_1_sel = ap_const_logic_1)) then 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_B;
        else 
            axis_dec_data_out_V_last_V_1_data_out <= axis_dec_data_out_V_last_V_1_payload_A;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_load_A <= (not(axis_dec_data_out_V_last_V_1_sel_wr) and axis_dec_data_out_V_last_V_1_state_cmp_full);
    axis_dec_data_out_V_last_V_1_load_B <= (axis_dec_data_out_V_last_V_1_state_cmp_full and axis_dec_data_out_V_last_V_1_sel_wr);
    axis_dec_data_out_V_last_V_1_sel <= axis_dec_data_out_V_last_V_1_sel_rd;
    axis_dec_data_out_V_last_V_1_state_cmp_full <= '0' when (axis_dec_data_out_V_last_V_1_state = ap_const_lv2_1) else '1';

    axis_dec_data_out_V_last_V_1_vld_in_assign_proc : process(axis_dec_data_out_V_data_V_1_ack_in, ap_CS_fsm_state109)
    begin
        if (((axis_dec_data_out_V_data_V_1_ack_in = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state109))) then 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_1;
        else 
            axis_dec_data_out_V_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    axis_dec_data_out_V_last_V_1_vld_out <= axis_dec_data_out_V_last_V_1_state(0);
    axis_dec_data_out_it_fu_845_p1 <= tmp_270_fu_840_p2(32 - 1 downto 0);

    axis_enc_data_in_TDATA_blk_n_assign_proc : process(axis_enc_data_in_V_data_V_0_state, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            axis_enc_data_in_TDATA_blk_n <= axis_enc_data_in_V_data_V_0_state(0);
        else 
            axis_enc_data_in_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    axis_enc_data_in_TREADY <= axis_enc_data_in_V_last_V_0_state(1);
    axis_enc_data_in_V_data_V_0_ack_in <= axis_enc_data_in_V_data_V_0_state(1);

    axis_enc_data_in_V_data_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_data_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_data_V_0_data_out_assign_proc : process(axis_enc_data_in_V_data_V_0_payload_A, axis_enc_data_in_V_data_V_0_payload_B, axis_enc_data_in_V_data_V_0_sel)
    begin
        if ((axis_enc_data_in_V_data_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_B;
        else 
            axis_enc_data_in_V_data_V_0_data_out <= axis_enc_data_in_V_data_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_data_V_0_load_A <= (not(axis_enc_data_in_V_data_V_0_sel_wr) and axis_enc_data_in_V_data_V_0_state_cmp_full);
    axis_enc_data_in_V_data_V_0_load_B <= (axis_enc_data_in_V_data_V_0_state_cmp_full and axis_enc_data_in_V_data_V_0_sel_wr);
    axis_enc_data_in_V_data_V_0_sel <= axis_enc_data_in_V_data_V_0_sel_rd;
    axis_enc_data_in_V_data_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_data_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_data_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_data_V_0_vld_out <= axis_enc_data_in_V_data_V_0_state(0);
    axis_enc_data_in_V_keep_V_0_ack_in <= axis_enc_data_in_V_keep_V_0_state(1);

    axis_enc_data_in_V_keep_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_keep_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_keep_V_0_data_out_assign_proc : process(axis_enc_data_in_V_keep_V_0_payload_A, axis_enc_data_in_V_keep_V_0_payload_B, axis_enc_data_in_V_keep_V_0_sel)
    begin
        if ((axis_enc_data_in_V_keep_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_B;
        else 
            axis_enc_data_in_V_keep_V_0_data_out <= axis_enc_data_in_V_keep_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_keep_V_0_load_A <= (not(axis_enc_data_in_V_keep_V_0_sel_wr) and axis_enc_data_in_V_keep_V_0_state_cmp_full);
    axis_enc_data_in_V_keep_V_0_load_B <= (axis_enc_data_in_V_keep_V_0_state_cmp_full and axis_enc_data_in_V_keep_V_0_sel_wr);
    axis_enc_data_in_V_keep_V_0_sel <= axis_enc_data_in_V_keep_V_0_sel_rd;
    axis_enc_data_in_V_keep_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_keep_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_keep_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_keep_V_0_vld_out <= axis_enc_data_in_V_keep_V_0_state(0);
    axis_enc_data_in_V_last_V_0_ack_in <= axis_enc_data_in_V_last_V_0_state(1);

    axis_enc_data_in_V_last_V_0_ack_out_assign_proc : process(axis_enc_data_in_V_data_V_0_vld_out, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (axis_enc_data_in_V_data_V_0_vld_out = ap_const_logic_1))) then 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_1;
        else 
            axis_enc_data_in_V_last_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    axis_enc_data_in_V_last_V_0_data_out_assign_proc : process(axis_enc_data_in_V_last_V_0_payload_A, axis_enc_data_in_V_last_V_0_payload_B, axis_enc_data_in_V_last_V_0_sel)
    begin
        if ((axis_enc_data_in_V_last_V_0_sel = ap_const_logic_1)) then 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_B;
        else 
            axis_enc_data_in_V_last_V_0_data_out <= axis_enc_data_in_V_last_V_0_payload_A;
        end if; 
    end process;

    axis_enc_data_in_V_last_V_0_load_A <= (not(axis_enc_data_in_V_last_V_0_sel_wr) and axis_enc_data_in_V_last_V_0_state_cmp_full);
    axis_enc_data_in_V_last_V_0_load_B <= (axis_enc_data_in_V_last_V_0_state_cmp_full and axis_enc_data_in_V_last_V_0_sel_wr);
    axis_enc_data_in_V_last_V_0_sel <= axis_enc_data_in_V_last_V_0_sel_rd;
    axis_enc_data_in_V_last_V_0_state_cmp_full <= '0' when (axis_enc_data_in_V_last_V_0_state = ap_const_lv2_1) else '1';
    axis_enc_data_in_V_last_V_0_vld_in <= axis_enc_data_in_TVALID;
    axis_enc_data_in_V_last_V_0_vld_out <= axis_enc_data_in_V_last_V_0_state(0);
    dec_data_in_V_fu_689_p2 <= (tmp_251_fu_683_p2 or tmp_250_fu_677_p2);
    enc_data_in_V_fu_441_p2 <= (tmp_291_fu_435_p2 or tmp_290_fu_429_p2);
    exitcond1_fu_234_p2 <= "1" when (i_reg_169 = ap_const_lv3_4) else "0";
    exitcond_fu_447_p2 <= "1" when (i5_reg_192 = ap_const_lv2_2) else "0";
    grp_decoder_fu_220_ap_start <= grp_decoder_fu_220_ap_start_reg;
    grp_encoder_fu_214_ap_start <= grp_encoder_fu_214_ap_start_reg;

    grp_fu_230_p0_assign_proc : process(ap_CS_fsm_state94, tmp_s_fu_463_p3, tmp_s_reg_958, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_fu_230_p0 <= tmp_s_reg_958;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_230_p0 <= tmp_s_fu_463_p3;
        else 
            grp_fu_230_p0 <= "XXXXXX";
        end if; 
    end process;


    grp_fu_230_p1_assign_proc : process(ap_CS_fsm_state94, tmp_91_fu_472_p2, tmp_91_reg_964, ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            grp_fu_230_p1 <= tmp_91_reg_964;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            grp_fu_230_p1 <= tmp_91_fu_472_p2;
        else 
            grp_fu_230_p1 <= "XXXXXX";
        end if; 
    end process;

    grp_fu_230_p2 <= "1" when (unsigned(grp_fu_230_p0) > unsigned(grp_fu_230_p1)) else "0";
    i_1_fu_240_p2 <= std_logic_vector(unsigned(i_reg_169) + unsigned(ap_const_lv3_1));
    i_2_fu_453_p2 <= std_logic_vector(unsigned(i5_reg_192) + unsigned(ap_const_lv2_1));
    i_3_fu_703_p2 <= std_logic_vector(unsigned(i6_reg_203) + unsigned(ap_const_lv3_1));
    p_demorgan2_fu_665_p2 <= (tmp_248_fu_659_p2 and tmp_247_fu_653_p2);
    p_demorgan_fu_417_p2 <= (tmp_288_fu_411_p2 and tmp_287_fu_405_p2);
    tmp_214_fu_459_p1 <= i5_reg_192(1 - 1 downto 0);
    tmp_216_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_463_p3),7));
    tmp_217_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_fu_472_p2),7));
    
    tmp_218_fu_487_p4_proc : process(enc_data_out_V_reg_944)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_218_fu_487_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := enc_data_out_V_reg_944;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_218_fu_487_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_218_fu_487_p4_i) := enc_data_out_V_reg_944(64-1-tmp_218_fu_487_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_218_fu_487_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_219_fu_496_p2 <= std_logic_vector(unsigned(tmp_216_fu_479_p1) - unsigned(tmp_217_fu_483_p1));
    tmp_220_fu_502_p2 <= (tmp_216_fu_479_p1 xor ap_const_lv7_3F);
    tmp_221_fu_508_p2 <= std_logic_vector(unsigned(tmp_217_fu_483_p1) - unsigned(tmp_216_fu_479_p1));
    tmp_222_fu_514_p3 <= 
        tmp_219_fu_496_p2 when (grp_fu_230_p2(0) = '1') else 
        tmp_221_fu_508_p2;
    tmp_223_fu_522_p3 <= 
        tmp_218_fu_487_p4 when (grp_fu_230_p2(0) = '1') else 
        enc_data_out_V_reg_944;
    tmp_224_fu_529_p3 <= 
        tmp_220_fu_502_p2 when (grp_fu_230_p2(0) = '1') else 
        tmp_216_fu_479_p1;
    tmp_225_fu_537_p2 <= std_logic_vector(unsigned(ap_const_lv7_3F) - unsigned(tmp_222_fu_514_p3));
    tmp_226_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_224_fu_529_p3),64));
    tmp_227_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_225_reg_970),64));
    tmp_228_fu_547_p2 <= std_logic_vector(shift_right(unsigned(tmp_223_fu_522_p3),to_integer(unsigned('0' & tmp_226_fu_543_p1(31-1 downto 0)))));
    tmp_229_fu_556_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_227_fu_553_p1(31-1 downto 0)))));
    tmp_230_fu_562_p2 <= (tmp_229_fu_556_p2 and tmp_228_reg_975);
    tmp_231_fu_567_p1 <= tmp_230_fu_562_p2(32 - 1 downto 0);
    tmp_233_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_958),7));
    tmp_234_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_reg_964),7));
    tmp_235_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_231_fu_567_p1),64));
    tmp_236_fu_581_p2 <= (tmp_233_fu_571_p1 xor ap_const_lv7_3F);
    tmp_237_fu_587_p3 <= 
        tmp_233_fu_571_p1 when (grp_fu_230_p2(0) = '1') else 
        tmp_234_fu_574_p1;
    tmp_238_fu_595_p3 <= 
        tmp_234_fu_574_p1 when (grp_fu_230_p2(0) = '1') else 
        tmp_233_fu_571_p1;
    tmp_239_fu_603_p3 <= 
        tmp_236_fu_581_p2 when (grp_fu_230_p2(0) = '1') else 
        tmp_233_fu_571_p1;
    tmp_240_fu_611_p2 <= (tmp_237_fu_587_p3 xor ap_const_lv7_3F);
    tmp_241_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_239_fu_603_p3),64));
    tmp_242_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_238_fu_595_p3),64));
    tmp_243_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_240_fu_611_p2),64));
    tmp_244_fu_629_p2 <= std_logic_vector(shift_left(unsigned(tmp_235_fu_577_p1),to_integer(unsigned('0' & tmp_241_fu_617_p1(31-1 downto 0)))));
    
    tmp_245_fu_635_p4_proc : process(tmp_244_fu_629_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(64+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_245_fu_635_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(64 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_3F(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := tmp_244_fu_629_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(64-1-unsigned(ap_const_lv32_3F(6-1 downto 0)));
            for tmp_245_fu_635_p4_i in 0 to 64-1 loop
                v0_cpy(tmp_245_fu_635_p4_i) := tmp_244_fu_629_p2(64-1-tmp_245_fu_635_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(64-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_245_fu_635_p4 <= resvalue(64-1 downto 0);
    end process;

    tmp_246_fu_645_p3 <= 
        tmp_245_fu_635_p4 when (grp_fu_230_p2(0) = '1') else 
        tmp_244_fu_629_p2;
    tmp_247_fu_653_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_242_fu_621_p1(31-1 downto 0)))));
    tmp_248_fu_659_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF),to_integer(unsigned('0' & tmp_243_fu_625_p1(31-1 downto 0)))));
    tmp_249_fu_671_p2 <= (p_demorgan2_fu_665_p2 xor ap_const_lv64_FFFFFFFFFFFFFFFF);
    tmp_250_fu_677_p2 <= (tmp_249_fu_671_p2 and dec_data_in_V_s_reg_180);
    tmp_251_fu_683_p2 <= (tmp_246_fu_645_p3 and p_demorgan2_fu_665_p2);
    tmp_253_fu_695_p3 <= i6_reg_203(2 downto 2);
    tmp_254_fu_709_p1 <= i6_reg_203(2 - 1 downto 0);
    tmp_255_fu_727_p2 <= "1" when (unsigned(tmp_92_fu_713_p3) > unsigned(tmp_93_fu_721_p2)) else "0";
    tmp_256_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_713_p3),8));
    tmp_257_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_93_fu_721_p2),8));
    
    tmp_258_fu_741_p4_proc : process(dec_data_out_V_reg_985)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_258_fu_741_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := dec_data_out_V_reg_985;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_258_fu_741_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_258_fu_741_p4_i) := dec_data_out_V_reg_985(128-1-tmp_258_fu_741_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_258_fu_741_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_259_fu_750_p2 <= std_logic_vector(unsigned(tmp_256_fu_733_p1) - unsigned(tmp_257_fu_737_p1));
    tmp_260_fu_756_p2 <= (tmp_256_fu_733_p1 xor ap_const_lv8_7F);
    tmp_261_fu_762_p2 <= std_logic_vector(unsigned(tmp_257_fu_737_p1) - unsigned(tmp_256_fu_733_p1));
    tmp_262_fu_768_p3 <= 
        tmp_259_fu_750_p2 when (tmp_255_fu_727_p2(0) = '1') else 
        tmp_261_fu_762_p2;
    tmp_263_fu_776_p3 <= 
        tmp_258_fu_741_p4 when (tmp_255_fu_727_p2(0) = '1') else 
        dec_data_out_V_reg_985;
    tmp_264_fu_783_p3 <= 
        tmp_260_fu_756_p2 when (tmp_255_fu_727_p2(0) = '1') else 
        tmp_256_fu_733_p1;
    tmp_265_fu_791_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(tmp_262_fu_768_p3));
    tmp_266_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_264_fu_783_p3),128));
    tmp_267_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_265_reg_1006),128));
    tmp_268_fu_801_p2 <= std_logic_vector(shift_right(unsigned(tmp_263_fu_776_p3),to_integer(unsigned('0' & tmp_266_fu_797_p1(31-1 downto 0)))));
    tmp_269_fu_834_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_267_fu_831_p1(31-1 downto 0)))));
    tmp_270_fu_840_p2 <= (tmp_269_fu_834_p2 and tmp_268_reg_1011);
    tmp_272_fu_315_p2 <= "1" when (unsigned(tmp_94_fu_302_p3) > unsigned(tmp_95_fu_309_p2)) else "0";
    tmp_273_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_302_p3),8));
    tmp_274_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_95_fu_309_p2),8));
    tmp_275_fu_329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(axis_enc_data_in_V_data_V_0_data_out),128));
    tmp_276_fu_333_p2 <= (tmp_273_fu_321_p1 xor ap_const_lv8_7F);
    tmp_277_fu_339_p3 <= 
        tmp_273_fu_321_p1 when (tmp_272_fu_315_p2(0) = '1') else 
        tmp_274_fu_325_p1;
    tmp_278_fu_347_p3 <= 
        tmp_274_fu_325_p1 when (tmp_272_fu_315_p2(0) = '1') else 
        tmp_273_fu_321_p1;
    tmp_279_fu_355_p3 <= 
        tmp_276_fu_333_p2 when (tmp_272_fu_315_p2(0) = '1') else 
        tmp_273_fu_321_p1;
    tmp_280_fu_363_p2 <= (tmp_277_fu_339_p3 xor ap_const_lv8_7F);
    tmp_281_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_279_fu_355_p3),128));
    tmp_282_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_278_fu_347_p3),128));
    tmp_283_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_280_fu_363_p2),128));
    tmp_284_fu_381_p2 <= std_logic_vector(shift_left(unsigned(tmp_275_fu_329_p1),to_integer(unsigned('0' & tmp_281_fu_369_p1(31-1 downto 0)))));
    
    tmp_285_fu_387_p4_proc : process(tmp_284_fu_381_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(128+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_285_fu_387_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(128 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(7 - 1 downto 0) := ap_const_lv32_7F(7 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(7 - 1 downto 0) := ap_const_lv32_0(7 - 1 downto 0);
        v0_cpy := tmp_284_fu_381_p2;
        if (vlo_cpy(7 - 1 downto 0) > vhi_cpy(7 - 1 downto 0)) then
            vhi_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_0(7-1 downto 0)));
            vlo_cpy(7-1 downto 0) := std_logic_vector(128-1-unsigned(ap_const_lv32_7F(7-1 downto 0)));
            for tmp_285_fu_387_p4_i in 0 to 128-1 loop
                v0_cpy(tmp_285_fu_387_p4_i) := tmp_284_fu_381_p2(128-1-tmp_285_fu_387_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(7-1 downto 0)))));

        section := (others=>'0');
        section(7-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(7-1 downto 0)) - unsigned(vlo_cpy(7-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(128-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        tmp_285_fu_387_p4 <= resvalue(128-1 downto 0);
    end process;

    tmp_286_fu_397_p3 <= 
        tmp_285_fu_387_p4 when (tmp_272_fu_315_p2(0) = '1') else 
        tmp_284_fu_381_p2;
    tmp_287_fu_405_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_282_fu_373_p1(31-1 downto 0)))));
    tmp_288_fu_411_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv128_lc_2),to_integer(unsigned('0' & tmp_283_fu_377_p1(31-1 downto 0)))));
    tmp_289_fu_423_p2 <= (p_demorgan_fu_417_p2 xor ap_const_lv128_lc_2);
    tmp_290_fu_429_p2 <= (tmp_289_fu_423_p2 and enc_data_in_V_s_reg_157);
    tmp_291_fu_435_p2 <= (tmp_286_fu_397_p3 and p_demorgan_fu_417_p2);
    tmp_91_fu_472_p2 <= (tmp_s_fu_463_p3 or ap_const_lv6_1F);
    tmp_92_fu_713_p3 <= (tmp_254_fu_709_p1 & ap_const_lv5_0);
    tmp_93_fu_721_p2 <= (tmp_92_fu_713_p3 or ap_const_lv7_1F);
    tmp_94_fu_302_p3 <= (tmp_reg_934 & ap_const_lv5_0);
    tmp_95_fu_309_p2 <= (tmp_94_fu_302_p3 or ap_const_lv7_1F);
    tmp_fu_246_p1 <= i_reg_169(2 - 1 downto 0);
    tmp_s_fu_463_p3 <= (tmp_214_fu_459_p1 & ap_const_lv5_0);
end behav;
