-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity operator_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    awgn_26_lfsr128_V_read : IN STD_LOGIC_VECTOR (127 downto 0);
    snr_V_read : IN STD_LOGIC_VECTOR (7 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (25 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (127 downto 0) );
end;


architecture behav of operator_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv49_40000 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000001000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv29_1E000001 : STD_LOGIC_VECTOR (28 downto 0) := "11110000000000000000000000001";
    constant ap_const_lv26_1FFFFFF : STD_LOGIC_VECTOR (25 downto 0) := "01111111111111111111111111";
    constant ap_const_lv26_2000001 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal coarseContents_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal coarseContents_ce0 : STD_LOGIC;
    signal coarseContents_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal gradientContents_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal gradientContents_ce0 : STD_LOGIC;
    signal gradientContents_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal scaleLookup_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal scaleLookup_ce0 : STD_LOGIC;
    signal scaleLookup_q0 : STD_LOGIC_VECTOR (16 downto 0);
    signal i_1_fu_353_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1305 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_86_fu_375_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_86_reg_1310 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_217_fu_386_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_217_reg_1317 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_9_fu_402_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_9_reg_1325 : STD_LOGIC_VECTOR (127 downto 0);
    signal tmp_218_reg_1331 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_reg_1340 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp100_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp100_reg_1348 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp101_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp101_reg_1355 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_reg_1366 : STD_LOGIC_VECTOR (0 downto 0);
    signal normStage_cast_fu_530_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal normStage_cast_reg_1377 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal normStage_1_fu_540_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal normStage_1_reg_1385 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_219_fu_579_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_219_reg_1397 : STD_LOGIC_VECTOR (9 downto 0);
    signal phitmp4_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp4_reg_1412 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_91_fu_736_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_reg_1416 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_15_fu_745_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_V_15_reg_1421 : STD_LOGIC_VECTOR (14 downto 0);
    signal coarseContents_load_reg_1426 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal gradientContents_loa_reg_1431 : STD_LOGIC_VECTOR (12 downto 0);
    signal sel_tmp41_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp41_reg_1436 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_12_fu_1254_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal r_V_12_reg_1443 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal noiseGen_3_V_fu_890_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal noiseGen_3_V_1_fu_929_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_3_fu_967_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_6_fu_983_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal centralLimitNoise_V_fu_1027_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal centralLimitNoise_V_reg_1468 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal scale_V_reg_1473 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_1039_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_31_reg_1488 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal norm_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal norm_V_ce0 : STD_LOGIC;
    signal norm_V_we0 : STD_LOGIC;
    signal norm_V_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal norm_V_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal noiseGen_V_3_reg_251 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_V_2_reg_263 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_2_reg_275 : STD_LOGIC_VECTOR (28 downto 0);
    signal noiseGen_3_V_4_reg_287 : STD_LOGIC_VECTOR (28 downto 0);
    signal i_reg_299 : STD_LOGIC_VECTOR (2 downto 0);
    signal normStage_reg_310 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_86_cast_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_fu_526_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_90_cast_fu_555_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_61_fu_582_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_92_cast_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_91_cast_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bramChapter_3_V_1_fu_146 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_0_V_1_fu_498_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_9_fu_693_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_2_fu_150 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_1_V_1_fu_490_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_8_fu_686_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_4_fu_154 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel3_fu_474_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_5_fu_672_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_fu_158 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel1_fu_458_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_3_fu_658_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_85_fu_363_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_371_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_51_cast_fu_359_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal op2_assign_fu_390_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_52_fu_398_p1 : STD_LOGIC_VECTOR (127 downto 0);
    signal newSel_fu_450_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel2_fu_466_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sel_tmp102_fu_482_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_64_cast_fu_546_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_90_fu_550_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal phitmp2_fu_560_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_334_p6 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_58_fu_569_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_59_fu_573_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal op2_assign_2_fu_588_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal op2_assign_2_cast_fu_594_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_14_fu_598_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal op2_assign_1_fu_604_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal op2_assign_1_cast_fu_610_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_68_fu_614_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_220_fu_620_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal op2_assign_3_fu_630_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal op2_assign_3_cast_fu_635_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_V_16_fu_639_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_10_fu_645_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel15_fu_651_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal newSel16_fu_665_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal bramChapter_3_V_7_fu_679_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_77_cast_fu_700_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_92_fu_703_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_71_cast_fu_733_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_72_cast_fu_741_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal sel_tmp36_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp38_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp40_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp89_fu_776_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp88_fu_770_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_13_fu_796_p3 : STD_LOGIC_VECTOR (26 downto 0);
    signal tmp_62_fu_793_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_11_cast_fu_803_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal sel_tmp26_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp47_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp44_fu_834_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal noiseGen_0_V_fu_807_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sel_tmp31_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp27_fu_824_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal noiseGen_0_V_2_fu_813_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal or_cond2_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond3_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel4_fu_857_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel5_fu_869_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal or_cond4_fu_877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel6_fu_882_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel8_fu_898_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel9_fu_906_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel7_fu_914_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel10_fu_921_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel11_fu_937_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel12_fu_945_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel13_fu_952_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal newSel14_fu_959_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sel_tmp51_fu_842_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp54_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal noiseGen_3_V_5_fu_975_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_8_cast_fu_995_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_7_cast_fu_991_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_fu_1007_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_fu_999_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_cast_56_fu_1003_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp84_fu_1017_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp184_cast_fu_1023_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp183_cast_fu_1013_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_1039_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_78_fu_1057_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal r_V_19_fu_1066_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lfsr1_V_fu_1045_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_20_fu_1074_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_s_fu_1080_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal r_V_21_fu_1090_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_22_fu_1094_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_23_fu_1100_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_214_fu_1112_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_25_fu_1115_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal lfsr2_V_fu_1054_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_26_fu_1123_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_6_fu_1129_p4 : STD_LOGIC_VECTOR (50 downto 0);
    signal r_V_27_fu_1139_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_28_fu_1143_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_29_fu_1149_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_24_fu_1106_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_30_fu_1155_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_48_fu_1169_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_fu_1172_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_216_fu_1188_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal roundedNoise_V_fu_1178_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal icmp_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal saturatedNoise_V_1_fu_1220_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal saturatedNoise_V_fu_1210_p4 : STD_LOGIC_VECTOR (25 downto 0);
    signal ssdm_int_V_write_ass_fu_1234_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_s_fu_1161_p3 : STD_LOGIC_VECTOR (127 downto 0);
    signal r_V_12_fu_1254_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1039_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_V_12_fu_1254_p00 : STD_LOGIC_VECTOR (22 downto 0);

    component encoder_decoder_meOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (8 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component encoder_decoder_mfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component encoder_decoder_mg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component operator_s_coarsebkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component operator_s_gradiecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component operator_s_scaleLdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component operator_s_norm_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    coarseContents_U : component operator_s_coarsebkb
    generic map (
        DataWidth => 17,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => coarseContents_address0,
        ce0 => coarseContents_ce0,
        q0 => coarseContents_q0);

    gradientContents_U : component operator_s_gradiecud
    generic map (
        DataWidth => 13,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => gradientContents_address0,
        ce0 => gradientContents_ce0,
        q0 => gradientContents_q0);

    scaleLookup_U : component operator_s_scaleLdEe
    generic map (
        DataWidth => 17,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => scaleLookup_address0,
        ce0 => scaleLookup_ce0,
        q0 => scaleLookup_q0);

    norm_V_U : component operator_s_norm_V
    generic map (
        DataWidth => 15,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => norm_V_address0,
        ce0 => norm_V_ce0,
        we0 => norm_V_we0,
        d0 => norm_V_d0,
        q0 => norm_V_q0);

    encoder_decoder_meOg_U1 : component encoder_decoder_meOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 9,
        din4_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => bramChapter_3_V_1_fu_146,
        din1 => bramChapter_3_V_2_fu_150,
        din2 => bramChapter_3_V_4_fu_154,
        din3 => bramChapter_3_V_fu_158,
        din4 => tmp_217_reg_1317,
        dout => grp_fu_334_p6);

    encoder_decoder_mfYi_U2 : component encoder_decoder_mfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 31,
        din1_WIDTH => 17,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => centralLimitNoise_V_reg_1468,
        din1 => grp_fu_1039_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_1039_p2);

    encoder_decoder_mg8j_U3 : component encoder_decoder_mg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 10,
        dout_WIDTH => 23)
    port map (
        din0 => r_V_12_fu_1254_p0,
        din1 => tmp_219_reg_1397,
        dout => r_V_12_fu_1254_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    bramChapter_3_V_1_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phitmp4_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                bramChapter_3_V_1_fu_146 <= bramChapter_3_V_9_fu_693_p3;
            elsif (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bramChapter_3_V_1_fu_146 <= bramChapter_0_V_1_fu_498_p3;
            end if; 
        end if;
    end process;

    bramChapter_3_V_2_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phitmp4_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                bramChapter_3_V_2_fu_150 <= bramChapter_3_V_8_fu_686_p3;
            elsif (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bramChapter_3_V_2_fu_150 <= bramChapter_1_V_1_fu_490_p3;
            end if; 
        end if;
    end process;

    bramChapter_3_V_4_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phitmp4_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                bramChapter_3_V_4_fu_154 <= bramChapter_3_V_5_fu_672_p3;
            elsif (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bramChapter_3_V_4_fu_154 <= newSel3_fu_474_p3;
            end if; 
        end if;
    end process;

    bramChapter_3_V_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phitmp4_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                bramChapter_3_V_fu_158 <= bramChapter_3_V_3_fu_658_p3;
            elsif (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                bramChapter_3_V_fu_158 <= newSel1_fu_458_p3;
            end if; 
        end if;
    end process;

    i_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_299 <= i_1_reg_1305;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_299 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    normStage_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                normStage_reg_310 <= normStage_1_reg_1385;
            elsif (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                normStage_reg_310 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                centralLimitNoise_V_reg_1468 <= centralLimitNoise_V_fu_1027_p2;
                scale_V_reg_1473 <= scaleLookup_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                coarseContents_load_reg_1426 <= coarseContents_q0;
                gradientContents_loa_reg_1431 <= gradientContents_q0;
                sel_tmp41_reg_1436 <= sel_tmp41_fu_781_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_1305 <= i_1_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                noiseGen_3_V_2_reg_275 <= noiseGen_3_V_3_fu_967_p3;
                noiseGen_3_V_4_reg_287 <= noiseGen_3_V_6_fu_983_p3;
                noiseGen_V_2_reg_263 <= noiseGen_3_V_1_fu_929_p3;
                noiseGen_V_3_reg_251 <= noiseGen_3_V_fu_890_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                normStage_1_reg_1385 <= normStage_1_fu_540_p2;
                    normStage_cast_reg_1377(2 downto 0) <= normStage_cast_fu_530_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                or_cond_reg_1366 <= or_cond_fu_444_p2;
                r_V_9_reg_1325 <= r_V_9_fu_402_p2;
                sel_tmp100_reg_1348 <= sel_tmp100_fu_432_p2;
                sel_tmp101_reg_1355 <= sel_tmp101_fu_438_p2;
                sel_tmp_reg_1340 <= sel_tmp_fu_426_p2;
                tmp_217_reg_1317 <= tmp_217_fu_386_p1;
                tmp_218_reg_1331 <= r_V_9_fu_402_p2(31 downto 31);
                tmp_86_reg_1310 <= tmp_86_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                phitmp4_reg_1412 <= phitmp4_fu_624_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                r_V_12_reg_1443 <= r_V_12_fu_1254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((phitmp4_fu_624_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                r_V_15_reg_1421 <= r_V_15_fu_745_p2;
                tmp_91_reg_1416 <= tmp_91_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                r_V_31_reg_1488 <= grp_fu_1039_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                tmp_219_reg_1397 <= tmp_219_fu_579_p1;
            end if;
        end if;
    end process;
    normStage_cast_reg_1377(3) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_347_p2, ap_CS_fsm_state3, exitcond_fu_534_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond_fu_534_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= ssdm_int_V_write_ass_fu_1234_p3;
    ap_return_1 <= p_Result_s_fu_1161_p3;
    bramChapter_0_V_1_fu_498_p3 <= 
        ap_const_lv9_0 when (sel_tmp101_fu_438_p2(0) = '1') else 
        bramChapter_3_V_1_fu_146;
    bramChapter_1_V_1_fu_490_p3 <= 
        bramChapter_3_V_2_fu_150 when (sel_tmp101_fu_438_p2(0) = '1') else 
        sel_tmp102_fu_482_p3;
    bramChapter_3_V_10_fu_645_p2 <= std_logic_vector(unsigned(grp_fu_334_p6) + unsigned(r_V_16_fu_639_p2));
    bramChapter_3_V_3_fu_658_p3 <= 
        bramChapter_3_V_fu_158 when (or_cond_reg_1366(0) = '1') else 
        newSel15_fu_651_p3;
    bramChapter_3_V_5_fu_672_p3 <= 
        bramChapter_3_V_4_fu_154 when (or_cond_reg_1366(0) = '1') else 
        newSel16_fu_665_p3;
    bramChapter_3_V_7_fu_679_p3 <= 
        bramChapter_3_V_10_fu_645_p2 when (sel_tmp100_reg_1348(0) = '1') else 
        bramChapter_3_V_2_fu_150;
    bramChapter_3_V_8_fu_686_p3 <= 
        bramChapter_3_V_2_fu_150 when (sel_tmp101_reg_1355(0) = '1') else 
        bramChapter_3_V_7_fu_679_p3;
    bramChapter_3_V_9_fu_693_p3 <= 
        bramChapter_3_V_10_fu_645_p2 when (sel_tmp101_reg_1355(0) = '1') else 
        bramChapter_3_V_1_fu_146;
    centralLimitNoise_V_fu_1027_p2 <= std_logic_vector(signed(tmp184_cast_fu_1023_p1) + signed(tmp183_cast_fu_1013_p1));
    coarseContents_address0 <= tmp_61_fu_582_p1(9 - 1 downto 0);

    coarseContents_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            coarseContents_ce0 <= ap_const_logic_1;
        else 
            coarseContents_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_347_p2 <= "1" when (i_reg_299 = ap_const_lv3_4) else "0";
    exitcond_fu_534_p2 <= "1" when (normStage_reg_310 = ap_const_lv3_4) else "0";
    gradientContents_address0 <= tmp_61_fu_582_p1(9 - 1 downto 0);

    gradientContents_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gradientContents_ce0 <= ap_const_logic_1;
        else 
            gradientContents_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1039_p1 <= grp_fu_1039_p10(17 - 1 downto 0);
    grp_fu_1039_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scale_V_reg_1473),48));
    i_1_fu_353_p2 <= std_logic_vector(unsigned(i_reg_299) + unsigned(ap_const_lv3_1));
    icmp_fu_1198_p2 <= "1" when (signed(tmp_216_fu_1188_p4) > signed(ap_const_lv4_0)) else "0";
    lfsr1_V_fu_1045_p4 <= awgn_26_lfsr128_V_read(127 downto 64);
    lfsr2_V_fu_1054_p1 <= awgn_26_lfsr128_V_read(64 - 1 downto 0);
    newSel10_fu_921_p3 <= 
        noiseGen_V_2_reg_263 when (or_cond3_fu_864_p2(0) = '1') else 
        newSel9_fu_906_p3;
    newSel11_fu_937_p3 <= 
        noiseGen_0_V_fu_807_p2 when (sel_tmp47_fu_838_p2(0) = '1') else 
        noiseGen_3_V_2_reg_275;
    newSel12_fu_945_p3 <= 
        noiseGen_3_V_2_reg_275 when (sel_tmp41_reg_1436(0) = '1') else 
        noiseGen_0_V_2_fu_813_p2;
    newSel13_fu_952_p3 <= 
        noiseGen_3_V_2_reg_275 when (sel_tmp101_reg_1355(0) = '1') else 
        newSel11_fu_937_p3;
    newSel14_fu_959_p3 <= 
        newSel12_fu_945_p3 when (or_cond3_fu_864_p2(0) = '1') else 
        noiseGen_3_V_2_reg_275;
    newSel15_fu_651_p3 <= 
        bramChapter_3_V_fu_158 when (sel_tmp_reg_1340(0) = '1') else 
        bramChapter_3_V_10_fu_645_p2;
    newSel16_fu_665_p3 <= 
        bramChapter_3_V_10_fu_645_p2 when (sel_tmp_reg_1340(0) = '1') else 
        bramChapter_3_V_4_fu_154;
    newSel1_fu_458_p3 <= 
        bramChapter_3_V_fu_158 when (or_cond_fu_444_p2(0) = '1') else 
        newSel_fu_450_p3;
    newSel2_fu_466_p3 <= 
        ap_const_lv9_0 when (sel_tmp_fu_426_p2(0) = '1') else 
        bramChapter_3_V_4_fu_154;
    newSel3_fu_474_p3 <= 
        bramChapter_3_V_4_fu_154 when (or_cond_fu_444_p2(0) = '1') else 
        newSel2_fu_466_p3;
    newSel4_fu_857_p3 <= 
        noiseGen_0_V_fu_807_p2 when (sel_tmp41_reg_1436(0) = '1') else 
        noiseGen_V_3_reg_251;
    newSel5_fu_869_p3 <= 
        noiseGen_V_3_reg_251 when (sel_tmp27_fu_824_p2(0) = '1') else 
        noiseGen_0_V_2_fu_813_p2;
    newSel6_fu_882_p3 <= 
        newSel4_fu_857_p3 when (or_cond3_fu_864_p2(0) = '1') else 
        newSel5_fu_869_p3;
    newSel7_fu_914_p3 <= 
        noiseGen_V_2_reg_263 when (sel_tmp101_reg_1355(0) = '1') else 
        newSel8_fu_898_p3;
    newSel8_fu_898_p3 <= 
        noiseGen_V_2_reg_263 when (sel_tmp47_fu_838_p2(0) = '1') else 
        noiseGen_0_V_fu_807_p2;
    newSel9_fu_906_p3 <= 
        noiseGen_0_V_2_fu_813_p2 when (sel_tmp27_fu_824_p2(0) = '1') else 
        noiseGen_V_2_reg_263;
    newSel_fu_450_p3 <= 
        bramChapter_3_V_fu_158 when (sel_tmp_fu_426_p2(0) = '1') else 
        ap_const_lv9_0;
    noiseGen_0_V_2_fu_813_p2 <= std_logic_vector(unsigned(r_V_11_cast_fu_803_p1) + unsigned(tmp_62_fu_793_p1));
    noiseGen_0_V_fu_807_p2 <= std_logic_vector(signed(tmp_62_fu_793_p1) - signed(r_V_11_cast_fu_803_p1));
    noiseGen_3_V_1_fu_929_p3 <= 
        newSel7_fu_914_p3 when (or_cond4_fu_877_p2(0) = '1') else 
        newSel10_fu_921_p3;
    noiseGen_3_V_3_fu_967_p3 <= 
        newSel13_fu_952_p3 when (or_cond4_fu_877_p2(0) = '1') else 
        newSel14_fu_959_p3;
    noiseGen_3_V_5_fu_975_p3 <= 
        noiseGen_0_V_2_fu_813_p2 when (sel_tmp51_fu_842_p2(0) = '1') else 
        noiseGen_3_V_4_reg_287;
    noiseGen_3_V_6_fu_983_p3 <= 
        noiseGen_0_V_fu_807_p2 when (sel_tmp54_fu_847_p2(0) = '1') else 
        noiseGen_3_V_5_fu_975_p3;
    noiseGen_3_V_fu_890_p3 <= 
        noiseGen_V_3_reg_251 when (or_cond4_fu_877_p2(0) = '1') else 
        newSel6_fu_882_p3;
    normStage_1_fu_540_p2 <= std_logic_vector(unsigned(normStage_reg_310) + unsigned(ap_const_lv3_1));
    normStage_cast_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(normStage_reg_310),4));

    norm_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, tmp_86_cast_fu_381_p1, tmp_90_cast_fu_555_p1, tmp_92_cast_fu_708_p1, tmp_91_cast_fu_751_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            norm_V_address0 <= tmp_91_cast_fu_751_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            norm_V_address0 <= tmp_92_cast_fu_708_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            norm_V_address0 <= tmp_90_cast_fu_555_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            norm_V_address0 <= tmp_86_cast_fu_381_p1(5 - 1 downto 0);
        else 
            norm_V_address0 <= "XXXXX";
        end if; 
    end process;


    norm_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            norm_V_ce0 <= ap_const_logic_1;
        else 
            norm_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    norm_V_d0_assign_proc : process(ap_CS_fsm_state2, r_V_9_fu_402_p2, ap_CS_fsm_state4, r_V_15_reg_1421, norm_V_q0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            norm_V_d0 <= r_V_15_reg_1421;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            norm_V_d0 <= norm_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            norm_V_d0 <= r_V_9_fu_402_p2(29 downto 15);
        else 
            norm_V_d0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    norm_V_we0_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_347_p2, phitmp4_fu_624_p2, phitmp4_reg_1412, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((((exitcond1_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((phitmp4_reg_1412 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5)) or ((phitmp4_fu_624_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            norm_V_we0 <= ap_const_logic_1;
        else 
            norm_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    op2_assign_1_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_1_fu_604_p2),15));
    op2_assign_1_fu_604_p2 <= (r_V_14_fu_598_p2 xor ap_const_lv4_F);
    op2_assign_2_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_2_fu_588_p2),4));
    op2_assign_2_fu_588_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) - unsigned(normStage_reg_310));
    op2_assign_3_cast_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_3_fu_630_p2),9));
    op2_assign_3_fu_630_p2 <= std_logic_vector(signed(ap_const_lv4_8) - signed(normStage_cast_reg_1377));
    op2_assign_fu_390_p3 <= (tmp_217_fu_386_p1 & ap_const_lv5_0);
    or_cond2_fu_851_p2 <= (sel_tmp47_fu_838_p2 or sel_tmp44_fu_834_p2);
    or_cond3_fu_864_p2 <= (sel_tmp41_reg_1436 or sel_tmp31_fu_829_p2);
    or_cond4_fu_877_p2 <= (sel_tmp101_reg_1355 or or_cond2_fu_851_p2);
    or_cond_fu_444_p2 <= (sel_tmp101_fu_438_p2 or sel_tmp100_fu_432_p2);
        p_7_cast_fu_991_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_3_V_4_reg_287),30));

        p_8_cast_fu_995_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_3_V_2_reg_275),30));

    p_Result_s_fu_1161_p3 <= (r_V_24_fu_1106_p2 & r_V_30_fu_1155_p2);
    p_shl_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_85_fu_363_p3),6));
    phitmp2_fu_560_p4 <= r_V_9_reg_1325(14 downto 10);
    phitmp4_fu_624_p2 <= "1" when (tmp_220_fu_620_p1 = ap_const_lv9_0) else "0";
    r_V_11_cast_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_13_fu_796_p3),29));
    r_V_12_fu_1254_p0 <= r_V_12_fu_1254_p00(13 - 1 downto 0);
    r_V_12_fu_1254_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(gradientContents_loa_reg_1431),23));
    r_V_13_fu_796_p3 <= (coarseContents_load_reg_1426 & ap_const_lv10_0);
    r_V_14_fu_598_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv4_1),to_integer(unsigned('0' & op2_assign_2_cast_fu_594_p1(4-1 downto 0)))));
    r_V_15_fu_745_p2 <= std_logic_vector(shift_left(unsigned(norm_V_q0),to_integer(unsigned('0' & tmp_72_cast_fu_741_p1(15-1 downto 0)))));
    r_V_16_fu_639_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv9_1),to_integer(unsigned('0' & op2_assign_3_cast_fu_635_p1(9-1 downto 0)))));
    r_V_19_fu_1066_p3 <= (tmp_78_fu_1057_p4 & ap_const_lv34_0);
    r_V_20_fu_1074_p2 <= (r_V_19_fu_1066_p3 xor lfsr1_V_fu_1045_p4);
    r_V_21_fu_1090_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_s_fu_1080_p4),64));
    r_V_22_fu_1094_p2 <= (r_V_21_fu_1090_p1 xor r_V_20_fu_1074_p2);
    r_V_23_fu_1100_p2 <= std_logic_vector(shift_left(unsigned(r_V_22_fu_1094_p2),to_integer(unsigned('0' & ap_const_lv64_1(31-1 downto 0)))));
    r_V_24_fu_1106_p2 <= (r_V_23_fu_1100_p2 xor r_V_22_fu_1094_p2);
    r_V_25_fu_1115_p3 <= (tmp_214_fu_1112_p1 & ap_const_lv58_0);
    r_V_26_fu_1123_p2 <= (r_V_25_fu_1115_p3 xor lfsr2_V_fu_1054_p1);
    r_V_27_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_6_fu_1129_p4),64));
    r_V_28_fu_1143_p2 <= (r_V_27_fu_1139_p1 xor r_V_26_fu_1123_p2);
    r_V_29_fu_1149_p2 <= std_logic_vector(shift_left(unsigned(r_V_28_fu_1143_p2),to_integer(unsigned('0' & ap_const_lv64_7(31-1 downto 0)))));
    r_V_30_fu_1155_p2 <= (r_V_29_fu_1149_p2 xor r_V_28_fu_1143_p2);
    r_V_6_fu_1129_p4 <= r_V_26_fu_1123_p2(63 downto 13);
    r_V_9_fu_402_p2 <= std_logic_vector(shift_right(unsigned(awgn_26_lfsr128_V_read),to_integer(unsigned('0' & tmp_52_fu_398_p1(31-1 downto 0)))));
    r_V_fu_1172_p2 <= std_logic_vector(unsigned(ap_const_lv49_40000) + unsigned(tmp_48_fu_1169_p1));
    r_V_s_fu_1080_p4 <= r_V_20_fu_1074_p2(63 downto 35);
    roundedNoise_V_fu_1178_p4 <= r_V_fu_1172_p2(47 downto 19);
    saturatedNoise_V_1_fu_1220_p3 <= 
        ap_const_lv26_1FFFFFF when (icmp_fu_1198_p2(0) = '1') else 
        ap_const_lv26_2000001;
    saturatedNoise_V_fu_1210_p4 <= r_V_fu_1172_p2(44 downto 19);
    scaleLookup_address0 <= tmp_47_fu_526_p1(8 - 1 downto 0);

    scaleLookup_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            scaleLookup_ce0 <= ap_const_logic_1;
        else 
            scaleLookup_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp100_fu_432_p2 <= "1" when (tmp_217_fu_386_p1 = ap_const_lv2_1) else "0";
    sel_tmp101_fu_438_p2 <= "1" when (tmp_217_fu_386_p1 = ap_const_lv2_0) else "0";
    sel_tmp102_fu_482_p3 <= 
        ap_const_lv9_0 when (sel_tmp100_fu_432_p2(0) = '1') else 
        bramChapter_3_V_2_fu_150;
    sel_tmp26_fu_819_p2 <= (tmp_218_reg_1331 xor ap_const_lv1_1);
    sel_tmp27_fu_824_p2 <= (sel_tmp_reg_1340 and sel_tmp26_fu_819_p2);
    sel_tmp31_fu_829_p2 <= (sel_tmp26_fu_819_p2 and sel_tmp100_reg_1348);
    sel_tmp36_fu_755_p2 <= "0" when (tmp_217_reg_1317 = ap_const_lv2_0) else "1";
    sel_tmp38_fu_760_p2 <= "0" when (tmp_217_reg_1317 = ap_const_lv2_1) else "1";
    sel_tmp40_fu_765_p2 <= "0" when (tmp_217_reg_1317 = ap_const_lv2_2) else "1";
    sel_tmp41_fu_781_p2 <= (tmp89_fu_776_p2 and tmp88_fu_770_p2);
    sel_tmp44_fu_834_p2 <= (tmp_218_reg_1331 and sel_tmp_reg_1340);
    sel_tmp47_fu_838_p2 <= (tmp_218_reg_1331 and sel_tmp100_reg_1348);
    sel_tmp51_fu_842_p2 <= (sel_tmp26_fu_819_p2 and sel_tmp101_reg_1355);
    sel_tmp54_fu_847_p2 <= (tmp_218_reg_1331 and sel_tmp101_reg_1355);
    sel_tmp_fu_426_p2 <= "1" when (tmp_217_fu_386_p1 = ap_const_lv2_2) else "0";
    ssdm_int_V_write_ass_fu_1234_p3 <= 
        saturatedNoise_V_1_fu_1220_p3 when (tmp_s_fu_1228_p2(0) = '1') else 
        saturatedNoise_V_fu_1210_p4;
        tmp183_cast_fu_1013_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_1007_p2),31));

        tmp184_cast_fu_1023_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp84_fu_1017_p2),31));

    tmp84_fu_1017_p2 <= std_logic_vector(signed(tmp_cast_fu_999_p1) + signed(tmp_cast_56_fu_1003_p1));
    tmp88_fu_770_p2 <= (sel_tmp38_fu_760_p2 and sel_tmp36_fu_755_p2);
    tmp89_fu_776_p2 <= (tmp_218_reg_1331 and sel_tmp40_fu_765_p2);
    tmp_214_fu_1112_p1 <= awgn_26_lfsr128_V_read(6 - 1 downto 0);
    tmp_216_fu_1188_p4 <= r_V_fu_1172_p2(47 downto 44);
    tmp_217_fu_386_p1 <= i_reg_299(2 - 1 downto 0);
    tmp_219_fu_579_p1 <= r_V_9_reg_1325(10 - 1 downto 0);
    tmp_220_fu_620_p1 <= tmp_68_fu_614_p2(9 - 1 downto 0);
    tmp_47_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(snr_V_read),64));
    tmp_48_fu_1169_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_31_reg_1488),49));
    tmp_51_cast_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_299),6));
    tmp_52_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(op2_assign_fu_390_p3),128));
    tmp_56_fu_1204_p2 <= "1" when (signed(roundedNoise_V_fu_1178_p4) < signed(ap_const_lv29_1E000001)) else "0";
    tmp_58_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phitmp2_fu_560_p4),9));
    tmp_59_fu_573_p2 <= std_logic_vector(unsigned(grp_fu_334_p6) + unsigned(tmp_58_fu_569_p1));
    tmp_61_fu_582_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_59_fu_573_p2),64));
        tmp_62_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_12_reg_1443),29));

    tmp_64_cast_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(normStage_reg_310),6));
    tmp_68_fu_614_p2 <= std_logic_vector(shift_right(unsigned(norm_V_q0),to_integer(unsigned('0' & op2_assign_1_cast_fu_610_p1(15-1 downto 0)))));
    tmp_71_cast_fu_733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(normStage_1_reg_1385),6));
    tmp_72_cast_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_14_fu_598_p2),15));
    tmp_77_cast_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(normStage_1_reg_1385),6));
    tmp_78_fu_1057_p4 <= awgn_26_lfsr128_V_read(93 downto 64);
    tmp_85_fu_363_p3 <= (i_reg_299 & ap_const_lv2_0);
    tmp_86_cast_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_86_fu_375_p2),64));
    tmp_86_fu_375_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_371_p1) + unsigned(tmp_51_cast_fu_359_p1));
    tmp_90_cast_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_90_fu_550_p2),64));
    tmp_90_fu_550_p2 <= std_logic_vector(unsigned(tmp_86_reg_1310) + unsigned(tmp_64_cast_fu_546_p1));
    tmp_91_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_91_reg_1416),64));
    tmp_91_fu_736_p2 <= std_logic_vector(unsigned(tmp_86_reg_1310) + unsigned(tmp_71_cast_fu_733_p1));
    tmp_92_cast_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_703_p2),64));
    tmp_92_fu_703_p2 <= std_logic_vector(unsigned(tmp_86_reg_1310) + unsigned(tmp_77_cast_fu_700_p1));
        tmp_cast_56_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_V_3_reg_251),30));

        tmp_cast_fu_999_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(noiseGen_V_2_reg_263),30));

    tmp_fu_1007_p2 <= std_logic_vector(signed(p_8_cast_fu_995_p1) + signed(p_7_cast_fu_991_p1));
    tmp_s_fu_1228_p2 <= (tmp_56_fu_1204_p2 or icmp_fu_1198_p2);
end behav;
