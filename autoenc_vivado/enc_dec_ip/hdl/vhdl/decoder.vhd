-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decoder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_ap_vld : IN STD_LOGIC;
    data_V : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (127 downto 0);
    data_V_blk_n : OUT STD_LOGIC );
end;


architecture behav of decoder is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv26_1000000 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_const_lv26_0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000000";
    constant ap_const_lv26_3000000 : STD_LOGIC_VECTOR (25 downto 0) := "11000000000000000000000000";
    constant ap_const_lv26_2000000 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_1000000 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_const_lv25_1000000 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal logits2_0_V_reg_303 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_1_V_reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_2_V_reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits2_3_V_reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_60_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_60_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_60_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_60_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret6_reg_323_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal logits3_2_V_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_334 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_334_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_V_1_0_max_va_fu_160_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_V_1_0_max_va_reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_273_1_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_273_1_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_273_2_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_273_2_reg_350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_compute_layer_0_0_0_1_fu_52_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_52_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_52_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_52_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_52_ap_ce : STD_LOGIC;
    signal grp_softmax_fu_60_ap_start : STD_LOGIC;
    signal grp_softmax_fu_60_ap_done : STD_LOGIC;
    signal grp_softmax_fu_60_ap_idle : STD_LOGIC;
    signal grp_softmax_fu_60_ap_ready : STD_LOGIC;
    signal grp_softmax_fu_60_ap_ce : STD_LOGIC;
    signal grp_compute_layer_0_0_0_2_fu_72_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_72_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_72_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_72_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_72_ap_ce : STD_LOGIC;
    signal call_ret4_relu_1_fu_78_ap_ready : STD_LOGIC;
    signal call_ret4_relu_1_fu_78_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret4_relu_1_fu_78_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret4_relu_1_fu_78_ap_return_2 : STD_LOGIC_VECTOR (31 downto 0);
    signal call_ret4_relu_1_fu_78_ap_return_3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_softmax_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal max_val_V_1_1_max_va_fu_175_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_194_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_cast_cast_fu_187_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_s_64_fu_205_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_102_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_276_1_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_276_2_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_103_fu_255_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_121_cast_fu_247_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_120_cast_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_119_cast_fu_219_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_265_fu_262_p5 : STD_LOGIC_VECTOR (120 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to14 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component compute_layer_0_0_0_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_layer_0_0_0_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component relu_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_compute_layer_0_0_0_1_fu_52 : component compute_layer_0_0_0_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => call_ret4_relu_1_fu_78_ap_return_0,
        data_1_V_read => call_ret4_relu_1_fu_78_ap_return_1,
        data_2_V_read => call_ret4_relu_1_fu_78_ap_return_2,
        data_3_V_read => call_ret4_relu_1_fu_78_ap_return_3,
        ap_return_0 => grp_compute_layer_0_0_0_1_fu_52_ap_return_0,
        ap_return_1 => grp_compute_layer_0_0_0_1_fu_52_ap_return_1,
        ap_return_2 => grp_compute_layer_0_0_0_1_fu_52_ap_return_2,
        ap_return_3 => grp_compute_layer_0_0_0_1_fu_52_ap_return_3,
        ap_ce => grp_compute_layer_0_0_0_1_fu_52_ap_ce);

    grp_softmax_fu_60 : component softmax
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_softmax_fu_60_ap_start,
        ap_done => grp_softmax_fu_60_ap_done,
        ap_idle => grp_softmax_fu_60_ap_idle,
        ap_ready => grp_softmax_fu_60_ap_ready,
        ap_ce => grp_softmax_fu_60_ap_ce,
        data_0_V_read => logits2_0_V_reg_303,
        data_1_V_read => logits2_1_V_reg_308,
        data_2_V_read => logits2_2_V_reg_313,
        data_3_V_read => logits2_3_V_reg_318,
        ap_return_0 => grp_softmax_fu_60_ap_return_0,
        ap_return_1 => grp_softmax_fu_60_ap_return_1,
        ap_return_2 => grp_softmax_fu_60_ap_return_2,
        ap_return_3 => grp_softmax_fu_60_ap_return_3);

    grp_compute_layer_0_0_0_2_fu_72 : component compute_layer_0_0_0_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => data_V,
        ap_return_0 => grp_compute_layer_0_0_0_2_fu_72_ap_return_0,
        ap_return_1 => grp_compute_layer_0_0_0_2_fu_72_ap_return_1,
        ap_return_2 => grp_compute_layer_0_0_0_2_fu_72_ap_return_2,
        ap_return_3 => grp_compute_layer_0_0_0_2_fu_72_ap_return_3,
        ap_ce => grp_compute_layer_0_0_0_2_fu_72_ap_ce);

    call_ret4_relu_1_fu_78 : component relu_1
    port map (
        ap_ready => call_ret4_relu_1_fu_78_ap_ready,
        data_0_V_read => grp_compute_layer_0_0_0_2_fu_72_ap_return_0,
        data_1_V_read => grp_compute_layer_0_0_0_2_fu_72_ap_return_1,
        data_2_V_read => grp_compute_layer_0_0_0_2_fu_72_ap_return_2,
        data_3_V_read => grp_compute_layer_0_0_0_2_fu_72_ap_return_3,
        ap_return_0 => call_ret4_relu_1_fu_78_ap_return_0,
        ap_return_1 => call_ret4_relu_1_fu_78_ap_return_1,
        ap_return_2 => call_ret4_relu_1_fu_78_ap_return_2,
        ap_return_3 => call_ret4_relu_1_fu_78_ap_return_3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_softmax_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_softmax_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
                    grp_softmax_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_softmax_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_softmax_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                call_ret6_reg_323_3 <= grp_softmax_fu_60_ap_return_3;
                logits2_0_V_reg_303 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_0;
                logits2_1_V_reg_308 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_1;
                logits2_2_V_reg_313 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_2;
                logits2_3_V_reg_318 <= grp_compute_layer_0_0_0_1_fu_52_ap_return_3;
                logits3_2_V_reg_328 <= grp_softmax_fu_60_ap_return_2;
                max_val_V_1_0_max_va_reg_339 <= max_val_V_1_0_max_va_fu_160_p3;
                tmp_273_1_reg_345 <= tmp_273_1_fu_171_p2;
                tmp_273_2_reg_350 <= tmp_273_2_fu_181_p2;
                tmp_s_reg_334 <= tmp_s_fu_154_p2;
                tmp_s_reg_334_pp0_iter14_reg <= tmp_s_reg_334;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, data_V_ap_vld)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((data_V_ap_vld = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, data_V_ap_vld)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((data_V_ap_vld = ap_const_logic_0) or (ap_start = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, data_V_ap_vld)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((data_V_ap_vld = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter15 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to14_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to14 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to14)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to14 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_265_fu_262_p5),128));

    data_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, data_V_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_blk_n <= data_V_ap_vld;
        else 
            data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    grp_compute_layer_0_0_0_1_fu_52_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_0_1_fu_52_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_0_1_fu_52_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_compute_layer_0_0_0_2_fu_72_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_0_2_fu_72_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_0_2_fu_72_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_softmax_fu_60_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_softmax_fu_60_ap_ce <= ap_const_logic_1;
        else 
            grp_softmax_fu_60_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_softmax_fu_60_ap_start <= grp_softmax_fu_60_ap_start_reg;
    max_val_V_1_0_max_va_fu_160_p3 <= 
        grp_softmax_fu_60_ap_return_1 when (tmp_s_fu_154_p2(0) = '1') else 
        grp_softmax_fu_60_ap_return_0;
    max_val_V_1_1_max_va_fu_175_p3 <= 
        logits3_2_V_reg_328 when (tmp_273_1_fu_171_p2(0) = '1') else 
        max_val_V_1_0_max_va_reg_339;
    p_cast_cast_fu_187_p3 <= 
        ap_const_lv26_1000000 when (tmp_s_reg_334_pp0_iter14_reg(0) = '1') else 
        ap_const_lv26_0;
    p_s_64_fu_205_p3 <= 
        p_s_fu_194_p3 when (tmp_fu_201_p2(0) = '1') else 
        p_cast_cast_fu_187_p3;
    p_s_fu_194_p3 <= 
        ap_const_lv26_3000000 when (tmp_273_2_reg_350(0) = '1') else 
        ap_const_lv26_2000000;
    tmp_102_fu_213_p2 <= "1" when (p_s_64_fu_205_p3 = ap_const_lv26_0) else "0";
    tmp_103_fu_255_p3 <= 
        ap_const_lv25_1000000 when (tmp_273_2_reg_350(0) = '1') else 
        ap_const_lv25_0;
    tmp_119_cast_fu_219_p3 <= 
        ap_const_lv32_1000000 when (tmp_102_fu_213_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_120_cast_fu_233_p3 <= 
        ap_const_lv32_1000000 when (tmp_276_1_fu_227_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_121_cast_fu_247_p3 <= 
        ap_const_lv32_1000000 when (tmp_276_2_fu_241_p2(0) = '1') else 
        ap_const_lv32_0;
    tmp_265_fu_262_p5 <= (((tmp_103_fu_255_p3 & tmp_121_cast_fu_247_p3) & tmp_120_cast_fu_233_p3) & tmp_119_cast_fu_219_p3);
    tmp_273_1_fu_171_p2 <= "1" when (signed(logits3_2_V_reg_328) > signed(max_val_V_1_0_max_va_reg_339)) else "0";
    tmp_273_2_fu_181_p2 <= "1" when (signed(call_ret6_reg_323_3) > signed(max_val_V_1_1_max_va_fu_175_p3)) else "0";
    tmp_276_1_fu_227_p2 <= "1" when (p_s_64_fu_205_p3 = ap_const_lv26_1000000) else "0";
    tmp_276_2_fu_241_p2 <= "1" when (p_s_64_fu_205_p3 = ap_const_lv26_2000000) else "0";
    tmp_fu_201_p2 <= (tmp_273_2_reg_350 or tmp_273_1_reg_345);
    tmp_s_fu_154_p2 <= "1" when (signed(grp_softmax_fu_60_ap_return_1) > signed(grp_softmax_fu_60_ap_return_0)) else "0";
end behav;
